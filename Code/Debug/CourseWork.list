
CourseWork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000541c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080055a8  080055a8  000155a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057b8  080057b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080057b8  080057b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057b8  080057b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057b8  080057b8  000157b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057bc  080057bc  000157bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080057c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000090c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000918  20000918  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c518  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a78  00000000  00000000  0002c554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  0002dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007f8  00000000  00000000  0002e870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d0d4  00000000  00000000  0002f068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc01  00000000  00000000  0004c13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aee51  00000000  00000000  00057d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00106b8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002630  00000000  00000000  00106be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800558c 	.word	0x0800558c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800558c 	.word	0x0800558c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <get_max_amp>:
/* Частота дискретизации АЦП 128k отсчетов/сек, поэтому для уменьшения шага частот в полученном спектре
 * был взят большой размер массива входных данных.
 */


uint8_t get_max_amp(const float data[]) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	if ((data[0] > data[1]) & (data[0] > data[2])) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	ed93 7a00 	vldr	s14, [r3]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	3304      	adds	r3, #4
 8000b76:	edd3 7a00 	vldr	s15, [r3]
 8000b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b82:	bfcc      	ite	gt
 8000b84:	2301      	movgt	r3, #1
 8000b86:	2300      	movle	r3, #0
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	ed93 7a00 	vldr	s14, [r3]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3308      	adds	r3, #8
 8000b94:	edd3 7a00 	vldr	s15, [r3]
 8000b98:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ba0:	bfcc      	ite	gt
 8000ba2:	2301      	movgt	r3, #1
 8000ba4:	2300      	movle	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	4013      	ands	r3, r2
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <get_max_amp+0x50>
		return 1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e04a      	b.n	8000c4a <get_max_amp+0xe6>
	} else if ((data[1] > data[0]) & (data[1] > data[2])) {
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	ed93 7a00 	vldr	s14, [r3]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	edd3 7a00 	vldr	s15, [r3]
 8000bc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bca:	bfcc      	ite	gt
 8000bcc:	2301      	movgt	r3, #1
 8000bce:	2300      	movle	r3, #0
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	ed93 7a00 	vldr	s14, [r3]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3308      	adds	r3, #8
 8000bde:	edd3 7a00 	vldr	s15, [r3]
 8000be2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bea:	bfcc      	ite	gt
 8000bec:	2301      	movgt	r3, #1
 8000bee:	2300      	movle	r3, #0
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <get_max_amp+0x9a>
		return 2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e025      	b.n	8000c4a <get_max_amp+0xe6>
	} else if ((data[2] > data[0]) & (data[2] > data[1])) {
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3308      	adds	r3, #8
 8000c02:	ed93 7a00 	vldr	s14, [r3]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	edd3 7a00 	vldr	s15, [r3]
 8000c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c14:	bfcc      	ite	gt
 8000c16:	2301      	movgt	r3, #1
 8000c18:	2300      	movle	r3, #0
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3308      	adds	r3, #8
 8000c20:	ed93 7a00 	vldr	s14, [r3]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3304      	adds	r3, #4
 8000c28:	edd3 7a00 	vldr	s15, [r3]
 8000c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c34:	bfcc      	ite	gt
 8000c36:	2301      	movgt	r3, #1
 8000c38:	2300      	movle	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <get_max_amp+0xe4>
		return 3;
 8000c44:	2303      	movs	r3, #3
 8000c46:	e000      	b.n	8000c4a <get_max_amp+0xe6>
	}
		return 4;
 8000c48:	2304      	movs	r3, #4
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <fft>:
void fft(float data_re[], float data_im[], const unsigned int N)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b084      	sub	sp, #16
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	60f8      	str	r0, [r7, #12]
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
  rearrange(data_re, data_im, N);
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f000 f809 	bl	8000c7e <rearrange>
  compute(data_re, data_im, N);
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	68b9      	ldr	r1, [r7, #8]
 8000c70:	68f8      	ldr	r0, [r7, #12]
 8000c72:	f000 f861 	bl	8000d38 <compute>
}
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <rearrange>:

void rearrange(float data_re[], float data_im[], const unsigned int N)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b08b      	sub	sp, #44	; 0x2c
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	60f8      	str	r0, [r7, #12]
 8000c86:	60b9      	str	r1, [r7, #8]
 8000c88:	607a      	str	r2, [r7, #4]
  unsigned int target = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  for (unsigned int position=0; position<N; position++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
 8000c92:	e046      	b.n	8000d22 <rearrange+0xa4>
  {
    if (target > position)
 8000c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d92b      	bls.n	8000cf4 <rearrange+0x76>
    {
	const float temp_re = data_re[target];
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	61bb      	str	r3, [r7, #24]
	const float temp_im = data_im[target];
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	4413      	add	r3, r2
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	617b      	str	r3, [r7, #20]
	data_re[target] = data_re[position];
 8000cb4:	6a3b      	ldr	r3, [r7, #32]
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	441a      	add	r2, r3
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	68f9      	ldr	r1, [r7, #12]
 8000cc2:	440b      	add	r3, r1
 8000cc4:	6812      	ldr	r2, [r2, #0]
 8000cc6:	601a      	str	r2, [r3, #0]
	data_im[target] = data_im[position];
 8000cc8:	6a3b      	ldr	r3, [r7, #32]
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	441a      	add	r2, r3
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	440b      	add	r3, r1
 8000cd8:	6812      	ldr	r2, [r2, #0]
 8000cda:	601a      	str	r2, [r3, #0]
	data_re[position] = temp_re;
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	601a      	str	r2, [r3, #0]
	data_im[position] = temp_im;
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	4413      	add	r3, r2
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	601a      	str	r2, [r3, #0]
    }
  unsigned int mask = N;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	61fb      	str	r3, [r7, #28]
  while (target & (mask >>=1))
 8000cf8:	e004      	b.n	8000d04 <rearrange+0x86>
  {
    target &= ~mask;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d00:	4013      	ands	r3, r2
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  while (target & (mask >>=1))
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	085b      	lsrs	r3, r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f2      	bne.n	8000cfa <rearrange+0x7c>
  }
    target |= mask;
 8000d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  for (unsigned int position=0; position<N; position++)
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	623b      	str	r3, [r7, #32]
 8000d22:	6a3a      	ldr	r2, [r7, #32]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	d3b4      	bcc.n	8000c94 <rearrange+0x16>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	bf00      	nop
 8000d2e:	372c      	adds	r7, #44	; 0x2c
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <compute>:

void compute(float data_re[], float data_im[], const unsigned int N)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b090      	sub	sp, #64	; 0x40
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
  const float pi = -3.14159265358979323846;
 8000d44:	4b6b      	ldr	r3, [pc, #428]	; (8000ef4 <compute+0x1bc>)
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c

  for (unsigned int step=1; step<N; step <<= 1)
 8000d48:	2301      	movs	r3, #1
 8000d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d4c:	e0c7      	b.n	8000ede <compute+0x1a6>
  {
    const unsigned int jump = step << 1;
 8000d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
    const float step_d = (float) step;
 8000d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float twiddle_re = 1.0;
 8000d62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000d66:	63bb      	str	r3, [r7, #56]	; 0x38
    float twiddle_im = 0.0;
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
    for(unsigned int group=0; group<step; group++)
 8000d6e:	2300      	movs	r3, #0
 8000d70:	637b      	str	r3, [r7, #52]	; 0x34
 8000d72:	e0ac      	b.n	8000ece <compute+0x196>
    {
	  for (unsigned int pair=group; pair<N; pair+=jump)
 8000d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
 8000d78:	e077      	b.n	8000e6a <compute+0x132>
	  {
	    const unsigned int match = pair + step;
 8000d7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d7e:	4413      	add	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
	    const float product_re = twiddle_re*data_re[match]-twiddle_im*data_im[match];
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	4413      	add	r3, r2
 8000d8a:	ed93 7a00 	vldr	s14, [r3]
 8000d8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	edd3 6a00 	vldr	s13, [r3]
 8000da2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000da6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dae:	edc7 7a05 	vstr	s15, [r7, #20]
	    const float product_im = twiddle_im*data_re[match]+twiddle_re*data_im[match];
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	4413      	add	r3, r2
 8000dba:	ed93 7a00 	vldr	s14, [r3]
 8000dbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	4413      	add	r3, r2
 8000dce:	edd3 6a00 	vldr	s13, [r3]
 8000dd2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000dde:	edc7 7a04 	vstr	s15, [r7, #16]
	    data_re[match] = data_re[pair]-product_re;
 8000de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	4413      	add	r3, r2
 8000dea:	ed93 7a00 	vldr	s14, [r3]
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	4413      	add	r3, r2
 8000df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dfe:	edc3 7a00 	vstr	s15, [r3]
	    data_im[match] = data_im[pair]-product_im;
 8000e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	4413      	add	r3, r2
 8000e0a:	ed93 7a00 	vldr	s14, [r3]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	4413      	add	r3, r2
 8000e16:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e1e:	edc3 7a00 	vstr	s15, [r3]
	    data_re[pair] += product_re;
 8000e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4413      	add	r3, r2
 8000e2a:	ed93 7a00 	vldr	s14, [r3]
 8000e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	4413      	add	r3, r2
 8000e36:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3e:	edc3 7a00 	vstr	s15, [r3]
	    data_im[pair] += product_im;
 8000e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	4413      	add	r3, r2
 8000e4a:	ed93 7a00 	vldr	s14, [r3]
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	4413      	add	r3, r2
 8000e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e5e:	edc3 7a00 	vstr	s15, [r3]
	  for (unsigned int pair=group; pair<N; pair+=jump)
 8000e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	4413      	add	r3, r2
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
 8000e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d383      	bcc.n	8000d7a <compute+0x42>
	  }

	// we need the factors below for the next iteration
	// if we don't iterate then don't compute

	if (group+1 == step)
 8000e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e74:	3301      	adds	r3, #1
 8000e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d024      	beq.n	8000ec6 <compute+0x18e>
	{
      continue;
	}

	float angle = pi*((float) group+1)/step_d;
 8000e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7e:	ee07 3a90 	vmov	s15, r3
 8000e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000e8e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000e92:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e96:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e9e:	edc7 7a07 	vstr	s15, [r7, #28]
	twiddle_re = cos(angle);
 8000ea2:	69f8      	ldr	r0, [r7, #28]
 8000ea4:	f7ff faf4 	bl	8000490 <__aeabi_f2d>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	ec43 2b10 	vmov	d0, r2, r3
 8000eb0:	f003 fb0e 	bl	80044d0 <cos>
 8000eb4:	ec53 2b10 	vmov	r2, r3, d0
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fe02 	bl	8000ac4 <__aeabi_d2f>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ec4:	e000      	b.n	8000ec8 <compute+0x190>
      continue;
 8000ec6:	bf00      	nop
    for(unsigned int group=0; group<step; group++)
 8000ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eca:	3301      	adds	r3, #1
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8000ece:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	f4ff af4e 	bcc.w	8000d74 <compute+0x3c>
  for (unsigned int step=1; step<N; step <<= 1)
 8000ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ede:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	f4ff af33 	bcc.w	8000d4e <compute+0x16>

    }
  }
}
 8000ee8:	bf00      	nop
 8000eea:	bf00      	nop
 8000eec:	3740      	adds	r7, #64	; 0x40
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	c0490fdb 	.word	0xc0490fdb

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f000 fa99 	bl	8001434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f82f 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 f8f5 	bl	80010f4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f0a:	f000 f885 	bl	8001018 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000f0e:	f000 f8c1 	bl	8001094 <MX_USART1_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t UART_Data = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	if(amountOfPoints == 255)
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <main+0x5c>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2bff      	cmp	r3, #255	; 0xff
 8000f1c:	d1fb      	bne.n	8000f16 <main+0x1e>
	{
		amountOfPoints = 0;
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <main+0x5c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000f24:	2009      	movs	r0, #9
 8000f26:	f000 fc14 	bl	8001752 <HAL_NVIC_DisableIRQ>

		fft(ADC_Data, ADC_Data_im, 512);
 8000f2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f2e:	490a      	ldr	r1, [pc, #40]	; (8000f58 <main+0x60>)
 8000f30:	480a      	ldr	r0, [pc, #40]	; (8000f5c <main+0x64>)
 8000f32:	f7ff fe90 	bl	8000c56 <fft>
		UART_Data = get_max_amp(ADC_Data);
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <main+0x64>)
 8000f38:	f7ff fe14 	bl	8000b64 <get_max_amp>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]

		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000f40:	2009      	movs	r0, #9
 8000f42:	f000 fbf8 	bl	8001736 <HAL_NVIC_EnableIRQ>

		HAL_UART_Transmit(&huart1, &UART_Data, 1, 100);
 8000f46:	1df9      	adds	r1, r7, #7
 8000f48:	2364      	movs	r3, #100	; 0x64
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	4804      	ldr	r0, [pc, #16]	; (8000f60 <main+0x68>)
 8000f4e:	f002 fea7 	bl	8003ca0 <HAL_UART_Transmit>
	if(amountOfPoints == 255)
 8000f52:	e7e0      	b.n	8000f16 <main+0x1e>
 8000f54:	20000028 	.word	0x20000028
 8000f58:	200000b0 	.word	0x200000b0
 8000f5c:	20000514 	.word	0x20000514
 8000f60:	2000002c 	.word	0x2000002c

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b09e      	sub	sp, #120	; 0x78
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f6e:	2228      	movs	r2, #40	; 0x28
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f004 fb02 	bl	800557c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	463b      	mov	r3, r7
 8000f8a:	223c      	movs	r2, #60	; 0x3c
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 faf4 	bl	800557c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f94:	2301      	movs	r3, #1
 8000f96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fb4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fd82 	bl	8001ac4 <HAL_RCC_OscConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000fc6:	f000 f8d5 	bl	8001174 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fca:	230f      	movs	r3, #15
 8000fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fc74 	bl	80028d4 <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000ff2:	f000 f8bf 	bl	8001174 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fe9d 	bl	8002d40 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800100c:	f000 f8b2 	bl	8001174 <Error_Handler>
  }
}
 8001010:	bf00      	nop
 8001012:	3778      	adds	r7, #120	; 0x78
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <MX_SPI1_Init+0x74>)
 800101e:	4a1c      	ldr	r2, [pc, #112]	; (8001090 <MX_SPI1_Init+0x78>)
 8001020:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001022:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_SPI1_Init+0x74>)
 8001024:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001028:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <MX_SPI1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001030:	4b16      	ldr	r3, [pc, #88]	; (800108c <MX_SPI1_Init+0x74>)
 8001032:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001036:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001038:	4b14      	ldr	r3, [pc, #80]	; (800108c <MX_SPI1_Init+0x74>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <MX_SPI1_Init+0x74>)
 8001040:	2200      	movs	r2, #0
 8001042:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_SPI1_Init+0x74>)
 8001046:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800104a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <MX_SPI1_Init+0x74>)
 800104e:	2228      	movs	r2, #40	; 0x28
 8001050:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_SPI1_Init+0x74>)
 8001054:	2200      	movs	r2, #0
 8001056:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_SPI1_Init+0x74>)
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_SPI1_Init+0x74>)
 8001060:	2200      	movs	r2, #0
 8001062:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_SPI1_Init+0x74>)
 8001066:	2207      	movs	r2, #7
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_SPI1_Init+0x74>)
 800106c:	2200      	movs	r2, #0
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_SPI1_Init+0x74>)
 8001072:	2208      	movs	r2, #8
 8001074:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_SPI1_Init+0x74>)
 8001078:	f002 f812 	bl	80030a0 <HAL_SPI_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001082:	f000 f877 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200004b0 	.word	0x200004b0
 8001090:	40013000 	.word	0x40013000

08001094 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001098:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_USART1_UART_Init+0x58>)
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <MX_USART1_UART_Init+0x5c>)
 800109c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80010a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <MX_USART1_UART_Init+0x58>)
 80010d8:	f002 fd8c 	bl	8003bf4 <HAL_HalfDuplex_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80010e2:	f000 f847 	bl	8001174 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2000002c 	.word	0x2000002c
 80010f0:	40013800 	.word	0x40013800

080010f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_GPIO_Init+0x7c>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <MX_GPIO_Init+0x7c>)
 8001110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <MX_GPIO_Init+0x7c>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_GPIO_Init+0x7c>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <MX_GPIO_Init+0x7c>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_GPIO_Init+0x7c>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 800113a:	2308      	movs	r3, #8
 800113c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800113e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f000 fb19 	bl	8001788 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2009      	movs	r0, #9
 800115c:	f000 facf 	bl	80016fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001160:	2009      	movs	r0, #9
 8001162:	f000 fae8 	bl	8001736 <HAL_NVIC_EnableIRQ>

}
 8001166:	bf00      	nop
 8001168:	3720      	adds	r7, #32
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001178:	b672      	cpsid	i
}
 800117a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800117c:	e7fe      	b.n	800117c <Error_Handler+0x8>
	...

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_MspInit+0x44>)
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <HAL_MspInit+0x44>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6193      	str	r3, [r2, #24]
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <HAL_MspInit+0x44>)
 8001194:	699b      	ldr	r3, [r3, #24]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_MspInit+0x44>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a08      	ldr	r2, [pc, #32]	; (80011c4 <HAL_MspInit+0x44>)
 80011a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a8:	61d3      	str	r3, [r2, #28]
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_MspInit+0x44>)
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	40021000 	.word	0x40021000

080011c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08a      	sub	sp, #40	; 0x28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <HAL_SPI_MspInit+0x7c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d128      	bne.n	800123c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <HAL_SPI_MspInit+0x80>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a16      	ldr	r2, [pc, #88]	; (8001248 <HAL_SPI_MspInit+0x80>)
 80011f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011f4:	6193      	str	r3, [r2, #24]
 80011f6:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_SPI_MspInit+0x80>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_SPI_MspInit+0x80>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	4a10      	ldr	r2, [pc, #64]	; (8001248 <HAL_SPI_MspInit+0x80>)
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	6153      	str	r3, [r2, #20]
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <HAL_SPI_MspInit+0x80>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800121a:	23f0      	movs	r3, #240	; 0xf0
 800121c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800122a:	2305      	movs	r3, #5
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001238:	f000 faa6 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	; 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40013000 	.word	0x40013000
 8001248:	40021000 	.word	0x40021000

0800124c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a18      	ldr	r2, [pc, #96]	; (80012cc <HAL_UART_MspInit+0x80>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d129      	bne.n	80012c2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_UART_MspInit+0x84>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <HAL_UART_MspInit+0x84>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_UART_MspInit+0x84>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_UART_MspInit+0x84>)
 8001288:	695b      	ldr	r3, [r3, #20]
 800128a:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <HAL_UART_MspInit+0x84>)
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	6153      	str	r3, [r2, #20]
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_UART_MspInit+0x84>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800129e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012a4:	2312      	movs	r3, #18
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012ac:	2303      	movs	r3, #3
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012b0:	2307      	movs	r3, #7
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f000 fa63 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3728      	adds	r7, #40	; 0x28
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40013800 	.word	0x40013800
 80012d0:	40021000 	.word	0x40021000

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001320:	f000 f8ce 	bl	80014c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  uint8_t ADC[3];
  HAL_SPI_Receive(&hspi1, ADC, 3, 100);
 800132e:	1d39      	adds	r1, r7, #4
 8001330:	2364      	movs	r3, #100	; 0x64
 8001332:	2203      	movs	r2, #3
 8001334:	481c      	ldr	r0, [pc, #112]	; (80013a8 <EXTI3_IRQHandler+0x80>)
 8001336:	f001 ff5e 	bl	80031f6 <HAL_SPI_Receive>
  if(amountOfPoints < 256)
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <EXTI3_IRQHandler+0x84>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2bff      	cmp	r3, #255	; 0xff
 8001340:	dc2a      	bgt.n	8001398 <EXTI3_IRQHandler+0x70>
  {
	  ADC_Data[amountOfPoints] = (ADC[0] | (ADC[1]<<8) | (ADC[2]<<16))*2.5/0xFFFFFF;
 8001342:	793b      	ldrb	r3, [r7, #4]
 8001344:	461a      	mov	r2, r3
 8001346:	797b      	ldrb	r3, [r7, #5]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	431a      	orrs	r2, r3
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	041b      	lsls	r3, r3, #16
 8001350:	4313      	orrs	r3, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f88a 	bl	800046c <__aeabi_i2d>
 8001358:	f04f 0200 	mov.w	r2, #0
 800135c:	4b14      	ldr	r3, [pc, #80]	; (80013b0 <EXTI3_IRQHandler+0x88>)
 800135e:	f7ff f8ef 	bl	8000540 <__aeabi_dmul>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <EXTI3_IRQHandler+0x8c>)
 8001370:	f7ff fa10 	bl	8000794 <__aeabi_ddiv>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <EXTI3_IRQHandler+0x84>)
 800137a:	680c      	ldr	r4, [r1, #0]
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f7ff fba0 	bl	8000ac4 <__aeabi_d2f>
 8001384:	4602      	mov	r2, r0
 8001386:	490c      	ldr	r1, [pc, #48]	; (80013b8 <EXTI3_IRQHandler+0x90>)
 8001388:	00a3      	lsls	r3, r4, #2
 800138a:	440b      	add	r3, r1
 800138c:	601a      	str	r2, [r3, #0]
	  amountOfPoints++;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <EXTI3_IRQHandler+0x84>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	3301      	adds	r3, #1
 8001394:	4a05      	ldr	r2, [pc, #20]	; (80013ac <EXTI3_IRQHandler+0x84>)
 8001396:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_Pin);
 8001398:	2008      	movs	r0, #8
 800139a:	f000 fb6f 	bl	8001a7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200004b0 	.word	0x200004b0
 80013ac:	20000028 	.word	0x20000028
 80013b0:	40040000 	.word	0x40040000
 80013b4:	416fffff 	.word	0x416fffff
 80013b8:	20000514 	.word	0x20000514

080013bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001418 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e4:	480d      	ldr	r0, [pc, #52]	; (800141c <LoopForever+0x6>)
  ldr r1, =_edata
 80013e6:	490e      	ldr	r1, [pc, #56]	; (8001420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e8:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <LoopForever+0xe>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013ec:	e002      	b.n	80013f4 <LoopCopyDataInit>

080013ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f2:	3304      	adds	r3, #4

080013f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f8:	d3f9      	bcc.n	80013ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fa:	4a0b      	ldr	r2, [pc, #44]	; (8001428 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013fc:	4c0b      	ldr	r4, [pc, #44]	; (800142c <LoopForever+0x16>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001400:	e001      	b.n	8001406 <LoopFillZerobss>

08001402 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001402:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001404:	3204      	adds	r2, #4

08001406 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001406:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001408:	d3fb      	bcc.n	8001402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800140a:	f7ff ffd7 	bl	80013bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800140e:	f004 f891 	bl	8005534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001412:	f7ff fd71 	bl	8000ef8 <main>

08001416 <LoopForever>:

LoopForever:
    b LoopForever
 8001416:	e7fe      	b.n	8001416 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001418:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001424:	080057c0 	.word	0x080057c0
  ldr r2, =_sbss
 8001428:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800142c:	20000918 	.word	0x20000918

08001430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC1_2_IRQHandler>
	...

08001434 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001438:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_Init+0x28>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a07      	ldr	r2, [pc, #28]	; (800145c <HAL_Init+0x28>)
 800143e:	f043 0310 	orr.w	r3, r3, #16
 8001442:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001444:	2003      	movs	r0, #3
 8001446:	f000 f94f 	bl	80016e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800144a:	200f      	movs	r0, #15
 800144c:	f000 f808 	bl	8001460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001450:	f7ff fe96 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40022000 	.word	0x40022000

08001460 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001468:	4b12      	ldr	r3, [pc, #72]	; (80014b4 <HAL_InitTick+0x54>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <HAL_InitTick+0x58>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4619      	mov	r1, r3
 8001472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001476:	fbb3 f3f1 	udiv	r3, r3, r1
 800147a:	fbb2 f3f3 	udiv	r3, r2, r3
 800147e:	4618      	mov	r0, r3
 8001480:	f000 f975 	bl	800176e <HAL_SYSTICK_Config>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e00e      	b.n	80014ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2b0f      	cmp	r3, #15
 8001492:	d80a      	bhi.n	80014aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001494:	2200      	movs	r2, #0
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f000 f92f 	bl	80016fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a0:	4a06      	ldr	r2, [pc, #24]	; (80014bc <HAL_InitTick+0x5c>)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
 80014a8:	e000      	b.n	80014ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20000000 	.word	0x20000000
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000004 	.word	0x20000004

080014c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_IncTick+0x20>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_IncTick+0x24>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
 80014d0:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <HAL_IncTick+0x24>)
 80014d2:	6013      	str	r3, [r2, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008
 80014e4:	20000914 	.word	0x20000914

080014e8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return uwTick;  
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_GetTick+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000914 	.word	0x20000914

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	; (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db12      	blt.n	80015d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	490a      	ldr	r1, [pc, #40]	; (80015e4 <__NVIC_DisableIRQ+0x44>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	3320      	adds	r3, #32
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80015cc:	f3bf 8f4f 	dsb	sy
}
 80015d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d2:	f3bf 8f6f 	isb	sy
}
 80015d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	; (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	; (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b4:	d301      	bcc.n	80016ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b6:	2301      	movs	r3, #1
 80016b8:	e00f      	b.n	80016da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <SysTick_Config+0x40>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c2:	210f      	movs	r1, #15
 80016c4:	f04f 30ff 	mov.w	r0, #4294967295
 80016c8:	f7ff ff8e 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <SysTick_Config+0x40>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d2:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <SysTick_Config+0x40>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	e000e010 	.word	0xe000e010

080016e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ff05 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	4603      	mov	r3, r0
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff1a 	bl	8001548 <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff8e 	bl	800163c <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5d 	bl	80015e8 <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff0d 	bl	8001564 <__NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff1d 	bl	80015a0 <__NVIC_DisableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ff94 	bl	80016a4 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b087      	sub	sp, #28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001796:	e154      	b.n	8001a42 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2101      	movs	r1, #1
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa01 f303 	lsl.w	r3, r1, r3
 80017a4:	4013      	ands	r3, r2
 80017a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8146 	beq.w	8001a3c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d005      	beq.n	80017c8 <HAL_GPIO_Init+0x40>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d130      	bne.n	800182a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	68da      	ldr	r2, [r3, #12]
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017fe:	2201      	movs	r2, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	4013      	ands	r3, r2
 800180c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	091b      	lsrs	r3, r3, #4
 8001814:	f003 0201 	and.w	r2, r3, #1
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	2b03      	cmp	r3, #3
 8001834:	d017      	beq.n	8001866 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	2203      	movs	r2, #3
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	43db      	mvns	r3, r3
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0303 	and.w	r3, r3, #3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d123      	bne.n	80018ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	08da      	lsrs	r2, r3, #3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	3208      	adds	r2, #8
 800187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691a      	ldr	r2, [r3, #16]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	08da      	lsrs	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3208      	adds	r2, #8
 80018b4:	6939      	ldr	r1, [r7, #16]
 80018b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	2203      	movs	r2, #3
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0203 	and.w	r2, r3, #3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 80a0 	beq.w	8001a3c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fc:	4b58      	ldr	r3, [pc, #352]	; (8001a60 <HAL_GPIO_Init+0x2d8>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <HAL_GPIO_Init+0x2d8>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	6193      	str	r3, [r2, #24]
 8001908:	4b55      	ldr	r3, [pc, #340]	; (8001a60 <HAL_GPIO_Init+0x2d8>)
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60bb      	str	r3, [r7, #8]
 8001912:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001914:	4a53      	ldr	r2, [pc, #332]	; (8001a64 <HAL_GPIO_Init+0x2dc>)
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	089b      	lsrs	r3, r3, #2
 800191a:	3302      	adds	r3, #2
 800191c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800193e:	d019      	beq.n	8001974 <HAL_GPIO_Init+0x1ec>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a49      	ldr	r2, [pc, #292]	; (8001a68 <HAL_GPIO_Init+0x2e0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d013      	beq.n	8001970 <HAL_GPIO_Init+0x1e8>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a48      	ldr	r2, [pc, #288]	; (8001a6c <HAL_GPIO_Init+0x2e4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00d      	beq.n	800196c <HAL_GPIO_Init+0x1e4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a47      	ldr	r2, [pc, #284]	; (8001a70 <HAL_GPIO_Init+0x2e8>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d007      	beq.n	8001968 <HAL_GPIO_Init+0x1e0>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a46      	ldr	r2, [pc, #280]	; (8001a74 <HAL_GPIO_Init+0x2ec>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d101      	bne.n	8001964 <HAL_GPIO_Init+0x1dc>
 8001960:	2304      	movs	r3, #4
 8001962:	e008      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001964:	2305      	movs	r3, #5
 8001966:	e006      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001968:	2303      	movs	r3, #3
 800196a:	e004      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 800196c:	2302      	movs	r3, #2
 800196e:	e002      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <HAL_GPIO_Init+0x1ee>
 8001974:	2300      	movs	r3, #0
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	f002 0203 	and.w	r2, r2, #3
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	4093      	lsls	r3, r2
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001986:	4937      	ldr	r1, [pc, #220]	; (8001a64 <HAL_GPIO_Init+0x2dc>)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	089b      	lsrs	r3, r3, #2
 800198c:	3302      	adds	r3, #2
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001994:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019b8:	4a2f      	ldr	r2, [pc, #188]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019e2:	4a25      	ldr	r2, [pc, #148]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019e8:	4b23      	ldr	r3, [pc, #140]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a0c:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	f47f aea3 	bne.w	8001798 <HAL_GPIO_Init+0x10>
  }
}
 8001a52:	bf00      	nop
 8001a54:	bf00      	nop
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010000 	.word	0x40010000
 8001a68:	48000400 	.word	0x48000400
 8001a6c:	48000800 	.word	0x48000800
 8001a70:	48000c00 	.word	0x48000c00
 8001a74:	48001000 	.word	0x48001000
 8001a78:	40010400 	.word	0x40010400

08001a7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d006      	beq.n	8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a94:	88fb      	ldrh	r3, [r7, #6]
 8001a96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f806 	bl	8001aac <HAL_GPIO_EXTI_Callback>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40010400 	.word	0x40010400

08001aac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d102      	bne.n	8001ade <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	f000 bef4 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 816a 	beq.w	8001dc2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aee:	4bb3      	ldr	r3, [pc, #716]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d00c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001afa:	4bb0      	ldr	r3, [pc, #704]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d159      	bne.n	8001bba <HAL_RCC_OscConfig+0xf6>
 8001b06:	4bad      	ldr	r3, [pc, #692]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b12:	d152      	bne.n	8001bba <HAL_RCC_OscConfig+0xf6>
 8001b14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b18:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b28:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	095b      	lsrs	r3, r3, #5
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f043 0301 	orr.w	r3, r3, #1
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_OscConfig+0x82>
 8001b40:	4b9e      	ldr	r3, [pc, #632]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	e015      	b.n	8001b72 <HAL_RCC_OscConfig+0xae>
 8001b46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b4a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b62:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b66:	fa93 f3a3 	rbit	r3, r3
 8001b6a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b6e:	4b93      	ldr	r3, [pc, #588]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b76:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b7a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b7e:	fa92 f2a2 	rbit	r2, r2
 8001b82:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b86:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b8a:	fab2 f282 	clz	r2, r2
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	f042 0220 	orr.w	r2, r2, #32
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f002 021f 	and.w	r2, r2, #31
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 810c 	beq.w	8001dc0 <HAL_RCC_OscConfig+0x2fc>
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f040 8106 	bne.w	8001dc0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f000 be86 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc4:	d106      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x110>
 8001bc6:	4b7d      	ldr	r3, [pc, #500]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7c      	ldr	r2, [pc, #496]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e030      	b.n	8001c36 <HAL_RCC_OscConfig+0x172>
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x134>
 8001bde:	4b77      	ldr	r3, [pc, #476]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a76      	ldr	r2, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001be4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b74      	ldr	r3, [pc, #464]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a73      	ldr	r2, [pc, #460]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e01e      	b.n	8001c36 <HAL_RCC_OscConfig+0x172>
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCC_OscConfig+0x15a>
 8001c04:	4b6d      	ldr	r3, [pc, #436]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a6c      	ldr	r2, [pc, #432]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a69      	ldr	r2, [pc, #420]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	e00b      	b.n	8001c36 <HAL_RCC_OscConfig+0x172>
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a66      	ldr	r2, [pc, #408]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a63      	ldr	r2, [pc, #396]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c34:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c36:	4b61      	ldr	r3, [pc, #388]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	f023 020f 	bic.w	r2, r3, #15
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	495d      	ldr	r1, [pc, #372]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d059      	beq.n	8001d08 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fc48 	bl	80014e8 <HAL_GetTick>
 8001c58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fc43 	bl	80014e8 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d902      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	f000 be29 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
 8001c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c78:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8c:	fab3 f383 	clz	r3, r3
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x1e2>
 8001ca0:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x20e>
 8001ca6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001caa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001cb2:	fa93 f3a3 	rbit	r3, r3
 8001cb6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cc2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001cce:	4b3b      	ldr	r3, [pc, #236]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cd6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001cda:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cde:	fa92 f2a2 	rbit	r2, r2
 8001ce2:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001ce6:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f042 0220 	orr.w	r2, r2, #32
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0ab      	beq.n	8001c5e <HAL_RCC_OscConfig+0x19a>
 8001d06:	e05c      	b.n	8001dc2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d08:	f7ff fbee 	bl	80014e8 <HAL_GetTick>
 8001d0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d12:	f7ff fbe9 	bl	80014e8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d902      	bls.n	8001d28 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	f000 bdcf 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
 8001d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d34:	fa93 f3a3 	rbit	r3, r3
 8001d38:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d3c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	095b      	lsrs	r3, r3, #5
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_OscConfig+0x296>
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x2c2>
 8001d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d5e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d72:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d76:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_RCC_OscConfig+0x2f8>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d8a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d8e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d92:	fa92 f2a2 	rbit	r2, r2
 8001d96:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d9a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d9e:	fab2 f282 	clz	r2, r2
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	f042 0220 	orr.w	r2, r2, #32
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	f002 021f 	and.w	r2, r2, #31
 8001dae:	2101      	movs	r1, #1
 8001db0:	fa01 f202 	lsl.w	r2, r1, r2
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ab      	bne.n	8001d12 <HAL_RCC_OscConfig+0x24e>
 8001dba:	e002      	b.n	8001dc2 <HAL_RCC_OscConfig+0x2fe>
 8001dbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 816f 	beq.w	80020b0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dd2:	4bd0      	ldr	r3, [pc, #832]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 030c 	and.w	r3, r3, #12
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00b      	beq.n	8001df6 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001dde:	4bcd      	ldr	r3, [pc, #820]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d16c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x400>
 8001dea:	4bca      	ldr	r3, [pc, #808]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d166      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x400>
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e08:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0c:	fab3 f383 	clz	r3, r3
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d102      	bne.n	8001e26 <HAL_RCC_OscConfig+0x362>
 8001e20:	4bbc      	ldr	r3, [pc, #752]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	e013      	b.n	8001e4e <HAL_RCC_OscConfig+0x38a>
 8001e26:	2302      	movs	r3, #2
 8001e28:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e30:	fa93 f3a3 	rbit	r3, r3
 8001e34:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e42:	fa93 f3a3 	rbit	r3, r3
 8001e46:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e4a:	4bb2      	ldr	r3, [pc, #712]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	2202      	movs	r2, #2
 8001e50:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e54:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e58:	fa92 f2a2 	rbit	r2, r2
 8001e5c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e60:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e64:	fab2 f282 	clz	r2, r2
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	f042 0220 	orr.w	r2, r2, #32
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	f002 021f 	and.w	r2, r2, #31
 8001e74:	2101      	movs	r1, #1
 8001e76:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <HAL_RCC_OscConfig+0x3cc>
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d002      	beq.n	8001e90 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	f000 bd1b 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4ba0      	ldr	r3, [pc, #640]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	21f8      	movs	r1, #248	; 0xf8
 8001ea0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001ea8:	fa91 f1a1 	rbit	r1, r1
 8001eac:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001eb0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001eb4:	fab1 f181 	clz	r1, r1
 8001eb8:	b2c9      	uxtb	r1, r1
 8001eba:	408b      	lsls	r3, r1
 8001ebc:	4995      	ldr	r1, [pc, #596]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	e0f5      	b.n	80020b0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8085 	beq.w	8001fda <HAL_RCC_OscConfig+0x516>
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ee2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ef0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	2301      	movs	r3, #1
 8001efa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff faf4 	bl	80014e8 <HAL_GetTick>
 8001f00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	e00a      	b.n	8001f1c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff faef 	bl	80014e8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d902      	bls.n	8001f1c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	f000 bcd5 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d102      	bne.n	8001f4c <HAL_RCC_OscConfig+0x488>
 8001f46:	4b73      	ldr	r3, [pc, #460]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	e013      	b.n	8001f74 <HAL_RCC_OscConfig+0x4b0>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f56:	fa93 f3a3 	rbit	r3, r3
 8001f5a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f64:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f70:	4b68      	ldr	r3, [pc, #416]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	2202      	movs	r2, #2
 8001f76:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f7a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f86:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f8a:	fab2 f282 	clz	r2, r2
 8001f8e:	b2d2      	uxtb	r2, r2
 8001f90:	f042 0220 	orr.w	r2, r2, #32
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f002 021f 	and.w	r2, r2, #31
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0af      	beq.n	8001f06 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	21f8      	movs	r1, #248	; 0xf8
 8001fb6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fbe:	fa91 f1a1 	rbit	r1, r1
 8001fc2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001fc6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001fca:	fab1 f181 	clz	r1, r1
 8001fce:	b2c9      	uxtb	r1, r1
 8001fd0:	408b      	lsls	r3, r1
 8001fd2:	4950      	ldr	r1, [pc, #320]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e06a      	b.n	80020b0 <HAL_RCC_OscConfig+0x5ec>
 8001fda:	2301      	movs	r3, #1
 8001fdc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001fec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ffa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	461a      	mov	r2, r3
 8002002:	2300      	movs	r3, #0
 8002004:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff fa6f 	bl	80014e8 <HAL_GetTick>
 800200a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200e:	e00a      	b.n	8002026 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002010:	f7ff fa6a 	bl	80014e8 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d902      	bls.n	8002026 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	f000 bc50 	b.w	80028c6 <HAL_RCC_OscConfig+0xe02>
 8002026:	2302      	movs	r3, #2
 8002028:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002030:	fa93 f3a3 	rbit	r3, r3
 8002034:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	095b      	lsrs	r3, r3, #5
 8002044:	b2db      	uxtb	r3, r3
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b01      	cmp	r3, #1
 800204e:	d102      	bne.n	8002056 <HAL_RCC_OscConfig+0x592>
 8002050:	4b30      	ldr	r3, [pc, #192]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	e013      	b.n	800207e <HAL_RCC_OscConfig+0x5ba>
 8002056:	2302      	movs	r3, #2
 8002058:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002060:	fa93 f3a3 	rbit	r3, r3
 8002064:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002068:	2302      	movs	r3, #2
 800206a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800206e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002072:	fa93 f3a3 	rbit	r3, r3
 8002076:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <HAL_RCC_OscConfig+0x650>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	2202      	movs	r2, #2
 8002080:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002084:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002088:	fa92 f2a2 	rbit	r2, r2
 800208c:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002090:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	f042 0220 	orr.w	r2, r2, #32
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	f002 021f 	and.w	r2, r2, #31
 80020a4:	2101      	movs	r1, #1
 80020a6:	fa01 f202 	lsl.w	r2, r1, r2
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1af      	bne.n	8002010 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b0:	1d3b      	adds	r3, r7, #4
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80da 	beq.w	8002274 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d069      	beq.n	800219e <HAL_RCC_OscConfig+0x6da>
 80020ca:	2301      	movs	r3, #1
 80020cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020d4:	fa93 f3a3 	rbit	r3, r3
 80020d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80020dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020e0:	fab3 f383 	clz	r3, r3
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	461a      	mov	r2, r3
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <HAL_RCC_OscConfig+0x654>)
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	461a      	mov	r2, r3
 80020f0:	2301      	movs	r3, #1
 80020f2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f4:	f7ff f9f8 	bl	80014e8 <HAL_GetTick>
 80020f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fc:	e00e      	b.n	800211c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fe:	f7ff f9f3 	bl	80014e8 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d906      	bls.n	800211c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e3d9      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	10908120 	.word	0x10908120
 800211c:	2302      	movs	r3, #2
 800211e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800212e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	fa93 f2a3 	rbit	r2, r3
 8002140:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800214a:	2202      	movs	r2, #2
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	fa93 f2a3 	rbit	r2, r3
 8002158:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800215c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	4ba5      	ldr	r3, [pc, #660]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002160:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002162:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002166:	2102      	movs	r1, #2
 8002168:	6019      	str	r1, [r3, #0]
 800216a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	fa93 f1a3 	rbit	r1, r3
 8002174:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002178:	6019      	str	r1, [r3, #0]
  return result;
 800217a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f003 031f 	and.w	r3, r3, #31
 8002190:	2101      	movs	r1, #1
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	4013      	ands	r3, r2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0b0      	beq.n	80020fe <HAL_RCC_OscConfig+0x63a>
 800219c:	e06a      	b.n	8002274 <HAL_RCC_OscConfig+0x7b0>
 800219e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021a2:	2201      	movs	r2, #1
 80021a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	fa93 f2a3 	rbit	r2, r3
 80021b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021b4:	601a      	str	r2, [r3, #0]
  return result;
 80021b6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021ba:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	461a      	mov	r2, r3
 80021c4:	4b8c      	ldr	r3, [pc, #560]	; (80023f8 <HAL_RCC_OscConfig+0x934>)
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	461a      	mov	r2, r3
 80021cc:	2300      	movs	r3, #0
 80021ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d0:	f7ff f98a 	bl	80014e8 <HAL_GetTick>
 80021d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d8:	e009      	b.n	80021ee <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021da:	f7ff f985 	bl	80014e8 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e36b      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 80021ee:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021f2:	2202      	movs	r2, #2
 80021f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fa93 f2a3 	rbit	r2, r3
 8002200:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002204:	601a      	str	r2, [r3, #0]
 8002206:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800220a:	2202      	movs	r2, #2
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	fa93 f2a3 	rbit	r2, r3
 8002218:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002222:	2202      	movs	r2, #2
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002234:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002236:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002238:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800223a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800223e:	2102      	movs	r1, #2
 8002240:	6019      	str	r1, [r3, #0]
 8002242:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	fa93 f1a3 	rbit	r1, r3
 800224c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002250:	6019      	str	r1, [r3, #0]
  return result;
 8002252:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	fab3 f383 	clz	r3, r3
 800225c:	b2db      	uxtb	r3, r3
 800225e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1b2      	bne.n	80021da <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	2b00      	cmp	r3, #0
 8002280:	f000 8158 	beq.w	8002534 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002284:	2300      	movs	r3, #0
 8002286:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800228a:	4b5a      	ldr	r3, [pc, #360]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d112      	bne.n	80022bc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b57      	ldr	r3, [pc, #348]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a56      	ldr	r2, [pc, #344]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	61d3      	str	r3, [r2, #28]
 80022a2:	4b54      	ldr	r3, [pc, #336]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	f107 0308 	add.w	r3, r7, #8
 80022b4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80022b6:	2301      	movs	r3, #1
 80022b8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	4b4f      	ldr	r3, [pc, #316]	; (80023fc <HAL_RCC_OscConfig+0x938>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d11a      	bne.n	80022fe <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022c8:	4b4c      	ldr	r3, [pc, #304]	; (80023fc <HAL_RCC_OscConfig+0x938>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a4b      	ldr	r2, [pc, #300]	; (80023fc <HAL_RCC_OscConfig+0x938>)
 80022ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022d4:	f7ff f908 	bl	80014e8 <HAL_GetTick>
 80022d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7ff f903 	bl	80014e8 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b64      	cmp	r3, #100	; 0x64
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e2e9      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f2:	4b42      	ldr	r3, [pc, #264]	; (80023fc <HAL_RCC_OscConfig+0x938>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0ef      	beq.n	80022de <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022fe:	1d3b      	adds	r3, r7, #4
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x852>
 8002308:	4b3a      	ldr	r3, [pc, #232]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a39      	ldr	r2, [pc, #228]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	e02f      	b.n	8002376 <HAL_RCC_OscConfig+0x8b2>
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x876>
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a33      	ldr	r2, [pc, #204]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6213      	str	r3, [r2, #32]
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a30      	ldr	r2, [pc, #192]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002332:	f023 0304 	bic.w	r3, r3, #4
 8002336:	6213      	str	r3, [r2, #32]
 8002338:	e01d      	b.n	8002376 <HAL_RCC_OscConfig+0x8b2>
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b05      	cmp	r3, #5
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0x89a>
 8002344:	4b2b      	ldr	r3, [pc, #172]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a2a      	ldr	r2, [pc, #168]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800234a:	f043 0304 	orr.w	r3, r3, #4
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	4b28      	ldr	r3, [pc, #160]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002356:	f043 0301 	orr.w	r3, r3, #1
 800235a:	6213      	str	r3, [r2, #32]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0x8b2>
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a24      	ldr	r2, [pc, #144]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d06b      	beq.n	8002458 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7ff f8b2 	bl	80014e8 <HAL_GetTick>
 8002384:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002388:	e00b      	b.n	80023a2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238a:	f7ff f8ad 	bl	80014e8 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e291      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 80023a2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023a6:	2202      	movs	r2, #2
 80023a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023aa:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023be:	2202      	movs	r2, #2
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023d0:	601a      	str	r2, [r3, #0]
  return result;
 80023d2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	095b      	lsrs	r3, r3, #5
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f043 0302 	orr.w	r3, r3, #2
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d109      	bne.n	8002400 <HAL_RCC_OscConfig+0x93c>
 80023ec:	4b01      	ldr	r3, [pc, #4]	; (80023f4 <HAL_RCC_OscConfig+0x930>)
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	e014      	b.n	800241c <HAL_RCC_OscConfig+0x958>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	10908120 	.word	0x10908120
 80023fc:	40007000 	.word	0x40007000
 8002400:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002404:	2202      	movs	r2, #2
 8002406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	4bbb      	ldr	r3, [pc, #748]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002420:	2102      	movs	r1, #2
 8002422:	6011      	str	r1, [r2, #0]
 8002424:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	fa92 f1a2 	rbit	r1, r2
 800242e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002432:	6011      	str	r1, [r2, #0]
  return result;
 8002434:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	fab2 f282 	clz	r2, r2
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f002 021f 	and.w	r2, r2, #31
 800244a:	2101      	movs	r1, #1
 800244c:	fa01 f202 	lsl.w	r2, r1, r2
 8002450:	4013      	ands	r3, r2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d099      	beq.n	800238a <HAL_RCC_OscConfig+0x8c6>
 8002456:	e063      	b.n	8002520 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7ff f846 	bl	80014e8 <HAL_GetTick>
 800245c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002460:	e00b      	b.n	800247a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7ff f841 	bl	80014e8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e225      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 800247a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800247e:	2202      	movs	r2, #2
 8002480:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002496:	2202      	movs	r2, #2
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	fa93 f2a3 	rbit	r2, r3
 80024a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024a8:	601a      	str	r2, [r3, #0]
  return result;
 80024aa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	f043 0302 	orr.w	r3, r3, #2
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d102      	bne.n	80024ca <HAL_RCC_OscConfig+0xa06>
 80024c4:	4b90      	ldr	r3, [pc, #576]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	e00d      	b.n	80024e6 <HAL_RCC_OscConfig+0xa22>
 80024ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024ce:	2202      	movs	r2, #2
 80024d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	4b89      	ldr	r3, [pc, #548]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024ea:	2102      	movs	r1, #2
 80024ec:	6011      	str	r1, [r2, #0]
 80024ee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	fa92 f1a2 	rbit	r1, r2
 80024f8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80024fc:	6011      	str	r1, [r2, #0]
  return result;
 80024fe:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	fab2 f282 	clz	r2, r2
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f002 021f 	and.w	r2, r2, #31
 8002514:	2101      	movs	r1, #1
 8002516:	fa01 f202 	lsl.w	r2, r1, r2
 800251a:	4013      	ands	r3, r2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1a0      	bne.n	8002462 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002520:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002524:	2b01      	cmp	r3, #1
 8002526:	d105      	bne.n	8002534 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002528:	4b77      	ldr	r3, [pc, #476]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	4a76      	ldr	r2, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 800252e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002532:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 81c2 	beq.w	80028c4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002540:	4b71      	ldr	r3, [pc, #452]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b08      	cmp	r3, #8
 800254a:	f000 819c 	beq.w	8002886 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b02      	cmp	r3, #2
 8002556:	f040 8114 	bne.w	8002782 <HAL_RCC_OscConfig+0xcbe>
 800255a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800255e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002562:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	fa93 f2a3 	rbit	r2, r3
 800256e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002572:	601a      	str	r2, [r3, #0]
  return result;
 8002574:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002578:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002584:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	461a      	mov	r2, r3
 800258c:	2300      	movs	r3, #0
 800258e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002590:	f7fe ffaa 	bl	80014e8 <HAL_GetTick>
 8002594:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002598:	e009      	b.n	80025ae <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800259a:	f7fe ffa5 	bl	80014e8 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e18b      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 80025ae:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	fa93 f2a3 	rbit	r2, r3
 80025c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025c6:	601a      	str	r2, [r3, #0]
  return result;
 80025c8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ce:	fab3 f383 	clz	r3, r3
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	095b      	lsrs	r3, r3, #5
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d102      	bne.n	80025e8 <HAL_RCC_OscConfig+0xb24>
 80025e2:	4b49      	ldr	r3, [pc, #292]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	e01b      	b.n	8002620 <HAL_RCC_OscConfig+0xb5c>
 80025e8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002606:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	fa93 f2a3 	rbit	r2, r3
 8002616:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002624:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002628:	6011      	str	r1, [r2, #0]
 800262a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	fa92 f1a2 	rbit	r1, r2
 8002634:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002638:	6011      	str	r1, [r2, #0]
  return result;
 800263a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	fab2 f282 	clz	r2, r2
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	f042 0220 	orr.w	r2, r2, #32
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	f002 021f 	and.w	r2, r2, #31
 8002650:	2101      	movs	r1, #1
 8002652:	fa01 f202 	lsl.w	r2, r1, r2
 8002656:	4013      	ands	r3, r2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d19e      	bne.n	800259a <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800265c:	4b2a      	ldr	r3, [pc, #168]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002664:	1d3b      	adds	r3, r7, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800266a:	1d3b      	adds	r3, r7, #4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	430b      	orrs	r3, r1
 8002672:	4925      	ldr	r1, [pc, #148]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 8002674:	4313      	orrs	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
 8002678:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800267c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002682:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	fa93 f2a3 	rbit	r2, r3
 800268c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002690:	601a      	str	r2, [r3, #0]
  return result;
 8002692:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002696:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	461a      	mov	r2, r3
 80026aa:	2301      	movs	r3, #1
 80026ac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ae:	f7fe ff1b 	bl	80014e8 <HAL_GetTick>
 80026b2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b6:	e009      	b.n	80026cc <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe ff16 	bl	80014e8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0fc      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 80026cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	fa93 f2a3 	rbit	r2, r3
 80026e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026e4:	601a      	str	r2, [r3, #0]
  return result;
 80026e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026ea:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026ec:	fab3 f383 	clz	r3, r3
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d105      	bne.n	800270c <HAL_RCC_OscConfig+0xc48>
 8002700:	4b01      	ldr	r3, [pc, #4]	; (8002708 <HAL_RCC_OscConfig+0xc44>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	e01e      	b.n	8002744 <HAL_RCC_OscConfig+0xc80>
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000
 800270c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	fa93 f2a3 	rbit	r2, r3
 8002720:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800272a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	fa93 f2a3 	rbit	r2, r3
 800273a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	4b63      	ldr	r3, [pc, #396]	; (80028d0 <HAL_RCC_OscConfig+0xe0c>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002748:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800274c:	6011      	str	r1, [r2, #0]
 800274e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002752:	6812      	ldr	r2, [r2, #0]
 8002754:	fa92 f1a2 	rbit	r1, r2
 8002758:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800275c:	6011      	str	r1, [r2, #0]
  return result;
 800275e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	f042 0220 	orr.w	r2, r2, #32
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f002 021f 	and.w	r2, r2, #31
 8002774:	2101      	movs	r1, #1
 8002776:	fa01 f202 	lsl.w	r2, r1, r2
 800277a:	4013      	ands	r3, r2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d09b      	beq.n	80026b8 <HAL_RCC_OscConfig+0xbf4>
 8002780:	e0a0      	b.n	80028c4 <HAL_RCC_OscConfig+0xe00>
 8002782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002786:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800278a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fa93 f2a3 	rbit	r2, r3
 8002796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800279a:	601a      	str	r2, [r3, #0]
  return result;
 800279c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a2:	fab3 f383 	clz	r3, r3
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	461a      	mov	r2, r3
 80027b4:	2300      	movs	r3, #0
 80027b6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fe96 	bl	80014e8 <HAL_GetTick>
 80027bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c0:	e009      	b.n	80027d6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c2:	f7fe fe91 	bl	80014e8 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e077      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
 80027d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ee:	601a      	str	r2, [r3, #0]
  return result;
 80027f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	095b      	lsrs	r3, r3, #5
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_RCC_OscConfig+0xd4c>
 800280a:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <HAL_RCC_OscConfig+0xe0c>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	e01b      	b.n	8002848 <HAL_RCC_OscConfig+0xd84>
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281a:	f107 0320 	add.w	r3, r7, #32
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	fa93 f2a3 	rbit	r2, r3
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	f107 0318 	add.w	r3, r7, #24
 800282e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	f107 0318 	add.w	r3, r7, #24
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	fa93 f2a3 	rbit	r2, r3
 800283e:	f107 0314 	add.w	r3, r7, #20
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <HAL_RCC_OscConfig+0xe0c>)
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	f107 0210 	add.w	r2, r7, #16
 800284c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002850:	6011      	str	r1, [r2, #0]
 8002852:	f107 0210 	add.w	r2, r7, #16
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	fa92 f1a2 	rbit	r1, r2
 800285c:	f107 020c 	add.w	r2, r7, #12
 8002860:	6011      	str	r1, [r2, #0]
  return result;
 8002862:	f107 020c 	add.w	r2, r7, #12
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	fab2 f282 	clz	r2, r2
 800286c:	b2d2      	uxtb	r2, r2
 800286e:	f042 0220 	orr.w	r2, r2, #32
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	f002 021f 	and.w	r2, r2, #31
 8002878:	2101      	movs	r1, #1
 800287a:	fa01 f202 	lsl.w	r2, r1, r2
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d19e      	bne.n	80027c2 <HAL_RCC_OscConfig+0xcfe>
 8002884:	e01e      	b.n	80028c4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e018      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002894:	4b0e      	ldr	r3, [pc, #56]	; (80028d0 <HAL_RCC_OscConfig+0xe0c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800289c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d108      	bne.n	80028c0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80028ae:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80028b2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e000      	b.n	80028c6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000

080028d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b09e      	sub	sp, #120	; 0x78
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e162      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ec:	4b90      	ldr	r3, [pc, #576]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d910      	bls.n	800291c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028fa:	4b8d      	ldr	r3, [pc, #564]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 0207 	bic.w	r2, r3, #7
 8002902:	498b      	ldr	r1, [pc, #556]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	4313      	orrs	r3, r2
 8002908:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b89      	ldr	r3, [pc, #548]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e14a      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002928:	4b82      	ldr	r3, [pc, #520]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	497f      	ldr	r1, [pc, #508]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002936:	4313      	orrs	r3, r2
 8002938:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80dc 	beq.w	8002b00 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d13c      	bne.n	80029ca <HAL_RCC_ClockConfig+0xf6>
 8002950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002954:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800295e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	095b      	lsrs	r3, r3, #5
 8002968:	b2db      	uxtb	r3, r3
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_RCC_ClockConfig+0xa6>
 8002974:	4b6f      	ldr	r3, [pc, #444]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	e00f      	b.n	800299a <HAL_RCC_ClockConfig+0xc6>
 800297a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	667b      	str	r3, [r7, #100]	; 0x64
 8002988:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800298c:	663b      	str	r3, [r7, #96]	; 0x60
 800298e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002990:	fa93 f3a3 	rbit	r3, r3
 8002994:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002996:	4b67      	ldr	r3, [pc, #412]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800299e:	65ba      	str	r2, [r7, #88]	; 0x58
 80029a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029a2:	fa92 f2a2 	rbit	r2, r2
 80029a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80029a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 021f 	and.w	r2, r2, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d17b      	bne.n	8002abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0f3      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d13c      	bne.n	8002a4c <HAL_RCC_ClockConfig+0x178>
 80029d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_RCC_ClockConfig+0x128>
 80029f6:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e00f      	b.n	8002a1c <HAL_RCC_ClockConfig+0x148>
 80029fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	647b      	str	r3, [r7, #68]	; 0x44
 8002a0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a18:	4b46      	ldr	r3, [pc, #280]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a20:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a24:	fa92 f2a2 	rbit	r2, r2
 8002a28:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2c:	fab2 f282 	clz	r2, r2
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	f042 0220 	orr.w	r2, r2, #32
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	f002 021f 	and.w	r2, r2, #31
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d13a      	bne.n	8002abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b2      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	fa93 f3a3 	rbit	r3, r3
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5a:	fab3 f383 	clz	r3, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCC_ClockConfig+0x1a0>
 8002a6e:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	e00d      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1bc>
 8002a74:	2302      	movs	r3, #2
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a80:	2302      	movs	r3, #2
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	fa93 f3a3 	rbit	r3, r3
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	2202      	movs	r2, #2
 8002a92:	61ba      	str	r2, [r7, #24]
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	fa92 f2a2 	rbit	r2, r2
 8002a9a:	617a      	str	r2, [r7, #20]
  return result;
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	fab2 f282 	clz	r2, r2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f042 0220 	orr.w	r2, r2, #32
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f002 021f 	and.w	r2, r2, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e079      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	491a      	ldr	r1, [pc, #104]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe fd0a 	bl	80014e8 <HAL_GetTick>
 8002ad4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7fe fd06 	bl	80014e8 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e061      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_RCC_ClockConfig+0x260>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d214      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	4906      	ldr	r1, [pc, #24]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <HAL_RCC_ClockConfig+0x25c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e040      	b.n	8002bb2 <HAL_RCC_ClockConfig+0x2de>
 8002b30:	40022000 	.word	0x40022000
 8002b34:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	491a      	ldr	r1, [pc, #104]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b62:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4912      	ldr	r1, [pc, #72]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b76:	f000 f829 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4601      	mov	r1, r0
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <HAL_RCC_ClockConfig+0x2e8>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b84:	22f0      	movs	r2, #240	; 0xf0
 8002b86:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	fa92 f2a2 	rbit	r2, r2
 8002b8e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	fab2 f282 	clz	r2, r2
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	40d3      	lsrs	r3, r2
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b9c:	5cd3      	ldrb	r3, [r2, r3]
 8002b9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002ba2:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <HAL_RCC_ClockConfig+0x2f0>)
 8002ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ba6:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_RCC_ClockConfig+0x2f4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fc58 	bl	8001460 <HAL_InitTick>
  
  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3778      	adds	r7, #120	; 0x78
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	080055a8 	.word	0x080055a8
 8002bc4:	20000000 	.word	0x20000000
 8002bc8:	20000004 	.word	0x20000004

08002bcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b08b      	sub	sp, #44	; 0x2c
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002be6:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d002      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x30>
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d003      	beq.n	8002c02 <HAL_RCC_GetSysClockFreq+0x36>
 8002bfa:	e03c      	b.n	8002c76 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bfe:	623b      	str	r3, [r7, #32]
      break;
 8002c00:	e03c      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002c08:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002c0c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	607a      	str	r2, [r7, #4]
  return result;
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	40d3      	lsrs	r3, r2
 8002c20:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c22:	5cd3      	ldrb	r3, [r2, r3]
 8002c24:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	220f      	movs	r2, #15
 8002c30:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	fa92 f2a2 	rbit	r2, r2
 8002c38:	60fa      	str	r2, [r7, #12]
  return result;
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	fab2 f282 	clz	r2, r2
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	40d3      	lsrs	r3, r2
 8002c44:	4a14      	ldr	r2, [pc, #80]	; (8002c98 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c54:	4a0e      	ldr	r2, [pc, #56]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	e004      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4a0c      	ldr	r2, [pc, #48]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c72:	623b      	str	r3, [r7, #32]
      break;
 8002c74:	e002      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c78:	623b      	str	r3, [r7, #32]
      break;
 8002c7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7c:	6a3b      	ldr	r3, [r7, #32]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	372c      	adds	r7, #44	; 0x2c
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	007a1200 	.word	0x007a1200
 8002c94:	080055c0 	.word	0x080055c0
 8002c98:	080055d0 	.word	0x080055d0
 8002c9c:	003d0900 	.word	0x003d0900

08002ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000000 	.word	0x20000000

08002cb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cbe:	f7ff ffef 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ccc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cd0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	fa92 f2a2 	rbit	r2, r2
 8002cd8:	603a      	str	r2, [r7, #0]
  return result;
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	fab2 f282 	clz	r2, r2
 8002ce0:	b2d2      	uxtb	r2, r2
 8002ce2:	40d3      	lsrs	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	080055b8 	.word	0x080055b8

08002cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d02:	f7ff ffcd 	bl	8002ca0 <HAL_RCC_GetHCLKFreq>
 8002d06:	4601      	mov	r1, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d14:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	fa92 f2a2 	rbit	r2, r2
 8002d1c:	603a      	str	r2, [r7, #0]
  return result;
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	fab2 f282 	clz	r2, r2
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	40d3      	lsrs	r3, r2
 8002d28:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
 8002d2c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	080055b8 	.word	0x080055b8

08002d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b092      	sub	sp, #72	; 0x48
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 80d4 	beq.w	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d64:	4b4e      	ldr	r3, [pc, #312]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10e      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4a4a      	ldr	r2, [pc, #296]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	61d3      	str	r3, [r2, #28]
 8002d7c:	4b48      	ldr	r3, [pc, #288]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7e:	69db      	ldr	r3, [r3, #28]
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8e:	4b45      	ldr	r3, [pc, #276]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d118      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9a:	4b42      	ldr	r3, [pc, #264]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a41      	ldr	r2, [pc, #260]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fb9f 	bl	80014e8 <HAL_GetTick>
 8002daa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dac:	e008      	b.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dae:	f7fe fb9b 	bl	80014e8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b64      	cmp	r3, #100	; 0x64
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e169      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	4b38      	ldr	r3, [pc, #224]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dcc:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8084 	beq.w	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d07c      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dec:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dfa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e06:	fab3 f383 	clz	r3, r3
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	4b26      	ldr	r3, [pc, #152]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e10:	4413      	add	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	461a      	mov	r2, r3
 8002e16:	2301      	movs	r3, #1
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2a:	fab3 f383 	clz	r3, r3
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	461a      	mov	r2, r3
 8002e32:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e3e:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e42:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d04b      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4e:	f7fe fb4b 	bl	80014e8 <HAL_GetTick>
 8002e52:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e54:	e00a      	b.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fe fb47 	bl	80014e8 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e113      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
 8002e78:	2302      	movs	r3, #2
 8002e7a:	623b      	str	r3, [r7, #32]
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	fa93 f3a3 	rbit	r3, r3
 8002e82:	61fb      	str	r3, [r7, #28]
  return result;
 8002e84:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	095b      	lsrs	r3, r3, #5
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d108      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e9a:	4b01      	ldr	r3, [pc, #4]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	e00d      	b.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	40007000 	.word	0x40007000
 8002ea8:	10908100 	.word	0x10908100
 8002eac:	2302      	movs	r3, #2
 8002eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	fa93 f3a3 	rbit	r3, r3
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	4b78      	ldr	r3, [pc, #480]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	613a      	str	r2, [r7, #16]
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	fa92 f2a2 	rbit	r2, r2
 8002ec6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	fab2 f282 	clz	r2, r2
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	f002 021f 	and.w	r2, r2, #31
 8002eda:	2101      	movs	r1, #1
 8002edc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0b7      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ee6:	4b6d      	ldr	r3, [pc, #436]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	496a      	ldr	r1, [pc, #424]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ef8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d105      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f00:	4b66      	ldr	r3, [pc, #408]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	4a65      	ldr	r2, [pc, #404]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f18:	4b60      	ldr	r3, [pc, #384]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f023 0203 	bic.w	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	495d      	ldr	r1, [pc, #372]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f36:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	4956      	ldr	r1, [pc, #344]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d008      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f54:	4b51      	ldr	r3, [pc, #324]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	494e      	ldr	r1, [pc, #312]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d008      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f72:	4b4a      	ldr	r3, [pc, #296]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f023 0210 	bic.w	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4947      	ldr	r1, [pc, #284]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f90:	4b42      	ldr	r3, [pc, #264]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	493f      	ldr	r1, [pc, #252]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f023 0220 	bic.w	r2, r3, #32
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a1b      	ldr	r3, [r3, #32]
 8002fba:	4938      	ldr	r1, [pc, #224]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0308 	and.w	r3, r3, #8
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d008      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fcc:	4b33      	ldr	r3, [pc, #204]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	4930      	ldr	r1, [pc, #192]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0310 	and.w	r3, r3, #16
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d008      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fea:	4b2c      	ldr	r3, [pc, #176]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	4929      	ldr	r1, [pc, #164]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003004:	2b00      	cmp	r3, #0
 8003006:	d008      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003008:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	4921      	ldr	r1, [pc, #132]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003016:	4313      	orrs	r3, r2
 8003018:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003026:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	491a      	ldr	r1, [pc, #104]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003034:	4313      	orrs	r3, r2
 8003036:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003044:	4b15      	ldr	r3, [pc, #84]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003050:	4912      	ldr	r1, [pc, #72]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003052:	4313      	orrs	r3, r2
 8003054:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d008      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003062:	4b0e      	ldr	r3, [pc, #56]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	490b      	ldr	r1, [pc, #44]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003070:	4313      	orrs	r3, r2
 8003072:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d008      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003084:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800308c:	4903      	ldr	r1, [pc, #12]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800308e:	4313      	orrs	r3, r2
 8003090:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3748      	adds	r7, #72	; 0x48
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000

080030a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e09d      	b.n	80031ee <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d108      	bne.n	80030cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030c2:	d009      	beq.n	80030d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	61da      	str	r2, [r3, #28]
 80030ca:	e005      	b.n	80030d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe f868 	bl	80011c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800310e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003118:	d902      	bls.n	8003120 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	e002      	b.n	8003126 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003124:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800312e:	d007      	beq.n	8003140 <HAL_SPI_Init+0xa0>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003138:	d002      	beq.n	8003140 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003150:	431a      	orrs	r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	ea42 0103 	orr.w	r1, r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	f003 0204 	and.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	431a      	orrs	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80031bc:	ea42 0103 	orr.w	r1, r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b088      	sub	sp, #32
 80031fa:	af02      	add	r7, sp, #8
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	603b      	str	r3, [r7, #0]
 8003202:	4613      	mov	r3, r2
 8003204:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003212:	d112      	bne.n	800323a <HAL_SPI_Receive+0x44>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10e      	bne.n	800323a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2204      	movs	r2, #4
 8003220:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003224:	88fa      	ldrh	r2, [r7, #6]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	4613      	mov	r3, r2
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f910 	bl	8003456 <HAL_SPI_TransmitReceive>
 8003236:	4603      	mov	r3, r0
 8003238:	e109      	b.n	800344e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_SPI_Receive+0x52>
 8003244:	2302      	movs	r3, #2
 8003246:	e102      	b.n	800344e <HAL_SPI_Receive+0x258>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003250:	f7fe f94a 	bl	80014e8 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d002      	beq.n	8003268 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003262:	2302      	movs	r3, #2
 8003264:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003266:	e0e9      	b.n	800343c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <HAL_SPI_Receive+0x7e>
 800326e:	88fb      	ldrh	r3, [r7, #6]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003278:	e0e0      	b.n	800343c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2204      	movs	r2, #4
 800327e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2200      	movs	r2, #0
 8003286:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	88fa      	ldrh	r2, [r7, #6]
 8003292:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032c4:	d908      	bls.n	80032d8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	e007      	b.n	80032e8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032e6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f0:	d10f      	bne.n	8003312 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003300:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003310:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d007      	beq.n	8003330 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800332e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003338:	d867      	bhi.n	800340a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800333a:	e030      	b.n	800339e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d117      	bne.n	800337a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f103 020c 	add.w	r2, r3, #12
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	7812      	ldrb	r2, [r2, #0]
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	1c5a      	adds	r2, r3, #1
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003378:	e011      	b.n	800339e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800337a:	f7fe f8b5 	bl	80014e8 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d803      	bhi.n	8003392 <HAL_SPI_Receive+0x19c>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d102      	bne.n	8003398 <HAL_SPI_Receive+0x1a2>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800339c:	e04e      	b.n	800343c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1c8      	bne.n	800333c <HAL_SPI_Receive+0x146>
 80033aa:	e034      	b.n	8003416 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d115      	bne.n	80033e6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	b292      	uxth	r2, r2
 80033c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	1c9a      	adds	r2, r3, #2
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033d8:	b29b      	uxth	r3, r3
 80033da:	3b01      	subs	r3, #1
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80033e4:	e011      	b.n	800340a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033e6:	f7fe f87f 	bl	80014e8 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d803      	bhi.n	80033fe <HAL_SPI_Receive+0x208>
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033fc:	d102      	bne.n	8003404 <HAL_SPI_Receive+0x20e>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d102      	bne.n	800340a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003408:	e018      	b.n	800343c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1ca      	bne.n	80033ac <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fb4c 	bl	8003ab8 <SPI_EndRxTransaction>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d002      	beq.n	800342c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	75fb      	strb	r3, [r7, #23]
 8003438:	e000      	b.n	800343c <HAL_SPI_Receive+0x246>
  }

error :
 800343a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b08a      	sub	sp, #40	; 0x28
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003464:	2301      	movs	r3, #1
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003468:	2300      	movs	r3, #0
 800346a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_SPI_TransmitReceive+0x26>
 8003478:	2302      	movs	r3, #2
 800347a:	e1fb      	b.n	8003874 <HAL_SPI_TransmitReceive+0x41e>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003484:	f7fe f830 	bl	80014e8 <HAL_GetTick>
 8003488:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003490:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034a0:	7efb      	ldrb	r3, [r7, #27]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d00e      	beq.n	80034c4 <HAL_SPI_TransmitReceive+0x6e>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ac:	d106      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d102      	bne.n	80034bc <HAL_SPI_TransmitReceive+0x66>
 80034b6:	7efb      	ldrb	r3, [r7, #27]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d003      	beq.n	80034c4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80034bc:	2302      	movs	r3, #2
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80034c2:	e1cd      	b.n	8003860 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_SPI_TransmitReceive+0x80>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d002      	beq.n	80034d6 <HAL_SPI_TransmitReceive+0x80>
 80034d0:	887b      	ldrh	r3, [r7, #2]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d103      	bne.n	80034de <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80034dc:	e1c0      	b.n	8003860 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d003      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2205      	movs	r2, #5
 80034ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	887a      	ldrh	r2, [r7, #2]
 8003502:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	887a      	ldrh	r2, [r7, #2]
 800350a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	887a      	ldrh	r2, [r7, #2]
 8003518:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	887a      	ldrh	r2, [r7, #2]
 800351e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003534:	d802      	bhi.n	800353c <HAL_SPI_TransmitReceive+0xe6>
 8003536:	8a3b      	ldrh	r3, [r7, #16]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d908      	bls.n	800354e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	e007      	b.n	800355e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003568:	2b40      	cmp	r3, #64	; 0x40
 800356a:	d007      	beq.n	800357c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800357a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003584:	d97c      	bls.n	8003680 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x13e>
 800358e:	8a7b      	ldrh	r3, [r7, #18]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d169      	bne.n	8003668 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a4:	1c9a      	adds	r2, r3, #2
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035b8:	e056      	b.n	8003668 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d11b      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x1aa>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <HAL_SPI_TransmitReceive+0x1aa>
 80035d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d113      	bne.n	8003600 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035dc:	881a      	ldrh	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	1c9a      	adds	r2, r3, #2
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b01      	cmp	r3, #1
 800360c:	d11c      	bne.n	8003648 <HAL_SPI_TransmitReceive+0x1f2>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68da      	ldr	r2, [r3, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	b292      	uxth	r2, r2
 8003626:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	1c9a      	adds	r2, r3, #2
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003644:	2301      	movs	r3, #1
 8003646:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003648:	f7fd ff4e 	bl	80014e8 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003654:	429a      	cmp	r2, r3
 8003656:	d807      	bhi.n	8003668 <HAL_SPI_TransmitReceive+0x212>
 8003658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365e:	d003      	beq.n	8003668 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003666:	e0fb      	b.n	8003860 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1a3      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x164>
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003678:	b29b      	uxth	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d19d      	bne.n	80035ba <HAL_SPI_TransmitReceive+0x164>
 800367e:	e0df      	b.n	8003840 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_SPI_TransmitReceive+0x23a>
 8003688:	8a7b      	ldrh	r3, [r7, #18]
 800368a:	2b01      	cmp	r3, #1
 800368c:	f040 80cb 	bne.w	8003826 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	d912      	bls.n	80036c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800369e:	881a      	ldrh	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036aa:	1c9a      	adds	r2, r3, #2
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b02      	subs	r3, #2
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036be:	e0b2      	b.n	8003826 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	7812      	ldrb	r2, [r2, #0]
 80036cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e6:	e09e      	b.n	8003826 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d134      	bne.n	8003760 <HAL_SPI_TransmitReceive+0x30a>
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d02f      	beq.n	8003760 <HAL_SPI_TransmitReceive+0x30a>
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	2b01      	cmp	r3, #1
 8003704:	d12c      	bne.n	8003760 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d912      	bls.n	8003736 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	1c9a      	adds	r2, r3, #2
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b02      	subs	r3, #2
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003734:	e012      	b.n	800375c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	7812      	ldrb	r2, [r2, #0]
 8003742:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d148      	bne.n	8003800 <HAL_SPI_TransmitReceive+0x3aa>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d042      	beq.n	8003800 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003780:	b29b      	uxth	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d923      	bls.n	80037ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	b292      	uxth	r2, r2
 8003792:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	1c9a      	adds	r2, r3, #2
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b02      	subs	r3, #2
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d81f      	bhi.n	80037fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	e016      	b.n	80037fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f103 020c 	add.w	r2, r3, #12
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	b2d2      	uxtb	r2, r2
 80037de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037fc:	2301      	movs	r3, #1
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003800:	f7fd fe72 	bl	80014e8 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800380c:	429a      	cmp	r2, r3
 800380e:	d803      	bhi.n	8003818 <HAL_SPI_TransmitReceive+0x3c2>
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d102      	bne.n	800381e <HAL_SPI_TransmitReceive+0x3c8>
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	2b00      	cmp	r3, #0
 800381c:	d103      	bne.n	8003826 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003824:	e01c      	b.n	8003860 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	f47f af5b 	bne.w	80036e8 <HAL_SPI_TransmitReceive+0x292>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	f47f af54 	bne.w	80036e8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f98f 	bl	8003b68 <SPI_EndRxTxTransaction>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	661a      	str	r2, [r3, #96]	; 0x60
 800385c:	e000      	b.n	8003860 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800385e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003870:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003874:	4618      	mov	r0, r3
 8003876:	3728      	adds	r7, #40	; 0x28
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b088      	sub	sp, #32
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800388c:	f7fd fe2c 	bl	80014e8 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	4413      	add	r3, r2
 800389a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800389c:	f7fd fe24 	bl	80014e8 <HAL_GetTick>
 80038a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038a2:	4b39      	ldr	r3, [pc, #228]	; (8003988 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	015b      	lsls	r3, r3, #5
 80038a8:	0d1b      	lsrs	r3, r3, #20
 80038aa:	69fa      	ldr	r2, [r7, #28]
 80038ac:	fb02 f303 	mul.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038b2:	e054      	b.n	800395e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ba:	d050      	beq.n	800395e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038bc:	f7fd fe14 	bl	80014e8 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d902      	bls.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d13d      	bne.n	800394e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ea:	d111      	bne.n	8003910 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f4:	d004      	beq.n	8003900 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fe:	d107      	bne.n	8003910 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800390e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003918:	d10f      	bne.n	800393a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003938:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e017      	b.n	800397e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	3b01      	subs	r3, #1
 800395c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	429a      	cmp	r2, r3
 800396c:	bf0c      	ite	eq
 800396e:	2301      	moveq	r3, #1
 8003970:	2300      	movne	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	461a      	mov	r2, r3
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	429a      	cmp	r2, r3
 800397a:	d19b      	bne.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000000 	.word	0x20000000

0800398c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	; 0x28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800399e:	f7fd fda3 	bl	80014e8 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	4413      	add	r3, r2
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80039ae:	f7fd fd9b 	bl	80014e8 <HAL_GetTick>
 80039b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	330c      	adds	r3, #12
 80039ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039bc:	4b3d      	ldr	r3, [pc, #244]	; (8003ab4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00da      	lsls	r2, r3, #3
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	0d1b      	lsrs	r3, r3, #20
 80039cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80039d4:	e060      	b.n	8003a98 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80039dc:	d107      	bne.n	80039ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d050      	beq.n	8003a98 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039f6:	f7fd fd77 	bl	80014e8 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d902      	bls.n	8003a0c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d13d      	bne.n	8003a88 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685a      	ldr	r2, [r3, #4]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a1a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a24:	d111      	bne.n	8003a4a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a2e:	d004      	beq.n	8003a3a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a38:	d107      	bne.n	8003a4a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a48:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a52:	d10f      	bne.n	8003a74 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a72:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e010      	b.n	8003aaa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d196      	bne.n	80039d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3728      	adds	r7, #40	; 0x28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000000 	.word	0x20000000

08003ab8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003acc:	d111      	bne.n	8003af2 <SPI_EndRxTransaction+0x3a>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad6:	d004      	beq.n	8003ae2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	d107      	bne.n	8003af2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2180      	movs	r1, #128	; 0x80
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff febd 	bl	800387c <SPI_WaitFlagStateUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e023      	b.n	8003b60 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b20:	d11d      	bne.n	8003b5e <SPI_EndRxTransaction+0xa6>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2a:	d004      	beq.n	8003b36 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b34:	d113      	bne.n	8003b5e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f7ff ff22 	bl	800398c <SPI_WaitFifoStateUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b52:	f043 0220 	orr.w	r2, r3, #32
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e000      	b.n	8003b60 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f7ff ff03 	bl	800398c <SPI_WaitFifoStateUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e027      	b.n	8003bec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2180      	movs	r1, #128	; 0x80
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f7ff fe68 	bl	800387c <SPI_WaitFlagStateUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb6:	f043 0220 	orr.w	r2, r3, #32
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e014      	b.n	8003bec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff fedc 	bl	800398c <SPI_WaitFifoStateUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e000      	b.n	8003bec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e048      	b.n	8003c98 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d106      	bne.n	8003c1c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f7fd fb18 	bl	800124c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2224      	movs	r2, #36	; 0x24
 8003c20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 0201 	bic.w	r2, r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8c8 	bl	8003dc8 <UART_SetConfig>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d101      	bne.n	8003c42 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e02a      	b.n	8003c98 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fa90 	bl	8004170 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003c6e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0208 	orr.w	r2, r2, #8
 8003c7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0201 	orr.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fb0f 	bl	80042b4 <UART_CheckIdleState>
 8003c96:	4603      	mov	r3, r0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3708      	adds	r7, #8
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb4:	2b20      	cmp	r3, #32
 8003cb6:	f040 8082 	bne.w	8003dbe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <HAL_UART_Transmit+0x26>
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07a      	b.n	8003dc0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_UART_Transmit+0x38>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e073      	b.n	8003dc0 <HAL_UART_Transmit+0x120>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2221      	movs	r2, #33	; 0x21
 8003cec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cee:	f7fd fbfb 	bl	80014e8 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	88fa      	ldrh	r2, [r7, #6]
 8003d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d0c:	d108      	bne.n	8003d20 <HAL_UART_Transmit+0x80>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d104      	bne.n	8003d20 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	e003      	b.n	8003d28 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d30:	e02d      	b.n	8003d8e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2180      	movs	r1, #128	; 0x80
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 fb02 	bl	8004346 <UART_WaitOnFlagUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e039      	b.n	8003dc0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10b      	bne.n	8003d6a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	881a      	ldrh	r2, [r3, #0]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d5e:	b292      	uxth	r2, r2
 8003d60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	3302      	adds	r3, #2
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	e008      	b.n	8003d7c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	781a      	ldrb	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	b292      	uxth	r2, r2
 8003d74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1cb      	bne.n	8003d32 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	2200      	movs	r2, #0
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 face 	bl	8004346 <UART_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e005      	b.n	8003dc0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2220      	movs	r2, #32
 8003db8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e000      	b.n	8003dc0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003df6:	f023 030c 	bic.w	r3, r3, #12
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6812      	ldr	r2, [r2, #0]
 8003dfe:	6979      	ldr	r1, [r7, #20]
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4aae      	ldr	r2, [pc, #696]	; (80040fc <UART_SetConfig+0x334>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d120      	bne.n	8003e8a <UART_SetConfig+0xc2>
 8003e48:	4bad      	ldr	r3, [pc, #692]	; (8004100 <UART_SetConfig+0x338>)
 8003e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d817      	bhi.n	8003e84 <UART_SetConfig+0xbc>
 8003e54:	a201      	add	r2, pc, #4	; (adr r2, 8003e5c <UART_SetConfig+0x94>)
 8003e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5a:	bf00      	nop
 8003e5c:	08003e6d 	.word	0x08003e6d
 8003e60:	08003e79 	.word	0x08003e79
 8003e64:	08003e7f 	.word	0x08003e7f
 8003e68:	08003e73 	.word	0x08003e73
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e0b5      	b.n	8003fde <UART_SetConfig+0x216>
 8003e72:	2302      	movs	r3, #2
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e0b2      	b.n	8003fde <UART_SetConfig+0x216>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e0af      	b.n	8003fde <UART_SetConfig+0x216>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e0ac      	b.n	8003fde <UART_SetConfig+0x216>
 8003e84:	2310      	movs	r3, #16
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e0a9      	b.n	8003fde <UART_SetConfig+0x216>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a9d      	ldr	r2, [pc, #628]	; (8004104 <UART_SetConfig+0x33c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d124      	bne.n	8003ede <UART_SetConfig+0x116>
 8003e94:	4b9a      	ldr	r3, [pc, #616]	; (8004100 <UART_SetConfig+0x338>)
 8003e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ea0:	d011      	beq.n	8003ec6 <UART_SetConfig+0xfe>
 8003ea2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ea6:	d817      	bhi.n	8003ed8 <UART_SetConfig+0x110>
 8003ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eac:	d011      	beq.n	8003ed2 <UART_SetConfig+0x10a>
 8003eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eb2:	d811      	bhi.n	8003ed8 <UART_SetConfig+0x110>
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <UART_SetConfig+0xf8>
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d006      	beq.n	8003ecc <UART_SetConfig+0x104>
 8003ebe:	e00b      	b.n	8003ed8 <UART_SetConfig+0x110>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e08b      	b.n	8003fde <UART_SetConfig+0x216>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e088      	b.n	8003fde <UART_SetConfig+0x216>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e085      	b.n	8003fde <UART_SetConfig+0x216>
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	77fb      	strb	r3, [r7, #31]
 8003ed6:	e082      	b.n	8003fde <UART_SetConfig+0x216>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	77fb      	strb	r3, [r7, #31]
 8003edc:	e07f      	b.n	8003fde <UART_SetConfig+0x216>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a89      	ldr	r2, [pc, #548]	; (8004108 <UART_SetConfig+0x340>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d124      	bne.n	8003f32 <UART_SetConfig+0x16a>
 8003ee8:	4b85      	ldr	r3, [pc, #532]	; (8004100 <UART_SetConfig+0x338>)
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003ef0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ef4:	d011      	beq.n	8003f1a <UART_SetConfig+0x152>
 8003ef6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003efa:	d817      	bhi.n	8003f2c <UART_SetConfig+0x164>
 8003efc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f00:	d011      	beq.n	8003f26 <UART_SetConfig+0x15e>
 8003f02:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f06:	d811      	bhi.n	8003f2c <UART_SetConfig+0x164>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <UART_SetConfig+0x14c>
 8003f0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f10:	d006      	beq.n	8003f20 <UART_SetConfig+0x158>
 8003f12:	e00b      	b.n	8003f2c <UART_SetConfig+0x164>
 8003f14:	2300      	movs	r3, #0
 8003f16:	77fb      	strb	r3, [r7, #31]
 8003f18:	e061      	b.n	8003fde <UART_SetConfig+0x216>
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	77fb      	strb	r3, [r7, #31]
 8003f1e:	e05e      	b.n	8003fde <UART_SetConfig+0x216>
 8003f20:	2304      	movs	r3, #4
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e05b      	b.n	8003fde <UART_SetConfig+0x216>
 8003f26:	2308      	movs	r3, #8
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e058      	b.n	8003fde <UART_SetConfig+0x216>
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e055      	b.n	8003fde <UART_SetConfig+0x216>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a75      	ldr	r2, [pc, #468]	; (800410c <UART_SetConfig+0x344>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d124      	bne.n	8003f86 <UART_SetConfig+0x1be>
 8003f3c:	4b70      	ldr	r3, [pc, #448]	; (8004100 <UART_SetConfig+0x338>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003f44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f48:	d011      	beq.n	8003f6e <UART_SetConfig+0x1a6>
 8003f4a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f4e:	d817      	bhi.n	8003f80 <UART_SetConfig+0x1b8>
 8003f50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f54:	d011      	beq.n	8003f7a <UART_SetConfig+0x1b2>
 8003f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f5a:	d811      	bhi.n	8003f80 <UART_SetConfig+0x1b8>
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <UART_SetConfig+0x1a0>
 8003f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f64:	d006      	beq.n	8003f74 <UART_SetConfig+0x1ac>
 8003f66:	e00b      	b.n	8003f80 <UART_SetConfig+0x1b8>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e037      	b.n	8003fde <UART_SetConfig+0x216>
 8003f6e:	2302      	movs	r3, #2
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e034      	b.n	8003fde <UART_SetConfig+0x216>
 8003f74:	2304      	movs	r3, #4
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e031      	b.n	8003fde <UART_SetConfig+0x216>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	77fb      	strb	r3, [r7, #31]
 8003f7e:	e02e      	b.n	8003fde <UART_SetConfig+0x216>
 8003f80:	2310      	movs	r3, #16
 8003f82:	77fb      	strb	r3, [r7, #31]
 8003f84:	e02b      	b.n	8003fde <UART_SetConfig+0x216>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a61      	ldr	r2, [pc, #388]	; (8004110 <UART_SetConfig+0x348>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d124      	bne.n	8003fda <UART_SetConfig+0x212>
 8003f90:	4b5b      	ldr	r3, [pc, #364]	; (8004100 <UART_SetConfig+0x338>)
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f94:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003f98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f9c:	d011      	beq.n	8003fc2 <UART_SetConfig+0x1fa>
 8003f9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fa2:	d817      	bhi.n	8003fd4 <UART_SetConfig+0x20c>
 8003fa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fa8:	d011      	beq.n	8003fce <UART_SetConfig+0x206>
 8003faa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fae:	d811      	bhi.n	8003fd4 <UART_SetConfig+0x20c>
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <UART_SetConfig+0x1f4>
 8003fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb8:	d006      	beq.n	8003fc8 <UART_SetConfig+0x200>
 8003fba:	e00b      	b.n	8003fd4 <UART_SetConfig+0x20c>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e00d      	b.n	8003fde <UART_SetConfig+0x216>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e00a      	b.n	8003fde <UART_SetConfig+0x216>
 8003fc8:	2304      	movs	r3, #4
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e007      	b.n	8003fde <UART_SetConfig+0x216>
 8003fce:	2308      	movs	r3, #8
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e004      	b.n	8003fde <UART_SetConfig+0x216>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e001      	b.n	8003fde <UART_SetConfig+0x216>
 8003fda:	2310      	movs	r3, #16
 8003fdc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe6:	d15c      	bne.n	80040a2 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003fe8:	7ffb      	ldrb	r3, [r7, #31]
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d827      	bhi.n	800403e <UART_SetConfig+0x276>
 8003fee:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <UART_SetConfig+0x22c>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004021 	.word	0x08004021
 8003ffc:	08004029 	.word	0x08004029
 8004000:	0800403f 	.word	0x0800403f
 8004004:	0800402f 	.word	0x0800402f
 8004008:	0800403f 	.word	0x0800403f
 800400c:	0800403f 	.word	0x0800403f
 8004010:	0800403f 	.word	0x0800403f
 8004014:	08004037 	.word	0x08004037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7fe fe4e 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 800401c:	61b8      	str	r0, [r7, #24]
        break;
 800401e:	e013      	b.n	8004048 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004020:	f7fe fe6c 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 8004024:	61b8      	str	r0, [r7, #24]
        break;
 8004026:	e00f      	b.n	8004048 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004028:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <UART_SetConfig+0x34c>)
 800402a:	61bb      	str	r3, [r7, #24]
        break;
 800402c:	e00c      	b.n	8004048 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800402e:	f7fe fdcd 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8004032:	61b8      	str	r0, [r7, #24]
        break;
 8004034:	e008      	b.n	8004048 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800403a:	61bb      	str	r3, [r7, #24]
        break;
 800403c:	e004      	b.n	8004048 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	77bb      	strb	r3, [r7, #30]
        break;
 8004046:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8085 	beq.w	800415a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	005a      	lsls	r2, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	085b      	lsrs	r3, r3, #1
 800405a:	441a      	add	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	fbb2 f3f3 	udiv	r3, r2, r3
 8004064:	b29b      	uxth	r3, r3
 8004066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d916      	bls.n	800409c <UART_SetConfig+0x2d4>
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d212      	bcs.n	800409c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	b29b      	uxth	r3, r3
 800407a:	f023 030f 	bic.w	r3, r3, #15
 800407e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	085b      	lsrs	r3, r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	b29a      	uxth	r2, r3
 800408c:	89fb      	ldrh	r3, [r7, #14]
 800408e:	4313      	orrs	r3, r2
 8004090:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	89fa      	ldrh	r2, [r7, #14]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	e05e      	b.n	800415a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	77bb      	strb	r3, [r7, #30]
 80040a0:	e05b      	b.n	800415a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040a2:	7ffb      	ldrb	r3, [r7, #31]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d837      	bhi.n	8004118 <UART_SetConfig+0x350>
 80040a8:	a201      	add	r2, pc, #4	; (adr r2, 80040b0 <UART_SetConfig+0x2e8>)
 80040aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ae:	bf00      	nop
 80040b0:	080040d5 	.word	0x080040d5
 80040b4:	080040dd 	.word	0x080040dd
 80040b8:	080040e5 	.word	0x080040e5
 80040bc:	08004119 	.word	0x08004119
 80040c0:	080040eb 	.word	0x080040eb
 80040c4:	08004119 	.word	0x08004119
 80040c8:	08004119 	.word	0x08004119
 80040cc:	08004119 	.word	0x08004119
 80040d0:	080040f3 	.word	0x080040f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040d4:	f7fe fdf0 	bl	8002cb8 <HAL_RCC_GetPCLK1Freq>
 80040d8:	61b8      	str	r0, [r7, #24]
        break;
 80040da:	e022      	b.n	8004122 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040dc:	f7fe fe0e 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 80040e0:	61b8      	str	r0, [r7, #24]
        break;
 80040e2:	e01e      	b.n	8004122 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040e4:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <UART_SetConfig+0x34c>)
 80040e6:	61bb      	str	r3, [r7, #24]
        break;
 80040e8:	e01b      	b.n	8004122 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ea:	f7fe fd6f 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 80040ee:	61b8      	str	r0, [r7, #24]
        break;
 80040f0:	e017      	b.n	8004122 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040f6:	61bb      	str	r3, [r7, #24]
        break;
 80040f8:	e013      	b.n	8004122 <UART_SetConfig+0x35a>
 80040fa:	bf00      	nop
 80040fc:	40013800 	.word	0x40013800
 8004100:	40021000 	.word	0x40021000
 8004104:	40004400 	.word	0x40004400
 8004108:	40004800 	.word	0x40004800
 800410c:	40004c00 	.word	0x40004c00
 8004110:	40005000 	.word	0x40005000
 8004114:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	77bb      	strb	r3, [r7, #30]
        break;
 8004120:	bf00      	nop
    }

    if (pclk != 0U)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d018      	beq.n	800415a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	085a      	lsrs	r2, r3, #1
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	441a      	add	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	fbb2 f3f3 	udiv	r3, r2, r3
 800413a:	b29b      	uxth	r3, r3
 800413c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d908      	bls.n	8004156 <UART_SetConfig+0x38e>
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414a:	d204      	bcs.n	8004156 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	60da      	str	r2, [r3, #12]
 8004154:	e001      	b.n	800415a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004166:	7fbb      	ldrb	r3, [r7, #30]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424c:	2b00      	cmp	r3, #0
 800424e:	d01a      	beq.n	8004286 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800426e:	d10a      	bne.n	8004286 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00a      	beq.n	80042a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	605a      	str	r2, [r3, #4]
  }
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042c4:	f7fd f910 	bl	80014e8 <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d10e      	bne.n	80042f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f82d 	bl	8004346 <UART_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e023      	b.n	800433e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b04      	cmp	r3, #4
 8004302:	d10e      	bne.n	8004322 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004304:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f000 f817 	bl	8004346 <UART_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e00d      	b.n	800433e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2220      	movs	r2, #32
 8004326:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b09c      	sub	sp, #112	; 0x70
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	603b      	str	r3, [r7, #0]
 8004352:	4613      	mov	r3, r2
 8004354:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004356:	e0a5      	b.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800435a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800435e:	f000 80a1 	beq.w	80044a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004362:	f7fd f8c1 	bl	80014e8 <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800436e:	429a      	cmp	r2, r3
 8004370:	d302      	bcc.n	8004378 <UART_WaitOnFlagUntilTimeout+0x32>
 8004372:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004374:	2b00      	cmp	r3, #0
 8004376:	d13e      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004388:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800438c:	667b      	str	r3, [r7, #100]	; 0x64
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004398:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800439c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e6      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3308      	adds	r3, #8
 80043b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b4:	e853 3f00 	ldrex	r3, [r3]
 80043b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	f023 0301 	bic.w	r3, r3, #1
 80043c0:	663b      	str	r3, [r7, #96]	; 0x60
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3308      	adds	r3, #8
 80043c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80043cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e5      	bne.n	80043aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e067      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d04f      	beq.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004412:	d147      	bne.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800441c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	e853 3f00 	ldrex	r3, [r3]
 800442a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004432:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
 800443e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e6      	bne.n	800441e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	3308      	adds	r3, #8
 8004456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	613b      	str	r3, [r7, #16]
   return(result);
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	66bb      	str	r3, [r7, #104]	; 0x68
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3308      	adds	r3, #8
 800446e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004470:	623a      	str	r2, [r7, #32]
 8004472:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	69f9      	ldr	r1, [r7, #28]
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	61bb      	str	r3, [r7, #24]
   return(result);
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e5      	bne.n	8004450 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2220      	movs	r2, #32
 8004488:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e010      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	69da      	ldr	r2, [r3, #28]
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	4013      	ands	r3, r2
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	429a      	cmp	r2, r3
 80044c0:	f43f af4a 	beq.w	8004358 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3770      	adds	r7, #112	; 0x70
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <cos>:
 80044d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80044d2:	ec53 2b10 	vmov	r2, r3, d0
 80044d6:	4824      	ldr	r0, [pc, #144]	; (8004568 <cos+0x98>)
 80044d8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80044dc:	4281      	cmp	r1, r0
 80044de:	dc06      	bgt.n	80044ee <cos+0x1e>
 80044e0:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8004560 <cos+0x90>
 80044e4:	f000 fa50 	bl	8004988 <__kernel_cos>
 80044e8:	ec51 0b10 	vmov	r0, r1, d0
 80044ec:	e007      	b.n	80044fe <cos+0x2e>
 80044ee:	481f      	ldr	r0, [pc, #124]	; (800456c <cos+0x9c>)
 80044f0:	4281      	cmp	r1, r0
 80044f2:	dd09      	ble.n	8004508 <cos+0x38>
 80044f4:	ee10 0a10 	vmov	r0, s0
 80044f8:	4619      	mov	r1, r3
 80044fa:	f7fb fe69 	bl	80001d0 <__aeabi_dsub>
 80044fe:	ec41 0b10 	vmov	d0, r0, r1
 8004502:	b005      	add	sp, #20
 8004504:	f85d fb04 	ldr.w	pc, [sp], #4
 8004508:	4668      	mov	r0, sp
 800450a:	f000 f831 	bl	8004570 <__ieee754_rem_pio2>
 800450e:	f000 0003 	and.w	r0, r0, #3
 8004512:	2801      	cmp	r0, #1
 8004514:	d007      	beq.n	8004526 <cos+0x56>
 8004516:	2802      	cmp	r0, #2
 8004518:	d012      	beq.n	8004540 <cos+0x70>
 800451a:	b9c0      	cbnz	r0, 800454e <cos+0x7e>
 800451c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004520:	ed9d 0b00 	vldr	d0, [sp]
 8004524:	e7de      	b.n	80044e4 <cos+0x14>
 8004526:	ed9d 1b02 	vldr	d1, [sp, #8]
 800452a:	ed9d 0b00 	vldr	d0, [sp]
 800452e:	f000 fe33 	bl	8005198 <__kernel_sin>
 8004532:	ec53 2b10 	vmov	r2, r3, d0
 8004536:	ee10 0a10 	vmov	r0, s0
 800453a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800453e:	e7de      	b.n	80044fe <cos+0x2e>
 8004540:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004544:	ed9d 0b00 	vldr	d0, [sp]
 8004548:	f000 fa1e 	bl	8004988 <__kernel_cos>
 800454c:	e7f1      	b.n	8004532 <cos+0x62>
 800454e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004552:	ed9d 0b00 	vldr	d0, [sp]
 8004556:	2001      	movs	r0, #1
 8004558:	f000 fe1e 	bl	8005198 <__kernel_sin>
 800455c:	e7c4      	b.n	80044e8 <cos+0x18>
 800455e:	bf00      	nop
	...
 8004568:	3fe921fb 	.word	0x3fe921fb
 800456c:	7fefffff 	.word	0x7fefffff

08004570 <__ieee754_rem_pio2>:
 8004570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004574:	ed2d 8b02 	vpush	{d8}
 8004578:	ec55 4b10 	vmov	r4, r5, d0
 800457c:	4bca      	ldr	r3, [pc, #808]	; (80048a8 <__ieee754_rem_pio2+0x338>)
 800457e:	b08b      	sub	sp, #44	; 0x2c
 8004580:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004584:	4598      	cmp	r8, r3
 8004586:	4682      	mov	sl, r0
 8004588:	9502      	str	r5, [sp, #8]
 800458a:	dc08      	bgt.n	800459e <__ieee754_rem_pio2+0x2e>
 800458c:	2200      	movs	r2, #0
 800458e:	2300      	movs	r3, #0
 8004590:	ed80 0b00 	vstr	d0, [r0]
 8004594:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004598:	f04f 0b00 	mov.w	fp, #0
 800459c:	e028      	b.n	80045f0 <__ieee754_rem_pio2+0x80>
 800459e:	4bc3      	ldr	r3, [pc, #780]	; (80048ac <__ieee754_rem_pio2+0x33c>)
 80045a0:	4598      	cmp	r8, r3
 80045a2:	dc78      	bgt.n	8004696 <__ieee754_rem_pio2+0x126>
 80045a4:	9b02      	ldr	r3, [sp, #8]
 80045a6:	4ec2      	ldr	r6, [pc, #776]	; (80048b0 <__ieee754_rem_pio2+0x340>)
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	ee10 0a10 	vmov	r0, s0
 80045ae:	a3b0      	add	r3, pc, #704	; (adr r3, 8004870 <__ieee754_rem_pio2+0x300>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	4629      	mov	r1, r5
 80045b6:	dd39      	ble.n	800462c <__ieee754_rem_pio2+0xbc>
 80045b8:	f7fb fe0a 	bl	80001d0 <__aeabi_dsub>
 80045bc:	45b0      	cmp	r8, r6
 80045be:	4604      	mov	r4, r0
 80045c0:	460d      	mov	r5, r1
 80045c2:	d01b      	beq.n	80045fc <__ieee754_rem_pio2+0x8c>
 80045c4:	a3ac      	add	r3, pc, #688	; (adr r3, 8004878 <__ieee754_rem_pio2+0x308>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fb fe01 	bl	80001d0 <__aeabi_dsub>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	e9ca 2300 	strd	r2, r3, [sl]
 80045d6:	4620      	mov	r0, r4
 80045d8:	4629      	mov	r1, r5
 80045da:	f7fb fdf9 	bl	80001d0 <__aeabi_dsub>
 80045de:	a3a6      	add	r3, pc, #664	; (adr r3, 8004878 <__ieee754_rem_pio2+0x308>)
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f7fb fdf4 	bl	80001d0 <__aeabi_dsub>
 80045e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80045ec:	f04f 0b01 	mov.w	fp, #1
 80045f0:	4658      	mov	r0, fp
 80045f2:	b00b      	add	sp, #44	; 0x2c
 80045f4:	ecbd 8b02 	vpop	{d8}
 80045f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045fc:	a3a0      	add	r3, pc, #640	; (adr r3, 8004880 <__ieee754_rem_pio2+0x310>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	f7fb fde5 	bl	80001d0 <__aeabi_dsub>
 8004606:	a3a0      	add	r3, pc, #640	; (adr r3, 8004888 <__ieee754_rem_pio2+0x318>)
 8004608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460c:	4604      	mov	r4, r0
 800460e:	460d      	mov	r5, r1
 8004610:	f7fb fdde 	bl	80001d0 <__aeabi_dsub>
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	e9ca 2300 	strd	r2, r3, [sl]
 800461c:	4620      	mov	r0, r4
 800461e:	4629      	mov	r1, r5
 8004620:	f7fb fdd6 	bl	80001d0 <__aeabi_dsub>
 8004624:	a398      	add	r3, pc, #608	; (adr r3, 8004888 <__ieee754_rem_pio2+0x318>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	e7db      	b.n	80045e4 <__ieee754_rem_pio2+0x74>
 800462c:	f7fb fdd2 	bl	80001d4 <__adddf3>
 8004630:	45b0      	cmp	r8, r6
 8004632:	4604      	mov	r4, r0
 8004634:	460d      	mov	r5, r1
 8004636:	d016      	beq.n	8004666 <__ieee754_rem_pio2+0xf6>
 8004638:	a38f      	add	r3, pc, #572	; (adr r3, 8004878 <__ieee754_rem_pio2+0x308>)
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	f7fb fdc9 	bl	80001d4 <__adddf3>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	e9ca 2300 	strd	r2, r3, [sl]
 800464a:	4620      	mov	r0, r4
 800464c:	4629      	mov	r1, r5
 800464e:	f7fb fdbf 	bl	80001d0 <__aeabi_dsub>
 8004652:	a389      	add	r3, pc, #548	; (adr r3, 8004878 <__ieee754_rem_pio2+0x308>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f7fb fdbc 	bl	80001d4 <__adddf3>
 800465c:	f04f 3bff 	mov.w	fp, #4294967295
 8004660:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004664:	e7c4      	b.n	80045f0 <__ieee754_rem_pio2+0x80>
 8004666:	a386      	add	r3, pc, #536	; (adr r3, 8004880 <__ieee754_rem_pio2+0x310>)
 8004668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466c:	f7fb fdb2 	bl	80001d4 <__adddf3>
 8004670:	a385      	add	r3, pc, #532	; (adr r3, 8004888 <__ieee754_rem_pio2+0x318>)
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	4604      	mov	r4, r0
 8004678:	460d      	mov	r5, r1
 800467a:	f7fb fdab 	bl	80001d4 <__adddf3>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	e9ca 2300 	strd	r2, r3, [sl]
 8004686:	4620      	mov	r0, r4
 8004688:	4629      	mov	r1, r5
 800468a:	f7fb fda1 	bl	80001d0 <__aeabi_dsub>
 800468e:	a37e      	add	r3, pc, #504	; (adr r3, 8004888 <__ieee754_rem_pio2+0x318>)
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	e7e0      	b.n	8004658 <__ieee754_rem_pio2+0xe8>
 8004696:	4b87      	ldr	r3, [pc, #540]	; (80048b4 <__ieee754_rem_pio2+0x344>)
 8004698:	4598      	cmp	r8, r3
 800469a:	f300 80d9 	bgt.w	8004850 <__ieee754_rem_pio2+0x2e0>
 800469e:	f000 fe39 	bl	8005314 <fabs>
 80046a2:	ec55 4b10 	vmov	r4, r5, d0
 80046a6:	ee10 0a10 	vmov	r0, s0
 80046aa:	a379      	add	r3, pc, #484	; (adr r3, 8004890 <__ieee754_rem_pio2+0x320>)
 80046ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b0:	4629      	mov	r1, r5
 80046b2:	f7fb ff45 	bl	8000540 <__aeabi_dmul>
 80046b6:	4b80      	ldr	r3, [pc, #512]	; (80048b8 <__ieee754_rem_pio2+0x348>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	f7fb fd8b 	bl	80001d4 <__adddf3>
 80046be:	f7fc f9d9 	bl	8000a74 <__aeabi_d2iz>
 80046c2:	4683      	mov	fp, r0
 80046c4:	f7fb fed2 	bl	800046c <__aeabi_i2d>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	ec43 2b18 	vmov	d8, r2, r3
 80046d0:	a367      	add	r3, pc, #412	; (adr r3, 8004870 <__ieee754_rem_pio2+0x300>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f7fb ff33 	bl	8000540 <__aeabi_dmul>
 80046da:	4602      	mov	r2, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	4620      	mov	r0, r4
 80046e0:	4629      	mov	r1, r5
 80046e2:	f7fb fd75 	bl	80001d0 <__aeabi_dsub>
 80046e6:	a364      	add	r3, pc, #400	; (adr r3, 8004878 <__ieee754_rem_pio2+0x308>)
 80046e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ec:	4606      	mov	r6, r0
 80046ee:	460f      	mov	r7, r1
 80046f0:	ec51 0b18 	vmov	r0, r1, d8
 80046f4:	f7fb ff24 	bl	8000540 <__aeabi_dmul>
 80046f8:	f1bb 0f1f 	cmp.w	fp, #31
 80046fc:	4604      	mov	r4, r0
 80046fe:	460d      	mov	r5, r1
 8004700:	dc0d      	bgt.n	800471e <__ieee754_rem_pio2+0x1ae>
 8004702:	4b6e      	ldr	r3, [pc, #440]	; (80048bc <__ieee754_rem_pio2+0x34c>)
 8004704:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800470c:	4543      	cmp	r3, r8
 800470e:	d006      	beq.n	800471e <__ieee754_rem_pio2+0x1ae>
 8004710:	4622      	mov	r2, r4
 8004712:	462b      	mov	r3, r5
 8004714:	4630      	mov	r0, r6
 8004716:	4639      	mov	r1, r7
 8004718:	f7fb fd5a 	bl	80001d0 <__aeabi_dsub>
 800471c:	e00f      	b.n	800473e <__ieee754_rem_pio2+0x1ce>
 800471e:	462b      	mov	r3, r5
 8004720:	4622      	mov	r2, r4
 8004722:	4630      	mov	r0, r6
 8004724:	4639      	mov	r1, r7
 8004726:	f7fb fd53 	bl	80001d0 <__aeabi_dsub>
 800472a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800472e:	9303      	str	r3, [sp, #12]
 8004730:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004734:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004738:	f1b8 0f10 	cmp.w	r8, #16
 800473c:	dc02      	bgt.n	8004744 <__ieee754_rem_pio2+0x1d4>
 800473e:	e9ca 0100 	strd	r0, r1, [sl]
 8004742:	e039      	b.n	80047b8 <__ieee754_rem_pio2+0x248>
 8004744:	a34e      	add	r3, pc, #312	; (adr r3, 8004880 <__ieee754_rem_pio2+0x310>)
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	ec51 0b18 	vmov	r0, r1, d8
 800474e:	f7fb fef7 	bl	8000540 <__aeabi_dmul>
 8004752:	4604      	mov	r4, r0
 8004754:	460d      	mov	r5, r1
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4630      	mov	r0, r6
 800475c:	4639      	mov	r1, r7
 800475e:	f7fb fd37 	bl	80001d0 <__aeabi_dsub>
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	4680      	mov	r8, r0
 8004768:	4689      	mov	r9, r1
 800476a:	4630      	mov	r0, r6
 800476c:	4639      	mov	r1, r7
 800476e:	f7fb fd2f 	bl	80001d0 <__aeabi_dsub>
 8004772:	4622      	mov	r2, r4
 8004774:	462b      	mov	r3, r5
 8004776:	f7fb fd2b 	bl	80001d0 <__aeabi_dsub>
 800477a:	a343      	add	r3, pc, #268	; (adr r3, 8004888 <__ieee754_rem_pio2+0x318>)
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	4604      	mov	r4, r0
 8004782:	460d      	mov	r5, r1
 8004784:	ec51 0b18 	vmov	r0, r1, d8
 8004788:	f7fb feda 	bl	8000540 <__aeabi_dmul>
 800478c:	4622      	mov	r2, r4
 800478e:	462b      	mov	r3, r5
 8004790:	f7fb fd1e 	bl	80001d0 <__aeabi_dsub>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4604      	mov	r4, r0
 800479a:	460d      	mov	r5, r1
 800479c:	4640      	mov	r0, r8
 800479e:	4649      	mov	r1, r9
 80047a0:	f7fb fd16 	bl	80001d0 <__aeabi_dsub>
 80047a4:	9a03      	ldr	r2, [sp, #12]
 80047a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b31      	cmp	r3, #49	; 0x31
 80047ae:	dc24      	bgt.n	80047fa <__ieee754_rem_pio2+0x28a>
 80047b0:	e9ca 0100 	strd	r0, r1, [sl]
 80047b4:	4646      	mov	r6, r8
 80047b6:	464f      	mov	r7, r9
 80047b8:	e9da 8900 	ldrd	r8, r9, [sl]
 80047bc:	4630      	mov	r0, r6
 80047be:	4642      	mov	r2, r8
 80047c0:	464b      	mov	r3, r9
 80047c2:	4639      	mov	r1, r7
 80047c4:	f7fb fd04 	bl	80001d0 <__aeabi_dsub>
 80047c8:	462b      	mov	r3, r5
 80047ca:	4622      	mov	r2, r4
 80047cc:	f7fb fd00 	bl	80001d0 <__aeabi_dsub>
 80047d0:	9b02      	ldr	r3, [sp, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047d8:	f6bf af0a 	bge.w	80045f0 <__ieee754_rem_pio2+0x80>
 80047dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80047e0:	f8ca 3004 	str.w	r3, [sl, #4]
 80047e4:	f8ca 8000 	str.w	r8, [sl]
 80047e8:	f8ca 0008 	str.w	r0, [sl, #8]
 80047ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047f0:	f8ca 300c 	str.w	r3, [sl, #12]
 80047f4:	f1cb 0b00 	rsb	fp, fp, #0
 80047f8:	e6fa      	b.n	80045f0 <__ieee754_rem_pio2+0x80>
 80047fa:	a327      	add	r3, pc, #156	; (adr r3, 8004898 <__ieee754_rem_pio2+0x328>)
 80047fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004800:	ec51 0b18 	vmov	r0, r1, d8
 8004804:	f7fb fe9c 	bl	8000540 <__aeabi_dmul>
 8004808:	4604      	mov	r4, r0
 800480a:	460d      	mov	r5, r1
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4640      	mov	r0, r8
 8004812:	4649      	mov	r1, r9
 8004814:	f7fb fcdc 	bl	80001d0 <__aeabi_dsub>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4606      	mov	r6, r0
 800481e:	460f      	mov	r7, r1
 8004820:	4640      	mov	r0, r8
 8004822:	4649      	mov	r1, r9
 8004824:	f7fb fcd4 	bl	80001d0 <__aeabi_dsub>
 8004828:	4622      	mov	r2, r4
 800482a:	462b      	mov	r3, r5
 800482c:	f7fb fcd0 	bl	80001d0 <__aeabi_dsub>
 8004830:	a31b      	add	r3, pc, #108	; (adr r3, 80048a0 <__ieee754_rem_pio2+0x330>)
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	4604      	mov	r4, r0
 8004838:	460d      	mov	r5, r1
 800483a:	ec51 0b18 	vmov	r0, r1, d8
 800483e:	f7fb fe7f 	bl	8000540 <__aeabi_dmul>
 8004842:	4622      	mov	r2, r4
 8004844:	462b      	mov	r3, r5
 8004846:	f7fb fcc3 	bl	80001d0 <__aeabi_dsub>
 800484a:	4604      	mov	r4, r0
 800484c:	460d      	mov	r5, r1
 800484e:	e75f      	b.n	8004710 <__ieee754_rem_pio2+0x1a0>
 8004850:	4b1b      	ldr	r3, [pc, #108]	; (80048c0 <__ieee754_rem_pio2+0x350>)
 8004852:	4598      	cmp	r8, r3
 8004854:	dd36      	ble.n	80048c4 <__ieee754_rem_pio2+0x354>
 8004856:	ee10 2a10 	vmov	r2, s0
 800485a:	462b      	mov	r3, r5
 800485c:	4620      	mov	r0, r4
 800485e:	4629      	mov	r1, r5
 8004860:	f7fb fcb6 	bl	80001d0 <__aeabi_dsub>
 8004864:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004868:	e9ca 0100 	strd	r0, r1, [sl]
 800486c:	e694      	b.n	8004598 <__ieee754_rem_pio2+0x28>
 800486e:	bf00      	nop
 8004870:	54400000 	.word	0x54400000
 8004874:	3ff921fb 	.word	0x3ff921fb
 8004878:	1a626331 	.word	0x1a626331
 800487c:	3dd0b461 	.word	0x3dd0b461
 8004880:	1a600000 	.word	0x1a600000
 8004884:	3dd0b461 	.word	0x3dd0b461
 8004888:	2e037073 	.word	0x2e037073
 800488c:	3ba3198a 	.word	0x3ba3198a
 8004890:	6dc9c883 	.word	0x6dc9c883
 8004894:	3fe45f30 	.word	0x3fe45f30
 8004898:	2e000000 	.word	0x2e000000
 800489c:	3ba3198a 	.word	0x3ba3198a
 80048a0:	252049c1 	.word	0x252049c1
 80048a4:	397b839a 	.word	0x397b839a
 80048a8:	3fe921fb 	.word	0x3fe921fb
 80048ac:	4002d97b 	.word	0x4002d97b
 80048b0:	3ff921fb 	.word	0x3ff921fb
 80048b4:	413921fb 	.word	0x413921fb
 80048b8:	3fe00000 	.word	0x3fe00000
 80048bc:	080055e0 	.word	0x080055e0
 80048c0:	7fefffff 	.word	0x7fefffff
 80048c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80048c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80048cc:	ee10 0a10 	vmov	r0, s0
 80048d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80048d4:	ee10 6a10 	vmov	r6, s0
 80048d8:	460f      	mov	r7, r1
 80048da:	f7fc f8cb 	bl	8000a74 <__aeabi_d2iz>
 80048de:	f7fb fdc5 	bl	800046c <__aeabi_i2d>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4630      	mov	r0, r6
 80048e8:	4639      	mov	r1, r7
 80048ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048ee:	f7fb fc6f 	bl	80001d0 <__aeabi_dsub>
 80048f2:	4b22      	ldr	r3, [pc, #136]	; (800497c <__ieee754_rem_pio2+0x40c>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	f7fb fe23 	bl	8000540 <__aeabi_dmul>
 80048fa:	460f      	mov	r7, r1
 80048fc:	4606      	mov	r6, r0
 80048fe:	f7fc f8b9 	bl	8000a74 <__aeabi_d2iz>
 8004902:	f7fb fdb3 	bl	800046c <__aeabi_i2d>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	4630      	mov	r0, r6
 800490c:	4639      	mov	r1, r7
 800490e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004912:	f7fb fc5d 	bl	80001d0 <__aeabi_dsub>
 8004916:	4b19      	ldr	r3, [pc, #100]	; (800497c <__ieee754_rem_pio2+0x40c>)
 8004918:	2200      	movs	r2, #0
 800491a:	f7fb fe11 	bl	8000540 <__aeabi_dmul>
 800491e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004922:	ad04      	add	r5, sp, #16
 8004924:	f04f 0803 	mov.w	r8, #3
 8004928:	46a9      	mov	r9, r5
 800492a:	2600      	movs	r6, #0
 800492c:	2700      	movs	r7, #0
 800492e:	4632      	mov	r2, r6
 8004930:	463b      	mov	r3, r7
 8004932:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004936:	46c3      	mov	fp, r8
 8004938:	3d08      	subs	r5, #8
 800493a:	f108 38ff 	add.w	r8, r8, #4294967295
 800493e:	f7fc f867 	bl	8000a10 <__aeabi_dcmpeq>
 8004942:	2800      	cmp	r0, #0
 8004944:	d1f3      	bne.n	800492e <__ieee754_rem_pio2+0x3be>
 8004946:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <__ieee754_rem_pio2+0x410>)
 8004948:	9301      	str	r3, [sp, #4]
 800494a:	2302      	movs	r3, #2
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	4622      	mov	r2, r4
 8004950:	465b      	mov	r3, fp
 8004952:	4651      	mov	r1, sl
 8004954:	4648      	mov	r0, r9
 8004956:	f000 f8df 	bl	8004b18 <__kernel_rem_pio2>
 800495a:	9b02      	ldr	r3, [sp, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	4683      	mov	fp, r0
 8004960:	f6bf ae46 	bge.w	80045f0 <__ieee754_rem_pio2+0x80>
 8004964:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004968:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800496c:	f8ca 3004 	str.w	r3, [sl, #4]
 8004970:	f8da 300c 	ldr.w	r3, [sl, #12]
 8004974:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004978:	e73a      	b.n	80047f0 <__ieee754_rem_pio2+0x280>
 800497a:	bf00      	nop
 800497c:	41700000 	.word	0x41700000
 8004980:	08005660 	.word	0x08005660
 8004984:	00000000 	.word	0x00000000

08004988 <__kernel_cos>:
 8004988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800498c:	ec57 6b10 	vmov	r6, r7, d0
 8004990:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004994:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004998:	ed8d 1b00 	vstr	d1, [sp]
 800499c:	da07      	bge.n	80049ae <__kernel_cos+0x26>
 800499e:	ee10 0a10 	vmov	r0, s0
 80049a2:	4639      	mov	r1, r7
 80049a4:	f7fc f866 	bl	8000a74 <__aeabi_d2iz>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	f000 8088 	beq.w	8004abe <__kernel_cos+0x136>
 80049ae:	4632      	mov	r2, r6
 80049b0:	463b      	mov	r3, r7
 80049b2:	4630      	mov	r0, r6
 80049b4:	4639      	mov	r1, r7
 80049b6:	f7fb fdc3 	bl	8000540 <__aeabi_dmul>
 80049ba:	4b51      	ldr	r3, [pc, #324]	; (8004b00 <__kernel_cos+0x178>)
 80049bc:	2200      	movs	r2, #0
 80049be:	4604      	mov	r4, r0
 80049c0:	460d      	mov	r5, r1
 80049c2:	f7fb fdbd 	bl	8000540 <__aeabi_dmul>
 80049c6:	a340      	add	r3, pc, #256	; (adr r3, 8004ac8 <__kernel_cos+0x140>)
 80049c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049cc:	4682      	mov	sl, r0
 80049ce:	468b      	mov	fp, r1
 80049d0:	4620      	mov	r0, r4
 80049d2:	4629      	mov	r1, r5
 80049d4:	f7fb fdb4 	bl	8000540 <__aeabi_dmul>
 80049d8:	a33d      	add	r3, pc, #244	; (adr r3, 8004ad0 <__kernel_cos+0x148>)
 80049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049de:	f7fb fbf9 	bl	80001d4 <__adddf3>
 80049e2:	4622      	mov	r2, r4
 80049e4:	462b      	mov	r3, r5
 80049e6:	f7fb fdab 	bl	8000540 <__aeabi_dmul>
 80049ea:	a33b      	add	r3, pc, #236	; (adr r3, 8004ad8 <__kernel_cos+0x150>)
 80049ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f0:	f7fb fbee 	bl	80001d0 <__aeabi_dsub>
 80049f4:	4622      	mov	r2, r4
 80049f6:	462b      	mov	r3, r5
 80049f8:	f7fb fda2 	bl	8000540 <__aeabi_dmul>
 80049fc:	a338      	add	r3, pc, #224	; (adr r3, 8004ae0 <__kernel_cos+0x158>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f7fb fbe7 	bl	80001d4 <__adddf3>
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
 8004a0a:	f7fb fd99 	bl	8000540 <__aeabi_dmul>
 8004a0e:	a336      	add	r3, pc, #216	; (adr r3, 8004ae8 <__kernel_cos+0x160>)
 8004a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a14:	f7fb fbdc 	bl	80001d0 <__aeabi_dsub>
 8004a18:	4622      	mov	r2, r4
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	f7fb fd90 	bl	8000540 <__aeabi_dmul>
 8004a20:	a333      	add	r3, pc, #204	; (adr r3, 8004af0 <__kernel_cos+0x168>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f7fb fbd5 	bl	80001d4 <__adddf3>
 8004a2a:	4622      	mov	r2, r4
 8004a2c:	462b      	mov	r3, r5
 8004a2e:	f7fb fd87 	bl	8000540 <__aeabi_dmul>
 8004a32:	4622      	mov	r2, r4
 8004a34:	462b      	mov	r3, r5
 8004a36:	f7fb fd83 	bl	8000540 <__aeabi_dmul>
 8004a3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a3e:	4604      	mov	r4, r0
 8004a40:	460d      	mov	r5, r1
 8004a42:	4630      	mov	r0, r6
 8004a44:	4639      	mov	r1, r7
 8004a46:	f7fb fd7b 	bl	8000540 <__aeabi_dmul>
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	4629      	mov	r1, r5
 8004a50:	4620      	mov	r0, r4
 8004a52:	f7fb fbbd 	bl	80001d0 <__aeabi_dsub>
 8004a56:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <__kernel_cos+0x17c>)
 8004a58:	4598      	cmp	r8, r3
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	460f      	mov	r7, r1
 8004a5e:	dc10      	bgt.n	8004a82 <__kernel_cos+0xfa>
 8004a60:	4602      	mov	r2, r0
 8004a62:	460b      	mov	r3, r1
 8004a64:	4650      	mov	r0, sl
 8004a66:	4659      	mov	r1, fp
 8004a68:	f7fb fbb2 	bl	80001d0 <__aeabi_dsub>
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4926      	ldr	r1, [pc, #152]	; (8004b08 <__kernel_cos+0x180>)
 8004a70:	4602      	mov	r2, r0
 8004a72:	2000      	movs	r0, #0
 8004a74:	f7fb fbac 	bl	80001d0 <__aeabi_dsub>
 8004a78:	ec41 0b10 	vmov	d0, r0, r1
 8004a7c:	b003      	add	sp, #12
 8004a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a82:	4b22      	ldr	r3, [pc, #136]	; (8004b0c <__kernel_cos+0x184>)
 8004a84:	4920      	ldr	r1, [pc, #128]	; (8004b08 <__kernel_cos+0x180>)
 8004a86:	4598      	cmp	r8, r3
 8004a88:	bfcc      	ite	gt
 8004a8a:	4d21      	ldrgt	r5, [pc, #132]	; (8004b10 <__kernel_cos+0x188>)
 8004a8c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004a90:	2400      	movs	r4, #0
 8004a92:	4622      	mov	r2, r4
 8004a94:	462b      	mov	r3, r5
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7fb fb9a 	bl	80001d0 <__aeabi_dsub>
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	4680      	mov	r8, r0
 8004aa0:	4689      	mov	r9, r1
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	4650      	mov	r0, sl
 8004aa6:	4659      	mov	r1, fp
 8004aa8:	f7fb fb92 	bl	80001d0 <__aeabi_dsub>
 8004aac:	4632      	mov	r2, r6
 8004aae:	463b      	mov	r3, r7
 8004ab0:	f7fb fb8e 	bl	80001d0 <__aeabi_dsub>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4640      	mov	r0, r8
 8004aba:	4649      	mov	r1, r9
 8004abc:	e7da      	b.n	8004a74 <__kernel_cos+0xec>
 8004abe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004af8 <__kernel_cos+0x170>
 8004ac2:	e7db      	b.n	8004a7c <__kernel_cos+0xf4>
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	be8838d4 	.word	0xbe8838d4
 8004acc:	bda8fae9 	.word	0xbda8fae9
 8004ad0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004ad4:	3e21ee9e 	.word	0x3e21ee9e
 8004ad8:	809c52ad 	.word	0x809c52ad
 8004adc:	3e927e4f 	.word	0x3e927e4f
 8004ae0:	19cb1590 	.word	0x19cb1590
 8004ae4:	3efa01a0 	.word	0x3efa01a0
 8004ae8:	16c15177 	.word	0x16c15177
 8004aec:	3f56c16c 	.word	0x3f56c16c
 8004af0:	5555554c 	.word	0x5555554c
 8004af4:	3fa55555 	.word	0x3fa55555
 8004af8:	00000000 	.word	0x00000000
 8004afc:	3ff00000 	.word	0x3ff00000
 8004b00:	3fe00000 	.word	0x3fe00000
 8004b04:	3fd33332 	.word	0x3fd33332
 8004b08:	3ff00000 	.word	0x3ff00000
 8004b0c:	3fe90000 	.word	0x3fe90000
 8004b10:	3fd20000 	.word	0x3fd20000
 8004b14:	00000000 	.word	0x00000000

08004b18 <__kernel_rem_pio2>:
 8004b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b1c:	ed2d 8b02 	vpush	{d8}
 8004b20:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004b24:	f112 0f14 	cmn.w	r2, #20
 8004b28:	9308      	str	r3, [sp, #32]
 8004b2a:	9101      	str	r1, [sp, #4]
 8004b2c:	4bc6      	ldr	r3, [pc, #792]	; (8004e48 <__kernel_rem_pio2+0x330>)
 8004b2e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004b30:	9009      	str	r0, [sp, #36]	; 0x24
 8004b32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004b36:	9304      	str	r3, [sp, #16]
 8004b38:	9b08      	ldr	r3, [sp, #32]
 8004b3a:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b3e:	bfa8      	it	ge
 8004b40:	1ed4      	subge	r4, r2, #3
 8004b42:	9306      	str	r3, [sp, #24]
 8004b44:	bfb2      	itee	lt
 8004b46:	2400      	movlt	r4, #0
 8004b48:	2318      	movge	r3, #24
 8004b4a:	fb94 f4f3 	sdivge	r4, r4, r3
 8004b4e:	f06f 0317 	mvn.w	r3, #23
 8004b52:	fb04 3303 	mla	r3, r4, r3, r3
 8004b56:	eb03 0a02 	add.w	sl, r3, r2
 8004b5a:	9b04      	ldr	r3, [sp, #16]
 8004b5c:	9a06      	ldr	r2, [sp, #24]
 8004b5e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004e38 <__kernel_rem_pio2+0x320>
 8004b62:	eb03 0802 	add.w	r8, r3, r2
 8004b66:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004b68:	1aa7      	subs	r7, r4, r2
 8004b6a:	ae20      	add	r6, sp, #128	; 0x80
 8004b6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004b70:	2500      	movs	r5, #0
 8004b72:	4545      	cmp	r5, r8
 8004b74:	dd18      	ble.n	8004ba8 <__kernel_rem_pio2+0x90>
 8004b76:	9b08      	ldr	r3, [sp, #32]
 8004b78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004b7c:	aa20      	add	r2, sp, #128	; 0x80
 8004b7e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8004e38 <__kernel_rem_pio2+0x320>
 8004b82:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004b86:	f1c3 0301 	rsb	r3, r3, #1
 8004b8a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004b8e:	9307      	str	r3, [sp, #28]
 8004b90:	9b07      	ldr	r3, [sp, #28]
 8004b92:	9a04      	ldr	r2, [sp, #16]
 8004b94:	4443      	add	r3, r8
 8004b96:	429a      	cmp	r2, r3
 8004b98:	db2f      	blt.n	8004bfa <__kernel_rem_pio2+0xe2>
 8004b9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004b9e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004ba2:	462f      	mov	r7, r5
 8004ba4:	2600      	movs	r6, #0
 8004ba6:	e01b      	b.n	8004be0 <__kernel_rem_pio2+0xc8>
 8004ba8:	42ef      	cmn	r7, r5
 8004baa:	d407      	bmi.n	8004bbc <__kernel_rem_pio2+0xa4>
 8004bac:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004bb0:	f7fb fc5c 	bl	800046c <__aeabi_i2d>
 8004bb4:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004bb8:	3501      	adds	r5, #1
 8004bba:	e7da      	b.n	8004b72 <__kernel_rem_pio2+0x5a>
 8004bbc:	ec51 0b18 	vmov	r0, r1, d8
 8004bc0:	e7f8      	b.n	8004bb4 <__kernel_rem_pio2+0x9c>
 8004bc2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bc6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004bca:	f7fb fcb9 	bl	8000540 <__aeabi_dmul>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bd6:	f7fb fafd 	bl	80001d4 <__adddf3>
 8004bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bde:	3601      	adds	r6, #1
 8004be0:	9b06      	ldr	r3, [sp, #24]
 8004be2:	429e      	cmp	r6, r3
 8004be4:	f1a7 0708 	sub.w	r7, r7, #8
 8004be8:	ddeb      	ble.n	8004bc2 <__kernel_rem_pio2+0xaa>
 8004bea:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004bee:	3508      	adds	r5, #8
 8004bf0:	ecab 7b02 	vstmia	fp!, {d7}
 8004bf4:	f108 0801 	add.w	r8, r8, #1
 8004bf8:	e7ca      	b.n	8004b90 <__kernel_rem_pio2+0x78>
 8004bfa:	9b04      	ldr	r3, [sp, #16]
 8004bfc:	aa0c      	add	r2, sp, #48	; 0x30
 8004bfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004c02:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c04:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004c06:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004c0a:	9c04      	ldr	r4, [sp, #16]
 8004c0c:	930a      	str	r3, [sp, #40]	; 0x28
 8004c0e:	ab98      	add	r3, sp, #608	; 0x260
 8004c10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c14:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004c18:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004c1c:	f8cd b008 	str.w	fp, [sp, #8]
 8004c20:	4625      	mov	r5, r4
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	dc78      	bgt.n	8004d18 <__kernel_rem_pio2+0x200>
 8004c26:	ec47 6b10 	vmov	d0, r6, r7
 8004c2a:	4650      	mov	r0, sl
 8004c2c:	f000 fbfc 	bl	8005428 <scalbn>
 8004c30:	ec57 6b10 	vmov	r6, r7, d0
 8004c34:	2200      	movs	r2, #0
 8004c36:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004c3a:	ee10 0a10 	vmov	r0, s0
 8004c3e:	4639      	mov	r1, r7
 8004c40:	f7fb fc7e 	bl	8000540 <__aeabi_dmul>
 8004c44:	ec41 0b10 	vmov	d0, r0, r1
 8004c48:	f000 fb6e 	bl	8005328 <floor>
 8004c4c:	4b7f      	ldr	r3, [pc, #508]	; (8004e4c <__kernel_rem_pio2+0x334>)
 8004c4e:	ec51 0b10 	vmov	r0, r1, d0
 8004c52:	2200      	movs	r2, #0
 8004c54:	f7fb fc74 	bl	8000540 <__aeabi_dmul>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	4639      	mov	r1, r7
 8004c60:	f7fb fab6 	bl	80001d0 <__aeabi_dsub>
 8004c64:	460f      	mov	r7, r1
 8004c66:	4606      	mov	r6, r0
 8004c68:	f7fb ff04 	bl	8000a74 <__aeabi_d2iz>
 8004c6c:	9007      	str	r0, [sp, #28]
 8004c6e:	f7fb fbfd 	bl	800046c <__aeabi_i2d>
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4630      	mov	r0, r6
 8004c78:	4639      	mov	r1, r7
 8004c7a:	f7fb faa9 	bl	80001d0 <__aeabi_dsub>
 8004c7e:	f1ba 0f00 	cmp.w	sl, #0
 8004c82:	4606      	mov	r6, r0
 8004c84:	460f      	mov	r7, r1
 8004c86:	dd70      	ble.n	8004d6a <__kernel_rem_pio2+0x252>
 8004c88:	1e62      	subs	r2, r4, #1
 8004c8a:	ab0c      	add	r3, sp, #48	; 0x30
 8004c8c:	9d07      	ldr	r5, [sp, #28]
 8004c8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004c92:	f1ca 0118 	rsb	r1, sl, #24
 8004c96:	fa40 f301 	asr.w	r3, r0, r1
 8004c9a:	441d      	add	r5, r3
 8004c9c:	408b      	lsls	r3, r1
 8004c9e:	1ac0      	subs	r0, r0, r3
 8004ca0:	ab0c      	add	r3, sp, #48	; 0x30
 8004ca2:	9507      	str	r5, [sp, #28]
 8004ca4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004ca8:	f1ca 0317 	rsb	r3, sl, #23
 8004cac:	fa40 f303 	asr.w	r3, r0, r3
 8004cb0:	9302      	str	r3, [sp, #8]
 8004cb2:	9b02      	ldr	r3, [sp, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	dd66      	ble.n	8004d86 <__kernel_rem_pio2+0x26e>
 8004cb8:	9b07      	ldr	r3, [sp, #28]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	9307      	str	r3, [sp, #28]
 8004cc0:	4615      	mov	r5, r2
 8004cc2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004cc6:	4294      	cmp	r4, r2
 8004cc8:	f300 8099 	bgt.w	8004dfe <__kernel_rem_pio2+0x2e6>
 8004ccc:	f1ba 0f00 	cmp.w	sl, #0
 8004cd0:	dd07      	ble.n	8004ce2 <__kernel_rem_pio2+0x1ca>
 8004cd2:	f1ba 0f01 	cmp.w	sl, #1
 8004cd6:	f000 80a5 	beq.w	8004e24 <__kernel_rem_pio2+0x30c>
 8004cda:	f1ba 0f02 	cmp.w	sl, #2
 8004cde:	f000 80c1 	beq.w	8004e64 <__kernel_rem_pio2+0x34c>
 8004ce2:	9b02      	ldr	r3, [sp, #8]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d14e      	bne.n	8004d86 <__kernel_rem_pio2+0x26e>
 8004ce8:	4632      	mov	r2, r6
 8004cea:	463b      	mov	r3, r7
 8004cec:	4958      	ldr	r1, [pc, #352]	; (8004e50 <__kernel_rem_pio2+0x338>)
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fb fa6e 	bl	80001d0 <__aeabi_dsub>
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	460f      	mov	r7, r1
 8004cf8:	2d00      	cmp	r5, #0
 8004cfa:	d044      	beq.n	8004d86 <__kernel_rem_pio2+0x26e>
 8004cfc:	4650      	mov	r0, sl
 8004cfe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004e40 <__kernel_rem_pio2+0x328>
 8004d02:	f000 fb91 	bl	8005428 <scalbn>
 8004d06:	4630      	mov	r0, r6
 8004d08:	4639      	mov	r1, r7
 8004d0a:	ec53 2b10 	vmov	r2, r3, d0
 8004d0e:	f7fb fa5f 	bl	80001d0 <__aeabi_dsub>
 8004d12:	4606      	mov	r6, r0
 8004d14:	460f      	mov	r7, r1
 8004d16:	e036      	b.n	8004d86 <__kernel_rem_pio2+0x26e>
 8004d18:	4b4e      	ldr	r3, [pc, #312]	; (8004e54 <__kernel_rem_pio2+0x33c>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	4639      	mov	r1, r7
 8004d20:	f7fb fc0e 	bl	8000540 <__aeabi_dmul>
 8004d24:	f7fb fea6 	bl	8000a74 <__aeabi_d2iz>
 8004d28:	f7fb fba0 	bl	800046c <__aeabi_i2d>
 8004d2c:	4b4a      	ldr	r3, [pc, #296]	; (8004e58 <__kernel_rem_pio2+0x340>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	4680      	mov	r8, r0
 8004d32:	4689      	mov	r9, r1
 8004d34:	f7fb fc04 	bl	8000540 <__aeabi_dmul>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	4639      	mov	r1, r7
 8004d40:	f7fb fa46 	bl	80001d0 <__aeabi_dsub>
 8004d44:	f7fb fe96 	bl	8000a74 <__aeabi_d2iz>
 8004d48:	9b02      	ldr	r3, [sp, #8]
 8004d4a:	f843 0b04 	str.w	r0, [r3], #4
 8004d4e:	3d01      	subs	r5, #1
 8004d50:	9302      	str	r3, [sp, #8]
 8004d52:	ab70      	add	r3, sp, #448	; 0x1c0
 8004d54:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	4640      	mov	r0, r8
 8004d5e:	4649      	mov	r1, r9
 8004d60:	f7fb fa38 	bl	80001d4 <__adddf3>
 8004d64:	4606      	mov	r6, r0
 8004d66:	460f      	mov	r7, r1
 8004d68:	e75b      	b.n	8004c22 <__kernel_rem_pio2+0x10a>
 8004d6a:	d105      	bne.n	8004d78 <__kernel_rem_pio2+0x260>
 8004d6c:	1e63      	subs	r3, r4, #1
 8004d6e:	aa0c      	add	r2, sp, #48	; 0x30
 8004d70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d74:	15c3      	asrs	r3, r0, #23
 8004d76:	e79b      	b.n	8004cb0 <__kernel_rem_pio2+0x198>
 8004d78:	4b38      	ldr	r3, [pc, #224]	; (8004e5c <__kernel_rem_pio2+0x344>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f7fb fe66 	bl	8000a4c <__aeabi_dcmpge>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d139      	bne.n	8004df8 <__kernel_rem_pio2+0x2e0>
 8004d84:	9002      	str	r0, [sp, #8]
 8004d86:	2200      	movs	r2, #0
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	4639      	mov	r1, r7
 8004d8e:	f7fb fe3f 	bl	8000a10 <__aeabi_dcmpeq>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	f000 80b4 	beq.w	8004f00 <__kernel_rem_pio2+0x3e8>
 8004d98:	f104 3bff 	add.w	fp, r4, #4294967295
 8004d9c:	465b      	mov	r3, fp
 8004d9e:	2200      	movs	r2, #0
 8004da0:	9904      	ldr	r1, [sp, #16]
 8004da2:	428b      	cmp	r3, r1
 8004da4:	da65      	bge.n	8004e72 <__kernel_rem_pio2+0x35a>
 8004da6:	2a00      	cmp	r2, #0
 8004da8:	d07b      	beq.n	8004ea2 <__kernel_rem_pio2+0x38a>
 8004daa:	ab0c      	add	r3, sp, #48	; 0x30
 8004dac:	f1aa 0a18 	sub.w	sl, sl, #24
 8004db0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80a0 	beq.w	8004efa <__kernel_rem_pio2+0x3e2>
 8004dba:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8004e40 <__kernel_rem_pio2+0x328>
 8004dbe:	4650      	mov	r0, sl
 8004dc0:	f000 fb32 	bl	8005428 <scalbn>
 8004dc4:	4f23      	ldr	r7, [pc, #140]	; (8004e54 <__kernel_rem_pio2+0x33c>)
 8004dc6:	ec55 4b10 	vmov	r4, r5, d0
 8004dca:	46d8      	mov	r8, fp
 8004dcc:	2600      	movs	r6, #0
 8004dce:	f1b8 0f00 	cmp.w	r8, #0
 8004dd2:	f280 80cf 	bge.w	8004f74 <__kernel_rem_pio2+0x45c>
 8004dd6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8004e38 <__kernel_rem_pio2+0x320>
 8004dda:	465f      	mov	r7, fp
 8004ddc:	f04f 0800 	mov.w	r8, #0
 8004de0:	2f00      	cmp	r7, #0
 8004de2:	f2c0 80fd 	blt.w	8004fe0 <__kernel_rem_pio2+0x4c8>
 8004de6:	ab70      	add	r3, sp, #448	; 0x1c0
 8004de8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004e60 <__kernel_rem_pio2+0x348>
 8004dec:	ec55 4b18 	vmov	r4, r5, d8
 8004df0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8004df4:	2600      	movs	r6, #0
 8004df6:	e0e5      	b.n	8004fc4 <__kernel_rem_pio2+0x4ac>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	9302      	str	r3, [sp, #8]
 8004dfc:	e75c      	b.n	8004cb8 <__kernel_rem_pio2+0x1a0>
 8004dfe:	f8db 3000 	ldr.w	r3, [fp]
 8004e02:	b955      	cbnz	r5, 8004e1a <__kernel_rem_pio2+0x302>
 8004e04:	b123      	cbz	r3, 8004e10 <__kernel_rem_pio2+0x2f8>
 8004e06:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004e0a:	f8cb 3000 	str.w	r3, [fp]
 8004e0e:	2301      	movs	r3, #1
 8004e10:	3201      	adds	r2, #1
 8004e12:	f10b 0b04 	add.w	fp, fp, #4
 8004e16:	461d      	mov	r5, r3
 8004e18:	e755      	b.n	8004cc6 <__kernel_rem_pio2+0x1ae>
 8004e1a:	1acb      	subs	r3, r1, r3
 8004e1c:	f8cb 3000 	str.w	r3, [fp]
 8004e20:	462b      	mov	r3, r5
 8004e22:	e7f5      	b.n	8004e10 <__kernel_rem_pio2+0x2f8>
 8004e24:	1e62      	subs	r2, r4, #1
 8004e26:	ab0c      	add	r3, sp, #48	; 0x30
 8004e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004e30:	a90c      	add	r1, sp, #48	; 0x30
 8004e32:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004e36:	e754      	b.n	8004ce2 <__kernel_rem_pio2+0x1ca>
	...
 8004e44:	3ff00000 	.word	0x3ff00000
 8004e48:	080057a8 	.word	0x080057a8
 8004e4c:	40200000 	.word	0x40200000
 8004e50:	3ff00000 	.word	0x3ff00000
 8004e54:	3e700000 	.word	0x3e700000
 8004e58:	41700000 	.word	0x41700000
 8004e5c:	3fe00000 	.word	0x3fe00000
 8004e60:	08005768 	.word	0x08005768
 8004e64:	1e62      	subs	r2, r4, #1
 8004e66:	ab0c      	add	r3, sp, #48	; 0x30
 8004e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e70:	e7de      	b.n	8004e30 <__kernel_rem_pio2+0x318>
 8004e72:	a90c      	add	r1, sp, #48	; 0x30
 8004e74:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	e790      	b.n	8004da0 <__kernel_rem_pio2+0x288>
 8004e7e:	3301      	adds	r3, #1
 8004e80:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004e84:	2900      	cmp	r1, #0
 8004e86:	d0fa      	beq.n	8004e7e <__kernel_rem_pio2+0x366>
 8004e88:	9a08      	ldr	r2, [sp, #32]
 8004e8a:	18e3      	adds	r3, r4, r3
 8004e8c:	18a6      	adds	r6, r4, r2
 8004e8e:	aa20      	add	r2, sp, #128	; 0x80
 8004e90:	1c65      	adds	r5, r4, #1
 8004e92:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004e96:	9302      	str	r3, [sp, #8]
 8004e98:	9b02      	ldr	r3, [sp, #8]
 8004e9a:	42ab      	cmp	r3, r5
 8004e9c:	da04      	bge.n	8004ea8 <__kernel_rem_pio2+0x390>
 8004e9e:	461c      	mov	r4, r3
 8004ea0:	e6b5      	b.n	8004c0e <__kernel_rem_pio2+0xf6>
 8004ea2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e7eb      	b.n	8004e80 <__kernel_rem_pio2+0x368>
 8004ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004eae:	f7fb fadd 	bl	800046c <__aeabi_i2d>
 8004eb2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004eb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb8:	46b3      	mov	fp, r6
 8004eba:	461c      	mov	r4, r3
 8004ebc:	2700      	movs	r7, #0
 8004ebe:	f04f 0800 	mov.w	r8, #0
 8004ec2:	f04f 0900 	mov.w	r9, #0
 8004ec6:	9b06      	ldr	r3, [sp, #24]
 8004ec8:	429f      	cmp	r7, r3
 8004eca:	dd06      	ble.n	8004eda <__kernel_rem_pio2+0x3c2>
 8004ecc:	ab70      	add	r3, sp, #448	; 0x1c0
 8004ece:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004ed2:	e9c3 8900 	strd	r8, r9, [r3]
 8004ed6:	3501      	adds	r5, #1
 8004ed8:	e7de      	b.n	8004e98 <__kernel_rem_pio2+0x380>
 8004eda:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004ede:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004ee2:	f7fb fb2d 	bl	8000540 <__aeabi_dmul>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4640      	mov	r0, r8
 8004eec:	4649      	mov	r1, r9
 8004eee:	f7fb f971 	bl	80001d4 <__adddf3>
 8004ef2:	3701      	adds	r7, #1
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	4689      	mov	r9, r1
 8004ef8:	e7e5      	b.n	8004ec6 <__kernel_rem_pio2+0x3ae>
 8004efa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004efe:	e754      	b.n	8004daa <__kernel_rem_pio2+0x292>
 8004f00:	ec47 6b10 	vmov	d0, r6, r7
 8004f04:	f1ca 0000 	rsb	r0, sl, #0
 8004f08:	f000 fa8e 	bl	8005428 <scalbn>
 8004f0c:	ec57 6b10 	vmov	r6, r7, d0
 8004f10:	4b9f      	ldr	r3, [pc, #636]	; (8005190 <__kernel_rem_pio2+0x678>)
 8004f12:	ee10 0a10 	vmov	r0, s0
 8004f16:	2200      	movs	r2, #0
 8004f18:	4639      	mov	r1, r7
 8004f1a:	f7fb fd97 	bl	8000a4c <__aeabi_dcmpge>
 8004f1e:	b300      	cbz	r0, 8004f62 <__kernel_rem_pio2+0x44a>
 8004f20:	4b9c      	ldr	r3, [pc, #624]	; (8005194 <__kernel_rem_pio2+0x67c>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	4630      	mov	r0, r6
 8004f26:	4639      	mov	r1, r7
 8004f28:	f7fb fb0a 	bl	8000540 <__aeabi_dmul>
 8004f2c:	f7fb fda2 	bl	8000a74 <__aeabi_d2iz>
 8004f30:	4605      	mov	r5, r0
 8004f32:	f7fb fa9b 	bl	800046c <__aeabi_i2d>
 8004f36:	4b96      	ldr	r3, [pc, #600]	; (8005190 <__kernel_rem_pio2+0x678>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f7fb fb01 	bl	8000540 <__aeabi_dmul>
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4602      	mov	r2, r0
 8004f42:	4639      	mov	r1, r7
 8004f44:	4630      	mov	r0, r6
 8004f46:	f7fb f943 	bl	80001d0 <__aeabi_dsub>
 8004f4a:	f7fb fd93 	bl	8000a74 <__aeabi_d2iz>
 8004f4e:	f104 0b01 	add.w	fp, r4, #1
 8004f52:	ab0c      	add	r3, sp, #48	; 0x30
 8004f54:	f10a 0a18 	add.w	sl, sl, #24
 8004f58:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004f5c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8004f60:	e72b      	b.n	8004dba <__kernel_rem_pio2+0x2a2>
 8004f62:	4630      	mov	r0, r6
 8004f64:	4639      	mov	r1, r7
 8004f66:	f7fb fd85 	bl	8000a74 <__aeabi_d2iz>
 8004f6a:	ab0c      	add	r3, sp, #48	; 0x30
 8004f6c:	46a3      	mov	fp, r4
 8004f6e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004f72:	e722      	b.n	8004dba <__kernel_rem_pio2+0x2a2>
 8004f74:	ab70      	add	r3, sp, #448	; 0x1c0
 8004f76:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8004f7a:	ab0c      	add	r3, sp, #48	; 0x30
 8004f7c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004f80:	f7fb fa74 	bl	800046c <__aeabi_i2d>
 8004f84:	4622      	mov	r2, r4
 8004f86:	462b      	mov	r3, r5
 8004f88:	f7fb fada 	bl	8000540 <__aeabi_dmul>
 8004f8c:	4632      	mov	r2, r6
 8004f8e:	e9c9 0100 	strd	r0, r1, [r9]
 8004f92:	463b      	mov	r3, r7
 8004f94:	4620      	mov	r0, r4
 8004f96:	4629      	mov	r1, r5
 8004f98:	f7fb fad2 	bl	8000540 <__aeabi_dmul>
 8004f9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004fa0:	4604      	mov	r4, r0
 8004fa2:	460d      	mov	r5, r1
 8004fa4:	e713      	b.n	8004dce <__kernel_rem_pio2+0x2b6>
 8004fa6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004faa:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004fae:	f7fb fac7 	bl	8000540 <__aeabi_dmul>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	4629      	mov	r1, r5
 8004fba:	f7fb f90b 	bl	80001d4 <__adddf3>
 8004fbe:	3601      	adds	r6, #1
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	460d      	mov	r5, r1
 8004fc4:	9b04      	ldr	r3, [sp, #16]
 8004fc6:	429e      	cmp	r6, r3
 8004fc8:	dc01      	bgt.n	8004fce <__kernel_rem_pio2+0x4b6>
 8004fca:	45b0      	cmp	r8, r6
 8004fcc:	daeb      	bge.n	8004fa6 <__kernel_rem_pio2+0x48e>
 8004fce:	ab48      	add	r3, sp, #288	; 0x120
 8004fd0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004fd4:	e9c3 4500 	strd	r4, r5, [r3]
 8004fd8:	3f01      	subs	r7, #1
 8004fda:	f108 0801 	add.w	r8, r8, #1
 8004fde:	e6ff      	b.n	8004de0 <__kernel_rem_pio2+0x2c8>
 8004fe0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	dc0b      	bgt.n	8004ffe <__kernel_rem_pio2+0x4e6>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	dc6e      	bgt.n	80050c8 <__kernel_rem_pio2+0x5b0>
 8004fea:	d045      	beq.n	8005078 <__kernel_rem_pio2+0x560>
 8004fec:	9b07      	ldr	r3, [sp, #28]
 8004fee:	f003 0007 	and.w	r0, r3, #7
 8004ff2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004ff6:	ecbd 8b02 	vpop	{d8}
 8004ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005000:	2b03      	cmp	r3, #3
 8005002:	d1f3      	bne.n	8004fec <__kernel_rem_pio2+0x4d4>
 8005004:	ab48      	add	r3, sp, #288	; 0x120
 8005006:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800500a:	46d0      	mov	r8, sl
 800500c:	46d9      	mov	r9, fp
 800500e:	f1b9 0f00 	cmp.w	r9, #0
 8005012:	f1a8 0808 	sub.w	r8, r8, #8
 8005016:	dc64      	bgt.n	80050e2 <__kernel_rem_pio2+0x5ca>
 8005018:	465c      	mov	r4, fp
 800501a:	2c01      	cmp	r4, #1
 800501c:	f1aa 0a08 	sub.w	sl, sl, #8
 8005020:	dc7e      	bgt.n	8005120 <__kernel_rem_pio2+0x608>
 8005022:	2000      	movs	r0, #0
 8005024:	2100      	movs	r1, #0
 8005026:	f1bb 0f01 	cmp.w	fp, #1
 800502a:	f300 8097 	bgt.w	800515c <__kernel_rem_pio2+0x644>
 800502e:	9b02      	ldr	r3, [sp, #8]
 8005030:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8005034:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005038:	2b00      	cmp	r3, #0
 800503a:	f040 8099 	bne.w	8005170 <__kernel_rem_pio2+0x658>
 800503e:	9b01      	ldr	r3, [sp, #4]
 8005040:	e9c3 5600 	strd	r5, r6, [r3]
 8005044:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005048:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800504c:	e7ce      	b.n	8004fec <__kernel_rem_pio2+0x4d4>
 800504e:	ab48      	add	r3, sp, #288	; 0x120
 8005050:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f7fb f8bc 	bl	80001d4 <__adddf3>
 800505c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005060:	f1bb 0f00 	cmp.w	fp, #0
 8005064:	daf3      	bge.n	800504e <__kernel_rem_pio2+0x536>
 8005066:	9b02      	ldr	r3, [sp, #8]
 8005068:	b113      	cbz	r3, 8005070 <__kernel_rem_pio2+0x558>
 800506a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800506e:	4619      	mov	r1, r3
 8005070:	9b01      	ldr	r3, [sp, #4]
 8005072:	e9c3 0100 	strd	r0, r1, [r3]
 8005076:	e7b9      	b.n	8004fec <__kernel_rem_pio2+0x4d4>
 8005078:	2000      	movs	r0, #0
 800507a:	2100      	movs	r1, #0
 800507c:	e7f0      	b.n	8005060 <__kernel_rem_pio2+0x548>
 800507e:	ab48      	add	r3, sp, #288	; 0x120
 8005080:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fb f8a4 	bl	80001d4 <__adddf3>
 800508c:	3c01      	subs	r4, #1
 800508e:	2c00      	cmp	r4, #0
 8005090:	daf5      	bge.n	800507e <__kernel_rem_pio2+0x566>
 8005092:	9b02      	ldr	r3, [sp, #8]
 8005094:	b1e3      	cbz	r3, 80050d0 <__kernel_rem_pio2+0x5b8>
 8005096:	4602      	mov	r2, r0
 8005098:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800509c:	9c01      	ldr	r4, [sp, #4]
 800509e:	e9c4 2300 	strd	r2, r3, [r4]
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80050aa:	f7fb f891 	bl	80001d0 <__aeabi_dsub>
 80050ae:	ad4a      	add	r5, sp, #296	; 0x128
 80050b0:	2401      	movs	r4, #1
 80050b2:	45a3      	cmp	fp, r4
 80050b4:	da0f      	bge.n	80050d6 <__kernel_rem_pio2+0x5be>
 80050b6:	9b02      	ldr	r3, [sp, #8]
 80050b8:	b113      	cbz	r3, 80050c0 <__kernel_rem_pio2+0x5a8>
 80050ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050be:	4619      	mov	r1, r3
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80050c6:	e791      	b.n	8004fec <__kernel_rem_pio2+0x4d4>
 80050c8:	465c      	mov	r4, fp
 80050ca:	2000      	movs	r0, #0
 80050cc:	2100      	movs	r1, #0
 80050ce:	e7de      	b.n	800508e <__kernel_rem_pio2+0x576>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	e7e2      	b.n	800509c <__kernel_rem_pio2+0x584>
 80050d6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80050da:	f7fb f87b 	bl	80001d4 <__adddf3>
 80050de:	3401      	adds	r4, #1
 80050e0:	e7e7      	b.n	80050b2 <__kernel_rem_pio2+0x59a>
 80050e2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80050e6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80050ea:	4620      	mov	r0, r4
 80050ec:	4632      	mov	r2, r6
 80050ee:	463b      	mov	r3, r7
 80050f0:	4629      	mov	r1, r5
 80050f2:	f7fb f86f 	bl	80001d4 <__adddf3>
 80050f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	f7fb f865 	bl	80001d0 <__aeabi_dsub>
 8005106:	4632      	mov	r2, r6
 8005108:	463b      	mov	r3, r7
 800510a:	f7fb f863 	bl	80001d4 <__adddf3>
 800510e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005112:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8005116:	ed88 7b00 	vstr	d7, [r8]
 800511a:	f109 39ff 	add.w	r9, r9, #4294967295
 800511e:	e776      	b.n	800500e <__kernel_rem_pio2+0x4f6>
 8005120:	e9da 8900 	ldrd	r8, r9, [sl]
 8005124:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005128:	4640      	mov	r0, r8
 800512a:	4632      	mov	r2, r6
 800512c:	463b      	mov	r3, r7
 800512e:	4649      	mov	r1, r9
 8005130:	f7fb f850 	bl	80001d4 <__adddf3>
 8005134:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4640      	mov	r0, r8
 800513e:	4649      	mov	r1, r9
 8005140:	f7fb f846 	bl	80001d0 <__aeabi_dsub>
 8005144:	4632      	mov	r2, r6
 8005146:	463b      	mov	r3, r7
 8005148:	f7fb f844 	bl	80001d4 <__adddf3>
 800514c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005150:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005154:	ed8a 7b00 	vstr	d7, [sl]
 8005158:	3c01      	subs	r4, #1
 800515a:	e75e      	b.n	800501a <__kernel_rem_pio2+0x502>
 800515c:	ab48      	add	r3, sp, #288	; 0x120
 800515e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005166:	f7fb f835 	bl	80001d4 <__adddf3>
 800516a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800516e:	e75a      	b.n	8005026 <__kernel_rem_pio2+0x50e>
 8005170:	9b01      	ldr	r3, [sp, #4]
 8005172:	9a01      	ldr	r2, [sp, #4]
 8005174:	601d      	str	r5, [r3, #0]
 8005176:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800517a:	605c      	str	r4, [r3, #4]
 800517c:	609f      	str	r7, [r3, #8]
 800517e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005182:	60d3      	str	r3, [r2, #12]
 8005184:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005188:	6110      	str	r0, [r2, #16]
 800518a:	6153      	str	r3, [r2, #20]
 800518c:	e72e      	b.n	8004fec <__kernel_rem_pio2+0x4d4>
 800518e:	bf00      	nop
 8005190:	41700000 	.word	0x41700000
 8005194:	3e700000 	.word	0x3e700000

08005198 <__kernel_sin>:
 8005198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519c:	ed2d 8b04 	vpush	{d8-d9}
 80051a0:	eeb0 8a41 	vmov.f32	s16, s2
 80051a4:	eef0 8a61 	vmov.f32	s17, s3
 80051a8:	ec55 4b10 	vmov	r4, r5, d0
 80051ac:	b083      	sub	sp, #12
 80051ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80051b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80051b6:	9001      	str	r0, [sp, #4]
 80051b8:	da06      	bge.n	80051c8 <__kernel_sin+0x30>
 80051ba:	ee10 0a10 	vmov	r0, s0
 80051be:	4629      	mov	r1, r5
 80051c0:	f7fb fc58 	bl	8000a74 <__aeabi_d2iz>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d051      	beq.n	800526c <__kernel_sin+0xd4>
 80051c8:	4622      	mov	r2, r4
 80051ca:	462b      	mov	r3, r5
 80051cc:	4620      	mov	r0, r4
 80051ce:	4629      	mov	r1, r5
 80051d0:	f7fb f9b6 	bl	8000540 <__aeabi_dmul>
 80051d4:	4682      	mov	sl, r0
 80051d6:	468b      	mov	fp, r1
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4620      	mov	r0, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	f7fb f9ae 	bl	8000540 <__aeabi_dmul>
 80051e4:	a341      	add	r3, pc, #260	; (adr r3, 80052ec <__kernel_sin+0x154>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	4680      	mov	r8, r0
 80051ec:	4689      	mov	r9, r1
 80051ee:	4650      	mov	r0, sl
 80051f0:	4659      	mov	r1, fp
 80051f2:	f7fb f9a5 	bl	8000540 <__aeabi_dmul>
 80051f6:	a33f      	add	r3, pc, #252	; (adr r3, 80052f4 <__kernel_sin+0x15c>)
 80051f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fc:	f7fa ffe8 	bl	80001d0 <__aeabi_dsub>
 8005200:	4652      	mov	r2, sl
 8005202:	465b      	mov	r3, fp
 8005204:	f7fb f99c 	bl	8000540 <__aeabi_dmul>
 8005208:	a33c      	add	r3, pc, #240	; (adr r3, 80052fc <__kernel_sin+0x164>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f7fa ffe1 	bl	80001d4 <__adddf3>
 8005212:	4652      	mov	r2, sl
 8005214:	465b      	mov	r3, fp
 8005216:	f7fb f993 	bl	8000540 <__aeabi_dmul>
 800521a:	a33a      	add	r3, pc, #232	; (adr r3, 8005304 <__kernel_sin+0x16c>)
 800521c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005220:	f7fa ffd6 	bl	80001d0 <__aeabi_dsub>
 8005224:	4652      	mov	r2, sl
 8005226:	465b      	mov	r3, fp
 8005228:	f7fb f98a 	bl	8000540 <__aeabi_dmul>
 800522c:	a337      	add	r3, pc, #220	; (adr r3, 800530c <__kernel_sin+0x174>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f7fa ffcf 	bl	80001d4 <__adddf3>
 8005236:	9b01      	ldr	r3, [sp, #4]
 8005238:	4606      	mov	r6, r0
 800523a:	460f      	mov	r7, r1
 800523c:	b9eb      	cbnz	r3, 800527a <__kernel_sin+0xe2>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4650      	mov	r0, sl
 8005244:	4659      	mov	r1, fp
 8005246:	f7fb f97b 	bl	8000540 <__aeabi_dmul>
 800524a:	a325      	add	r3, pc, #148	; (adr r3, 80052e0 <__kernel_sin+0x148>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fa ffbe 	bl	80001d0 <__aeabi_dsub>
 8005254:	4642      	mov	r2, r8
 8005256:	464b      	mov	r3, r9
 8005258:	f7fb f972 	bl	8000540 <__aeabi_dmul>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4620      	mov	r0, r4
 8005262:	4629      	mov	r1, r5
 8005264:	f7fa ffb6 	bl	80001d4 <__adddf3>
 8005268:	4604      	mov	r4, r0
 800526a:	460d      	mov	r5, r1
 800526c:	ec45 4b10 	vmov	d0, r4, r5
 8005270:	b003      	add	sp, #12
 8005272:	ecbd 8b04 	vpop	{d8-d9}
 8005276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800527a:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <__kernel_sin+0x150>)
 800527c:	ec51 0b18 	vmov	r0, r1, d8
 8005280:	2200      	movs	r2, #0
 8005282:	f7fb f95d 	bl	8000540 <__aeabi_dmul>
 8005286:	4632      	mov	r2, r6
 8005288:	ec41 0b19 	vmov	d9, r0, r1
 800528c:	463b      	mov	r3, r7
 800528e:	4640      	mov	r0, r8
 8005290:	4649      	mov	r1, r9
 8005292:	f7fb f955 	bl	8000540 <__aeabi_dmul>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	ec51 0b19 	vmov	r0, r1, d9
 800529e:	f7fa ff97 	bl	80001d0 <__aeabi_dsub>
 80052a2:	4652      	mov	r2, sl
 80052a4:	465b      	mov	r3, fp
 80052a6:	f7fb f94b 	bl	8000540 <__aeabi_dmul>
 80052aa:	ec53 2b18 	vmov	r2, r3, d8
 80052ae:	f7fa ff8f 	bl	80001d0 <__aeabi_dsub>
 80052b2:	a30b      	add	r3, pc, #44	; (adr r3, 80052e0 <__kernel_sin+0x148>)
 80052b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b8:	4606      	mov	r6, r0
 80052ba:	460f      	mov	r7, r1
 80052bc:	4640      	mov	r0, r8
 80052be:	4649      	mov	r1, r9
 80052c0:	f7fb f93e 	bl	8000540 <__aeabi_dmul>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4630      	mov	r0, r6
 80052ca:	4639      	mov	r1, r7
 80052cc:	f7fa ff82 	bl	80001d4 <__adddf3>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	4620      	mov	r0, r4
 80052d6:	4629      	mov	r1, r5
 80052d8:	f7fa ff7a 	bl	80001d0 <__aeabi_dsub>
 80052dc:	e7c4      	b.n	8005268 <__kernel_sin+0xd0>
 80052de:	bf00      	nop
 80052e0:	55555549 	.word	0x55555549
 80052e4:	3fc55555 	.word	0x3fc55555
 80052e8:	3fe00000 	.word	0x3fe00000
 80052ec:	5acfd57c 	.word	0x5acfd57c
 80052f0:	3de5d93a 	.word	0x3de5d93a
 80052f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80052f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80052fc:	57b1fe7d 	.word	0x57b1fe7d
 8005300:	3ec71de3 	.word	0x3ec71de3
 8005304:	19c161d5 	.word	0x19c161d5
 8005308:	3f2a01a0 	.word	0x3f2a01a0
 800530c:	1110f8a6 	.word	0x1110f8a6
 8005310:	3f811111 	.word	0x3f811111

08005314 <fabs>:
 8005314:	ec51 0b10 	vmov	r0, r1, d0
 8005318:	ee10 2a10 	vmov	r2, s0
 800531c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005320:	ec43 2b10 	vmov	d0, r2, r3
 8005324:	4770      	bx	lr
	...

08005328 <floor>:
 8005328:	ec51 0b10 	vmov	r0, r1, d0
 800532c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005330:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005334:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005338:	2e13      	cmp	r6, #19
 800533a:	ee10 5a10 	vmov	r5, s0
 800533e:	ee10 8a10 	vmov	r8, s0
 8005342:	460c      	mov	r4, r1
 8005344:	dc32      	bgt.n	80053ac <floor+0x84>
 8005346:	2e00      	cmp	r6, #0
 8005348:	da14      	bge.n	8005374 <floor+0x4c>
 800534a:	a333      	add	r3, pc, #204	; (adr r3, 8005418 <floor+0xf0>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fa ff40 	bl	80001d4 <__adddf3>
 8005354:	2200      	movs	r2, #0
 8005356:	2300      	movs	r3, #0
 8005358:	f7fb fb82 	bl	8000a60 <__aeabi_dcmpgt>
 800535c:	b138      	cbz	r0, 800536e <floor+0x46>
 800535e:	2c00      	cmp	r4, #0
 8005360:	da57      	bge.n	8005412 <floor+0xea>
 8005362:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005366:	431d      	orrs	r5, r3
 8005368:	d001      	beq.n	800536e <floor+0x46>
 800536a:	4c2d      	ldr	r4, [pc, #180]	; (8005420 <floor+0xf8>)
 800536c:	2500      	movs	r5, #0
 800536e:	4621      	mov	r1, r4
 8005370:	4628      	mov	r0, r5
 8005372:	e025      	b.n	80053c0 <floor+0x98>
 8005374:	4f2b      	ldr	r7, [pc, #172]	; (8005424 <floor+0xfc>)
 8005376:	4137      	asrs	r7, r6
 8005378:	ea01 0307 	and.w	r3, r1, r7
 800537c:	4303      	orrs	r3, r0
 800537e:	d01f      	beq.n	80053c0 <floor+0x98>
 8005380:	a325      	add	r3, pc, #148	; (adr r3, 8005418 <floor+0xf0>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fa ff25 	bl	80001d4 <__adddf3>
 800538a:	2200      	movs	r2, #0
 800538c:	2300      	movs	r3, #0
 800538e:	f7fb fb67 	bl	8000a60 <__aeabi_dcmpgt>
 8005392:	2800      	cmp	r0, #0
 8005394:	d0eb      	beq.n	800536e <floor+0x46>
 8005396:	2c00      	cmp	r4, #0
 8005398:	bfbe      	ittt	lt
 800539a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800539e:	fa43 f606 	asrlt.w	r6, r3, r6
 80053a2:	19a4      	addlt	r4, r4, r6
 80053a4:	ea24 0407 	bic.w	r4, r4, r7
 80053a8:	2500      	movs	r5, #0
 80053aa:	e7e0      	b.n	800536e <floor+0x46>
 80053ac:	2e33      	cmp	r6, #51	; 0x33
 80053ae:	dd0b      	ble.n	80053c8 <floor+0xa0>
 80053b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80053b4:	d104      	bne.n	80053c0 <floor+0x98>
 80053b6:	ee10 2a10 	vmov	r2, s0
 80053ba:	460b      	mov	r3, r1
 80053bc:	f7fa ff0a 	bl	80001d4 <__adddf3>
 80053c0:	ec41 0b10 	vmov	d0, r0, r1
 80053c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80053cc:	f04f 33ff 	mov.w	r3, #4294967295
 80053d0:	fa23 f707 	lsr.w	r7, r3, r7
 80053d4:	4207      	tst	r7, r0
 80053d6:	d0f3      	beq.n	80053c0 <floor+0x98>
 80053d8:	a30f      	add	r3, pc, #60	; (adr r3, 8005418 <floor+0xf0>)
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	f7fa fef9 	bl	80001d4 <__adddf3>
 80053e2:	2200      	movs	r2, #0
 80053e4:	2300      	movs	r3, #0
 80053e6:	f7fb fb3b 	bl	8000a60 <__aeabi_dcmpgt>
 80053ea:	2800      	cmp	r0, #0
 80053ec:	d0bf      	beq.n	800536e <floor+0x46>
 80053ee:	2c00      	cmp	r4, #0
 80053f0:	da02      	bge.n	80053f8 <floor+0xd0>
 80053f2:	2e14      	cmp	r6, #20
 80053f4:	d103      	bne.n	80053fe <floor+0xd6>
 80053f6:	3401      	adds	r4, #1
 80053f8:	ea25 0507 	bic.w	r5, r5, r7
 80053fc:	e7b7      	b.n	800536e <floor+0x46>
 80053fe:	2301      	movs	r3, #1
 8005400:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005404:	fa03 f606 	lsl.w	r6, r3, r6
 8005408:	4435      	add	r5, r6
 800540a:	4545      	cmp	r5, r8
 800540c:	bf38      	it	cc
 800540e:	18e4      	addcc	r4, r4, r3
 8005410:	e7f2      	b.n	80053f8 <floor+0xd0>
 8005412:	2500      	movs	r5, #0
 8005414:	462c      	mov	r4, r5
 8005416:	e7aa      	b.n	800536e <floor+0x46>
 8005418:	8800759c 	.word	0x8800759c
 800541c:	7e37e43c 	.word	0x7e37e43c
 8005420:	bff00000 	.word	0xbff00000
 8005424:	000fffff 	.word	0x000fffff

08005428 <scalbn>:
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	ec55 4b10 	vmov	r4, r5, d0
 800542e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005432:	4606      	mov	r6, r0
 8005434:	462b      	mov	r3, r5
 8005436:	b99a      	cbnz	r2, 8005460 <scalbn+0x38>
 8005438:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800543c:	4323      	orrs	r3, r4
 800543e:	d036      	beq.n	80054ae <scalbn+0x86>
 8005440:	4b39      	ldr	r3, [pc, #228]	; (8005528 <scalbn+0x100>)
 8005442:	4629      	mov	r1, r5
 8005444:	ee10 0a10 	vmov	r0, s0
 8005448:	2200      	movs	r2, #0
 800544a:	f7fb f879 	bl	8000540 <__aeabi_dmul>
 800544e:	4b37      	ldr	r3, [pc, #220]	; (800552c <scalbn+0x104>)
 8005450:	429e      	cmp	r6, r3
 8005452:	4604      	mov	r4, r0
 8005454:	460d      	mov	r5, r1
 8005456:	da10      	bge.n	800547a <scalbn+0x52>
 8005458:	a32b      	add	r3, pc, #172	; (adr r3, 8005508 <scalbn+0xe0>)
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	e03a      	b.n	80054d6 <scalbn+0xae>
 8005460:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005464:	428a      	cmp	r2, r1
 8005466:	d10c      	bne.n	8005482 <scalbn+0x5a>
 8005468:	ee10 2a10 	vmov	r2, s0
 800546c:	4620      	mov	r0, r4
 800546e:	4629      	mov	r1, r5
 8005470:	f7fa feb0 	bl	80001d4 <__adddf3>
 8005474:	4604      	mov	r4, r0
 8005476:	460d      	mov	r5, r1
 8005478:	e019      	b.n	80054ae <scalbn+0x86>
 800547a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800547e:	460b      	mov	r3, r1
 8005480:	3a36      	subs	r2, #54	; 0x36
 8005482:	4432      	add	r2, r6
 8005484:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005488:	428a      	cmp	r2, r1
 800548a:	dd08      	ble.n	800549e <scalbn+0x76>
 800548c:	2d00      	cmp	r5, #0
 800548e:	a120      	add	r1, pc, #128	; (adr r1, 8005510 <scalbn+0xe8>)
 8005490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005494:	da1c      	bge.n	80054d0 <scalbn+0xa8>
 8005496:	a120      	add	r1, pc, #128	; (adr r1, 8005518 <scalbn+0xf0>)
 8005498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800549c:	e018      	b.n	80054d0 <scalbn+0xa8>
 800549e:	2a00      	cmp	r2, #0
 80054a0:	dd08      	ble.n	80054b4 <scalbn+0x8c>
 80054a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80054a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80054ae:	ec45 4b10 	vmov	d0, r4, r5
 80054b2:	bd70      	pop	{r4, r5, r6, pc}
 80054b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80054b8:	da19      	bge.n	80054ee <scalbn+0xc6>
 80054ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80054be:	429e      	cmp	r6, r3
 80054c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80054c4:	dd0a      	ble.n	80054dc <scalbn+0xb4>
 80054c6:	a112      	add	r1, pc, #72	; (adr r1, 8005510 <scalbn+0xe8>)
 80054c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e2      	bne.n	8005496 <scalbn+0x6e>
 80054d0:	a30f      	add	r3, pc, #60	; (adr r3, 8005510 <scalbn+0xe8>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f7fb f833 	bl	8000540 <__aeabi_dmul>
 80054da:	e7cb      	b.n	8005474 <scalbn+0x4c>
 80054dc:	a10a      	add	r1, pc, #40	; (adr r1, 8005508 <scalbn+0xe0>)
 80054de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0b8      	beq.n	8005458 <scalbn+0x30>
 80054e6:	a10e      	add	r1, pc, #56	; (adr r1, 8005520 <scalbn+0xf8>)
 80054e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054ec:	e7b4      	b.n	8005458 <scalbn+0x30>
 80054ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80054f2:	3236      	adds	r2, #54	; 0x36
 80054f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80054fc:	4620      	mov	r0, r4
 80054fe:	4b0c      	ldr	r3, [pc, #48]	; (8005530 <scalbn+0x108>)
 8005500:	2200      	movs	r2, #0
 8005502:	e7e8      	b.n	80054d6 <scalbn+0xae>
 8005504:	f3af 8000 	nop.w
 8005508:	c2f8f359 	.word	0xc2f8f359
 800550c:	01a56e1f 	.word	0x01a56e1f
 8005510:	8800759c 	.word	0x8800759c
 8005514:	7e37e43c 	.word	0x7e37e43c
 8005518:	8800759c 	.word	0x8800759c
 800551c:	fe37e43c 	.word	0xfe37e43c
 8005520:	c2f8f359 	.word	0xc2f8f359
 8005524:	81a56e1f 	.word	0x81a56e1f
 8005528:	43500000 	.word	0x43500000
 800552c:	ffff3cb0 	.word	0xffff3cb0
 8005530:	3c900000 	.word	0x3c900000

08005534 <__libc_init_array>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	4d0d      	ldr	r5, [pc, #52]	; (800556c <__libc_init_array+0x38>)
 8005538:	4c0d      	ldr	r4, [pc, #52]	; (8005570 <__libc_init_array+0x3c>)
 800553a:	1b64      	subs	r4, r4, r5
 800553c:	10a4      	asrs	r4, r4, #2
 800553e:	2600      	movs	r6, #0
 8005540:	42a6      	cmp	r6, r4
 8005542:	d109      	bne.n	8005558 <__libc_init_array+0x24>
 8005544:	4d0b      	ldr	r5, [pc, #44]	; (8005574 <__libc_init_array+0x40>)
 8005546:	4c0c      	ldr	r4, [pc, #48]	; (8005578 <__libc_init_array+0x44>)
 8005548:	f000 f820 	bl	800558c <_init>
 800554c:	1b64      	subs	r4, r4, r5
 800554e:	10a4      	asrs	r4, r4, #2
 8005550:	2600      	movs	r6, #0
 8005552:	42a6      	cmp	r6, r4
 8005554:	d105      	bne.n	8005562 <__libc_init_array+0x2e>
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	f855 3b04 	ldr.w	r3, [r5], #4
 800555c:	4798      	blx	r3
 800555e:	3601      	adds	r6, #1
 8005560:	e7ee      	b.n	8005540 <__libc_init_array+0xc>
 8005562:	f855 3b04 	ldr.w	r3, [r5], #4
 8005566:	4798      	blx	r3
 8005568:	3601      	adds	r6, #1
 800556a:	e7f2      	b.n	8005552 <__libc_init_array+0x1e>
 800556c:	080057b8 	.word	0x080057b8
 8005570:	080057b8 	.word	0x080057b8
 8005574:	080057b8 	.word	0x080057b8
 8005578:	080057bc 	.word	0x080057bc

0800557c <memset>:
 800557c:	4402      	add	r2, r0
 800557e:	4603      	mov	r3, r0
 8005580:	4293      	cmp	r3, r2
 8005582:	d100      	bne.n	8005586 <memset+0xa>
 8005584:	4770      	bx	lr
 8005586:	f803 1b01 	strb.w	r1, [r3], #1
 800558a:	e7f9      	b.n	8005580 <memset+0x4>

0800558c <_init>:
 800558c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558e:	bf00      	nop
 8005590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005592:	bc08      	pop	{r3}
 8005594:	469e      	mov	lr, r3
 8005596:	4770      	bx	lr

08005598 <_fini>:
 8005598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559a:	bf00      	nop
 800559c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559e:	bc08      	pop	{r3}
 80055a0:	469e      	mov	lr, r3
 80055a2:	4770      	bx	lr
