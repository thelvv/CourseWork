
CourseWork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08005570  08005570  00015570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005780  08005780  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005780  08005780  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005780  08005780  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000018c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000198  20000198  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2e6  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e6  00000000  00000000  0002c322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  0002dc08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007e0  00000000  00000000  0002e470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ced4  00000000  00000000  0002ec50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b46c  00000000  00000000  0004bb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aee05  00000000  00000000  00056f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00105d95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002614  00000000  00000000  00105de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005554 	.word	0x08005554

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005554 	.word	0x08005554

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b6a:	f000 fbf3 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b6e:	f000 f827 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b72:	f000 f8ed 	bl	8000d50 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b76:	f000 f87d 	bl	8000c74 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000b7a:	f000 f8b9 	bl	8000cf0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t UART_Data = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71fb      	strb	r3, [r7, #7]
  while (1)
  {
	if(amountOfPoints == 31)
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <main+0x50>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2b1f      	cmp	r3, #31
 8000b88:	d10d      	bne.n	8000ba6 <main+0x42>
	{
		HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8000b8a:	2009      	movs	r0, #9
 8000b8c:	f000 fd71 	bl	8001672 <HAL_NVIC_DisableIRQ>

		fft(ADC_Data, ADC_Data, 32);
 8000b90:	2220      	movs	r2, #32
 8000b92:	4909      	ldr	r1, [pc, #36]	; (8000bb8 <main+0x54>)
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <main+0x54>)
 8000b96:	f000 f91b 	bl	8000dd0 <fft>
		amountOfPoints = 0;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <main+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]

		HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ba0:	2009      	movs	r0, #9
 8000ba2:	f000 fd58 	bl	8001656 <HAL_NVIC_EnableIRQ>
	}

	HAL_UART_Transmit(&huart1, &UART_Data, 1, 100);
 8000ba6:	1df9      	adds	r1, r7, #7
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	2201      	movs	r2, #1
 8000bac:	4803      	ldr	r0, [pc, #12]	; (8000bbc <main+0x58>)
 8000bae:	f003 f807 	bl	8003bc0 <HAL_UART_Transmit>
	if(amountOfPoints == 31)
 8000bb2:	e7e6      	b.n	8000b82 <main+0x1e>
 8000bb4:	20000028 	.word	0x20000028
 8000bb8:	20000114 	.word	0x20000114
 8000bbc:	2000002c 	.word	0x2000002c

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b09e      	sub	sp, #120	; 0x78
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bca:	2228      	movs	r2, #40	; 0x28
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 fcb8 	bl	8005544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	463b      	mov	r3, r7
 8000be6:	223c      	movs	r2, #60	; 0x3c
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f004 fcaa 	bl	8005544 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c02:	2302      	movs	r3, #2
 8000c04:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c0a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c10:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c12:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fee4 	bl	80019e4 <HAL_RCC_OscConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c22:	f000 fa37 	bl	8001094 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f001 fdd6 	bl	80027f4 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000c4e:	f000 fa21 	bl	8001094 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f001 ffff 	bl	8002c60 <HAL_RCCEx_PeriphCLKConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000c68:	f000 fa14 	bl	8001094 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3778      	adds	r7, #120	; 0x78
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <MX_SPI1_Init+0x78>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c84:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000c8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c92:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000ca2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ca6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000caa:	2228      	movs	r2, #40	; 0x28
 8000cac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000cc2:	2207      	movs	r2, #7
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000cce:	2208      	movs	r2, #8
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_SPI1_Init+0x74>)
 8000cd4:	f002 f974 	bl	8002fc0 <HAL_SPI_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 f9d9 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200000b0 	.word	0x200000b0
 8000cec:	40013000 	.word	0x40013000

08000cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <MX_USART1_UART_Init+0x5c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000cfc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d34:	f002 feee 	bl	8003b14 <HAL_HalfDuplex_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d3e:	f000 f9a9 	bl	8001094 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2000002c 	.word	0x2000002c
 8000d4c:	40013800 	.word	0x40013800

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 030c 	add.w	r3, r7, #12
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_GPIO_Init+0x7c>)
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <MX_GPIO_Init+0x7c>)
 8000d6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d70:	6153      	str	r3, [r2, #20]
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_GPIO_Init+0x7c>)
 8000d74:	695b      	ldr	r3, [r3, #20]
 8000d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <MX_GPIO_Init+0x7c>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <MX_GPIO_Init+0x7c>)
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_GPIO_Init+0x7c>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin;
 8000d96:	2308      	movs	r3, #8
 8000d98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DRDY_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dae:	f000 fc7b 	bl	80016a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2009      	movs	r0, #9
 8000db8:	f000 fc31 	bl	800161e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000dbc:	2009      	movs	r0, #9
 8000dbe:	f000 fc4a 	bl	8001656 <HAL_NVIC_EnableIRQ>

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <fft>:

/* USER CODE BEGIN 4 */
void fft(float data_re[], float data_im[], const unsigned int N)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
  rearrange(data_re, data_im, N);
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	68b9      	ldr	r1, [r7, #8]
 8000de0:	68f8      	ldr	r0, [r7, #12]
 8000de2:	f000 f809 	bl	8000df8 <rearrange>
  compute(data_re, data_im, N);
 8000de6:	687a      	ldr	r2, [r7, #4]
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f000 f862 	bl	8000eb4 <compute>
}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <rearrange>:

void rearrange(float data_re[], float data_im[], const unsigned int N)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b08b      	sub	sp, #44	; 0x2c
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  unsigned int target = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  for(unsigned int position=0; position<N;position++)
 8000e08:	2300      	movs	r3, #0
 8000e0a:	623b      	str	r3, [r7, #32]
 8000e0c:	e046      	b.n	8000e9c <rearrange+0xa4>
    {
      if(target>position) {
 8000e0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e10:	6a3b      	ldr	r3, [r7, #32]
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d92b      	bls.n	8000e6e <rearrange+0x76>
	const float temp_re = data_re[target];
 8000e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	61bb      	str	r3, [r7, #24]
	const float temp_im = data_im[target];
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	4413      	add	r3, r2
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	617b      	str	r3, [r7, #20]
	data_re[target] = data_re[position];
 8000e2e:	6a3b      	ldr	r3, [r7, #32]
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	441a      	add	r2, r3
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	68f9      	ldr	r1, [r7, #12]
 8000e3c:	440b      	add	r3, r1
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	601a      	str	r2, [r3, #0]
	data_im[target] = data_im[position];
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	68ba      	ldr	r2, [r7, #8]
 8000e48:	441a      	add	r2, r3
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	68b9      	ldr	r1, [r7, #8]
 8000e50:	440b      	add	r3, r1
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	601a      	str	r2, [r3, #0]
	data_re[position] = temp_re;
 8000e56:	6a3b      	ldr	r3, [r7, #32]
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	601a      	str	r2, [r3, #0]
	data_im[position] = temp_im;
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	4413      	add	r3, r2
 8000e6a:	697a      	ldr	r2, [r7, #20]
 8000e6c:	601a      	str	r2, [r3, #0]
      }
      unsigned int mask = N;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	61fb      	str	r3, [r7, #28]
      while(target & (mask >>=1))
 8000e72:	e004      	b.n	8000e7e <rearrange+0x86>
	target &= ~mask;
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
      while(target & (mask >>=1))
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	085b      	lsrs	r3, r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	69fa      	ldr	r2, [r7, #28]
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d1f2      	bne.n	8000e74 <rearrange+0x7c>
      target |= mask;
 8000e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
  for(unsigned int position=0; position<N;position++)
 8000e96:	6a3b      	ldr	r3, [r7, #32]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	623b      	str	r3, [r7, #32]
 8000e9c:	6a3a      	ldr	r2, [r7, #32]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d3b4      	bcc.n	8000e0e <rearrange+0x16>
    }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	372c      	adds	r7, #44	; 0x2c
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <compute>:

void compute(float data_re[], float data_im[], const unsigned int N)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b090      	sub	sp, #64	; 0x40
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  const float pi = -3.14159265358979323846;
 8000ec0:	4b73      	ldr	r3, [pc, #460]	; (8001090 <compute+0x1dc>)
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28

  for(unsigned int step=1; step<N; step <<=1) {
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ec8:	e0d8      	b.n	800107c <compute+0x1c8>
    const unsigned int jump = step << 1;
 8000eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    const float step_d = (float) step;
 8000ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ed2:	ee07 3a90 	vmov	s15, r3
 8000ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eda:	edc7 7a08 	vstr	s15, [r7, #32]
    float twiddle_re = 1.0;
 8000ede:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
    float twiddle_im = 0.0;
 8000ee4:	f04f 0300 	mov.w	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
    for(unsigned int group=0; group<step; group++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
 8000eee:	e0bd      	b.n	800106c <compute+0x1b8>
      {
	for(unsigned int pair=group; pair<N; pair+=jump)
 8000ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ef4:	e077      	b.n	8000fe6 <compute+0x132>
	  {
	    const unsigned int match = pair + step;
 8000ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000efa:	4413      	add	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
	    const float product_re = twiddle_re*data_re[match]-twiddle_im*data_im[match];
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	ed93 7a00 	vldr	s14, [r3]
 8000f0a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	4413      	add	r3, r2
 8000f1a:	edd3 6a00 	vldr	s13, [r3]
 8000f1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f2a:	edc7 7a05 	vstr	s15, [r7, #20]
	    const float product_im = twiddle_im*data_re[match]+twiddle_re*data_im[match];
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4413      	add	r3, r2
 8000f36:	ed93 7a00 	vldr	s14, [r3]
 8000f3a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	4413      	add	r3, r2
 8000f4a:	edd3 6a00 	vldr	s13, [r3]
 8000f4e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8000f52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5a:	edc7 7a04 	vstr	s15, [r7, #16]
	    data_re[match] = data_re[pair]-product_re;
 8000f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	ed93 7a00 	vldr	s14, [r3]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	4413      	add	r3, r2
 8000f72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
	    data_im[match] = data_im[pair]-product_im;
 8000f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	68ba      	ldr	r2, [r7, #8]
 8000f84:	4413      	add	r3, r2
 8000f86:	ed93 7a00 	vldr	s14, [r3]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	4413      	add	r3, r2
 8000f92:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f9a:	edc3 7a00 	vstr	s15, [r3]
	    data_re[pair] += product_re;
 8000f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	ed93 7a00 	vldr	s14, [r3]
 8000faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fba:	edc3 7a00 	vstr	s15, [r3]
	    data_im[pair] += product_im;
 8000fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	ed93 7a00 	vldr	s14, [r3]
 8000fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fda:	edc3 7a00 	vstr	s15, [r3]
	for(unsigned int pair=group; pair<N; pair+=jump)
 8000fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe2:	4413      	add	r3, r2
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fe6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d383      	bcc.n	8000ef6 <compute+0x42>
	  }

	// we need the factors below for the next iteration
	// if we don't iterate then don't compute
	if(group+1 == step)
 8000fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d035      	beq.n	8001064 <compute+0x1b0>
	  {
	    continue;
	  }

	float angle = pi*((float) group+1)/step_d;
 8000ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800100a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800100e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001012:	ed97 7a08 	vldr	s14, [r7, #32]
 8001016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800101a:	edc7 7a07 	vstr	s15, [r7, #28]
	twiddle_re = cos(angle);
 800101e:	69f8      	ldr	r0, [r7, #28]
 8001020:	f7ff fa36 	bl	8000490 <__aeabi_f2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	ec43 2b10 	vmov	d0, r2, r3
 800102c:	f003 f9e0 	bl	80043f0 <cos>
 8001030:	ec53 2b10 	vmov	r2, r3, d0
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fd44 	bl	8000ac4 <__aeabi_d2f>
 800103c:	4603      	mov	r3, r0
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
	twiddle_im = sin(angle);
 8001040:	69f8      	ldr	r0, [r7, #28]
 8001042:	f7ff fa25 	bl	8000490 <__aeabi_f2d>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	ec43 2b10 	vmov	d0, r2, r3
 800104e:	f003 fa1f 	bl	8004490 <sin>
 8001052:	ec53 2b10 	vmov	r2, r3, d0
 8001056:	4610      	mov	r0, r2
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fd33 	bl	8000ac4 <__aeabi_d2f>
 800105e:	4603      	mov	r3, r0
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
 8001062:	e000      	b.n	8001066 <compute+0x1b2>
	    continue;
 8001064:	bf00      	nop
    for(unsigned int group=0; group<step; group++)
 8001066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001068:	3301      	adds	r3, #1
 800106a:	633b      	str	r3, [r7, #48]	; 0x30
 800106c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800106e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001070:	429a      	cmp	r2, r3
 8001072:	f4ff af3d 	bcc.w	8000ef0 <compute+0x3c>
  for(unsigned int step=1; step<N; step <<=1) {
 8001076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800107c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	f4ff af22 	bcc.w	8000eca <compute+0x16>
      }
  }
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3740      	adds	r7, #64	; 0x40
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	c0490fdb 	.word	0xc0490fdb

08001094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001098:	b672      	cpsid	i
}
 800109a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800109c:	e7fe      	b.n	800109c <Error_Handler+0x8>
	...

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <HAL_MspInit+0x44>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_MspInit+0x44>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_MspInit+0x44>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_MspInit+0x44>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_MspInit+0x44>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_MspInit+0x44>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <HAL_SPI_MspInit+0x7c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d128      	bne.n	800115c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_SPI_MspInit+0x80>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	4a16      	ldr	r2, [pc, #88]	; (8001168 <HAL_SPI_MspInit+0x80>)
 8001110:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001114:	6193      	str	r3, [r2, #24]
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_SPI_MspInit+0x80>)
 8001118:	699b      	ldr	r3, [r3, #24]
 800111a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_SPI_MspInit+0x80>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_SPI_MspInit+0x80>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_SPI_MspInit+0x80>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800113a:	23f0      	movs	r3, #240	; 0xf0
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800114a:	2305      	movs	r3, #5
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001158:	f000 faa6 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800115c:	bf00      	nop
 800115e:	3728      	adds	r7, #40	; 0x28
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40013000 	.word	0x40013000
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a18      	ldr	r2, [pc, #96]	; (80011ec <HAL_UART_MspInit+0x80>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d129      	bne.n	80011e2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <HAL_UART_MspInit+0x84>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_UART_MspInit+0x84>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_UART_MspInit+0x84>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_UART_MspInit+0x84>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_UART_MspInit+0x84>)
 80011ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <HAL_UART_MspInit+0x84>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c4:	2312      	movs	r3, #18
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011d0:	2307      	movs	r3, #7
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011de:	f000 fa63 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	3728      	adds	r7, #40	; 0x28
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40021000 	.word	0x40021000

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f8ce 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  uint8_t ADC[3];
  HAL_SPI_Receive(&hspi1, ADC, 3, 100);
 800124e:	1d39      	adds	r1, r7, #4
 8001250:	2364      	movs	r3, #100	; 0x64
 8001252:	2203      	movs	r2, #3
 8001254:	481c      	ldr	r0, [pc, #112]	; (80012c8 <EXTI3_IRQHandler+0x80>)
 8001256:	f001 ff5e 	bl	8003116 <HAL_SPI_Receive>
  if(amountOfPoints < 32)
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <EXTI3_IRQHandler+0x84>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b1f      	cmp	r3, #31
 8001260:	dc2a      	bgt.n	80012b8 <EXTI3_IRQHandler+0x70>
  {
	  ADC_Data[amountOfPoints] = (ADC[0] | (ADC[1]<<8) | (ADC[2]<<16))*2.5/0xFFFFFF;
 8001262:	793b      	ldrb	r3, [r7, #4]
 8001264:	461a      	mov	r2, r3
 8001266:	797b      	ldrb	r3, [r7, #5]
 8001268:	021b      	lsls	r3, r3, #8
 800126a:	431a      	orrs	r2, r3
 800126c:	79bb      	ldrb	r3, [r7, #6]
 800126e:	041b      	lsls	r3, r3, #16
 8001270:	4313      	orrs	r3, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f8fa 	bl	800046c <__aeabi_i2d>
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <EXTI3_IRQHandler+0x88>)
 800127e:	f7ff f95f 	bl	8000540 <__aeabi_dmul>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4610      	mov	r0, r2
 8001288:	4619      	mov	r1, r3
 800128a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <EXTI3_IRQHandler+0x8c>)
 8001290:	f7ff fa80 	bl	8000794 <__aeabi_ddiv>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <EXTI3_IRQHandler+0x84>)
 800129a:	680c      	ldr	r4, [r1, #0]
 800129c:	4610      	mov	r0, r2
 800129e:	4619      	mov	r1, r3
 80012a0:	f7ff fc10 	bl	8000ac4 <__aeabi_d2f>
 80012a4:	4602      	mov	r2, r0
 80012a6:	490c      	ldr	r1, [pc, #48]	; (80012d8 <EXTI3_IRQHandler+0x90>)
 80012a8:	00a3      	lsls	r3, r4, #2
 80012aa:	440b      	add	r3, r1
 80012ac:	601a      	str	r2, [r3, #0]
	  amountOfPoints++;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <EXTI3_IRQHandler+0x84>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	3301      	adds	r3, #1
 80012b4:	4a05      	ldr	r2, [pc, #20]	; (80012cc <EXTI3_IRQHandler+0x84>)
 80012b6:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_Pin);
 80012b8:	2008      	movs	r0, #8
 80012ba:	f000 fb6f 	bl	800199c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd90      	pop	{r4, r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200000b0 	.word	0x200000b0
 80012cc:	20000028 	.word	0x20000028
 80012d0:	40040000 	.word	0x40040000
 80012d4:	416fffff 	.word	0x416fffff
 80012d8:	20000114 	.word	0x20000114

080012dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 8001306:	490e      	ldr	r1, [pc, #56]	; (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 800131c:	4c0b      	ldr	r4, [pc, #44]	; (800134c <LoopForever+0x16>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800132a:	f7ff ffd7 	bl	80012dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800132e:	f004 f8e5 	bl	80054fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff fc17 	bl	8000b64 <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001338:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001344:	08005788 	.word	0x08005788
  ldr r2, =_sbss
 8001348:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800134c:	20000198 	.word	0x20000198

08001350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_2_IRQHandler>
	...

08001354 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_Init+0x28>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a07      	ldr	r2, [pc, #28]	; (800137c <HAL_Init+0x28>)
 800135e:	f043 0310 	orr.w	r3, r3, #16
 8001362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001364:	2003      	movs	r0, #3
 8001366:	f000 f94f 	bl	8001608 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136a:	200f      	movs	r0, #15
 800136c:	f000 f808 	bl	8001380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001370:	f7ff fe96 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40022000 	.word	0x40022000

08001380 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_InitTick+0x54>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_InitTick+0x58>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	4619      	mov	r1, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fbb3 f3f1 	udiv	r3, r3, r1
 800139a:	fbb2 f3f3 	udiv	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f975 	bl	800168e <HAL_SYSTICK_Config>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00e      	b.n	80013cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b0f      	cmp	r3, #15
 80013b2:	d80a      	bhi.n	80013ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	2200      	movs	r2, #0
 80013b6:	6879      	ldr	r1, [r7, #4]
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f000 f92f 	bl	800161e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <HAL_InitTick+0x5c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	20000000 	.word	0x20000000
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000004 	.word	0x20000004

080013e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000008 	.word	0x20000008
 8001404:	20000194 	.word	0x20000194

08001408 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;  
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000194 	.word	0x20000194

08001420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f003 0307 	and.w	r3, r3, #7
 800142e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800143c:	4013      	ands	r3, r2
 800143e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800144c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001452:	4a04      	ldr	r2, [pc, #16]	; (8001464 <__NVIC_SetPriorityGrouping+0x44>)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	60d3      	str	r3, [r2, #12]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <__NVIC_GetPriorityGrouping+0x18>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	0a1b      	lsrs	r3, r3, #8
 8001472:	f003 0307 	and.w	r3, r3, #7
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	db0b      	blt.n	80014ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	f003 021f 	and.w	r2, r3, #31
 800149c:	4907      	ldr	r1, [pc, #28]	; (80014bc <__NVIC_EnableIRQ+0x38>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2001      	movs	r0, #1
 80014a6:	fa00 f202 	lsl.w	r2, r0, r2
 80014aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	db12      	blt.n	80014f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	f003 021f 	and.w	r2, r3, #31
 80014d8:	490a      	ldr	r1, [pc, #40]	; (8001504 <__NVIC_DisableIRQ+0x44>)
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	2001      	movs	r0, #1
 80014e2:	fa00 f202 	lsl.w	r2, r0, r2
 80014e6:	3320      	adds	r3, #32
 80014e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80014ec:	f3bf 8f4f 	dsb	sy
}
 80014f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014f2:	f3bf 8f6f 	isb	sy
}
 80014f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015d4:	d301      	bcc.n	80015da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d6:	2301      	movs	r3, #1
 80015d8:	e00f      	b.n	80015fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015da:	4a0a      	ldr	r2, [pc, #40]	; (8001604 <SysTick_Config+0x40>)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015e2:	210f      	movs	r1, #15
 80015e4:	f04f 30ff 	mov.w	r0, #4294967295
 80015e8:	f7ff ff8e 	bl	8001508 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <SysTick_Config+0x40>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SysTick_Config+0x40>)
 80015f4:	2207      	movs	r2, #7
 80015f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff ff05 	bl	8001420 <__NVIC_SetPriorityGrouping>
}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001630:	f7ff ff1a 	bl	8001468 <__NVIC_GetPriorityGrouping>
 8001634:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	68b9      	ldr	r1, [r7, #8]
 800163a:	6978      	ldr	r0, [r7, #20]
 800163c:	f7ff ff8e 	bl	800155c <NVIC_EncodePriority>
 8001640:	4602      	mov	r2, r0
 8001642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff5d 	bl	8001508 <__NVIC_SetPriority>
}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	4603      	mov	r3, r0
 800165e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001660:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff0d 	bl	8001484 <__NVIC_EnableIRQ>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff1d 	bl	80014c0 <__NVIC_DisableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ff94 	bl	80015c4 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016b6:	e154      	b.n	8001962 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2101      	movs	r1, #1
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa01 f303 	lsl.w	r3, r1, r3
 80016c4:	4013      	ands	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 8146 	beq.w	800195c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d005      	beq.n	80016e8 <HAL_GPIO_Init+0x40>
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0303 	and.w	r3, r3, #3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d130      	bne.n	800174a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	2203      	movs	r2, #3
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800171e:	2201      	movs	r2, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	091b      	lsrs	r3, r3, #4
 8001734:	f003 0201 	and.w	r2, r3, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b03      	cmp	r3, #3
 8001754:	d017      	beq.n	8001786 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	689a      	ldr	r2, [r3, #8]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d123      	bne.n	80017da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	08da      	lsrs	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3208      	adds	r2, #8
 800179a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	691a      	ldr	r2, [r3, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	6939      	ldr	r1, [r7, #16]
 80017d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	4013      	ands	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0203 	and.w	r2, r3, #3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80a0 	beq.w	800195c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181c:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_GPIO_Init+0x2d8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a57      	ldr	r2, [pc, #348]	; (8001980 <HAL_GPIO_Init+0x2d8>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b55      	ldr	r3, [pc, #340]	; (8001980 <HAL_GPIO_Init+0x2d8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001834:	4a53      	ldr	r2, [pc, #332]	; (8001984 <HAL_GPIO_Init+0x2dc>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800185e:	d019      	beq.n	8001894 <HAL_GPIO_Init+0x1ec>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2e0>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d013      	beq.n	8001890 <HAL_GPIO_Init+0x1e8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2e4>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d00d      	beq.n	800188c <HAL_GPIO_Init+0x1e4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a47      	ldr	r2, [pc, #284]	; (8001990 <HAL_GPIO_Init+0x2e8>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d007      	beq.n	8001888 <HAL_GPIO_Init+0x1e0>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a46      	ldr	r2, [pc, #280]	; (8001994 <HAL_GPIO_Init+0x2ec>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d101      	bne.n	8001884 <HAL_GPIO_Init+0x1dc>
 8001880:	2304      	movs	r3, #4
 8001882:	e008      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001884:	2305      	movs	r3, #5
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001888:	2303      	movs	r3, #3
 800188a:	e004      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 800188c:	2302      	movs	r3, #2
 800188e:	e002      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_GPIO_Init+0x1ee>
 8001894:	2300      	movs	r3, #0
 8001896:	697a      	ldr	r2, [r7, #20]
 8001898:	f002 0203 	and.w	r2, r2, #3
 800189c:	0092      	lsls	r2, r2, #2
 800189e:	4093      	lsls	r3, r2
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018a6:	4937      	ldr	r1, [pc, #220]	; (8001984 <HAL_GPIO_Init+0x2dc>)
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	089b      	lsrs	r3, r3, #2
 80018ac:	3302      	adds	r3, #2
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018d8:	4a2f      	ldr	r2, [pc, #188]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018de:	4b2e      	ldr	r3, [pc, #184]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001902:	4a25      	ldr	r2, [pc, #148]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001908:	4b23      	ldr	r3, [pc, #140]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800192c:	4a1a      	ldr	r2, [pc, #104]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43db      	mvns	r3, r3
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	3301      	adds	r3, #1
 8001960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f aea3 	bne.w	80016b8 <HAL_GPIO_Init+0x10>
  }
}
 8001972:	bf00      	nop
 8001974:	bf00      	nop
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40021000 	.word	0x40021000
 8001984:	40010000 	.word	0x40010000
 8001988:	48000400 	.word	0x48000400
 800198c:	48000800 	.word	0x48000800
 8001990:	48000c00 	.word	0x48000c00
 8001994:	48001000 	.word	0x48001000
 8001998:	40010400 	.word	0x40010400

0800199c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f806 	bl	80019cc <HAL_GPIO_EXTI_Callback>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d102      	bne.n	80019fe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	f000 bef4 	b.w	80027e6 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 816a 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a0e:	4bb3      	ldr	r3, [pc, #716]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d00c      	beq.n	8001a34 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a1a:	4bb0      	ldr	r3, [pc, #704]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d159      	bne.n	8001ada <HAL_RCC_OscConfig+0xf6>
 8001a26:	4bad      	ldr	r3, [pc, #692]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a32:	d152      	bne.n	8001ada <HAL_RCC_OscConfig+0xf6>
 8001a34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a38:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001a40:	fa93 f3a3 	rbit	r3, r3
 8001a44:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a48:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f043 0301 	orr.w	r3, r3, #1
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d102      	bne.n	8001a66 <HAL_RCC_OscConfig+0x82>
 8001a60:	4b9e      	ldr	r3, [pc, #632]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0xae>
 8001a66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a6a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001a72:	fa93 f3a3 	rbit	r3, r3
 8001a76:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a7e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a82:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001a8e:	4b93      	ldr	r3, [pc, #588]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a96:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001a9a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a9e:	fa92 f2a2 	rbit	r2, r2
 8001aa2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001aa6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001aaa:	fab2 f282 	clz	r2, r2
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	f042 0220 	orr.w	r2, r2, #32
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	f002 021f 	and.w	r2, r2, #31
 8001aba:	2101      	movs	r1, #1
 8001abc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 810c 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x2fc>
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 8106 	bne.w	8001ce0 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f000 be86 	b.w	80027e6 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x110>
 8001ae6:	4b7d      	ldr	r3, [pc, #500]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7c      	ldr	r2, [pc, #496]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e030      	b.n	8001b56 <HAL_RCC_OscConfig+0x172>
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x134>
 8001afe:	4b77      	ldr	r3, [pc, #476]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a76      	ldr	r2, [pc, #472]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b74      	ldr	r3, [pc, #464]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a73      	ldr	r2, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e01e      	b.n	8001b56 <HAL_RCC_OscConfig+0x172>
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b22:	d10c      	bne.n	8001b3e <HAL_RCC_OscConfig+0x15a>
 8001b24:	4b6d      	ldr	r3, [pc, #436]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6c      	ldr	r2, [pc, #432]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a69      	ldr	r2, [pc, #420]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	e00b      	b.n	8001b56 <HAL_RCC_OscConfig+0x172>
 8001b3e:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a66      	ldr	r2, [pc, #408]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b64      	ldr	r3, [pc, #400]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a63      	ldr	r2, [pc, #396]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b56:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	f023 020f 	bic.w	r2, r3, #15
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	495d      	ldr	r1, [pc, #372]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d059      	beq.n	8001c28 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc48 	bl	8001408 <HAL_GetTick>
 8001b78:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fc43 	bl	8001408 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	; 0x64
 8001b8c:	d902      	bls.n	8001b94 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	f000 be29 	b.w	80027e6 <HAL_RCC_OscConfig+0xe02>
 8001b94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001ba8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bac:	fab3 f383 	clz	r3, r3
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	095b      	lsrs	r3, r3, #5
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d102      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x1e2>
 8001bc0:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	e015      	b.n	8001bf2 <HAL_RCC_OscConfig+0x20e>
 8001bc6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001bda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bde:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001be2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001be6:	fa93 f3a3 	rbit	r3, r3
 8001bea:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001bee:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bf6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001bfa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001bfe:	fa92 f2a2 	rbit	r2, r2
 8001c02:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001c06:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001c0a:	fab2 f282 	clz	r2, r2
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	f042 0220 	orr.w	r2, r2, #32
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f002 021f 	and.w	r2, r2, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0ab      	beq.n	8001b7e <HAL_RCC_OscConfig+0x19a>
 8001c26:	e05c      	b.n	8001ce2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fbee 	bl	8001408 <HAL_GetTick>
 8001c2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c32:	f7ff fbe9 	bl	8001408 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d902      	bls.n	8001c48 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	f000 bdcf 	b.w	80027e6 <HAL_RCC_OscConfig+0xe02>
 8001c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c4c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c50:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001c5c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c60:	fab3 f383 	clz	r3, r3
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	095b      	lsrs	r3, r3, #5
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d102      	bne.n	8001c7a <HAL_RCC_OscConfig+0x296>
 8001c74:	4b19      	ldr	r3, [pc, #100]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0x2c2>
 8001c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001c8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c92:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c96:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_RCC_OscConfig+0x2f8>)
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001caa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001cae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001cb2:	fa92 f2a2 	rbit	r2, r2
 8001cb6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001cba:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001cbe:	fab2 f282 	clz	r2, r2
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	f042 0220 	orr.w	r2, r2, #32
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f002 021f 	and.w	r2, r2, #31
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ab      	bne.n	8001c32 <HAL_RCC_OscConfig+0x24e>
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_OscConfig+0x2fe>
 8001cdc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 816f 	beq.w	8001fd0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cf2:	4bd0      	ldr	r3, [pc, #832]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 030c 	and.w	r3, r3, #12
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001cfe:	4bcd      	ldr	r3, [pc, #820]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d16c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x400>
 8001d0a:	4bca      	ldr	r3, [pc, #808]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d166      	bne.n	8001de4 <HAL_RCC_OscConfig+0x400>
 8001d16:	2302      	movs	r3, #2
 8001d18:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001d28:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x362>
 8001d40:	4bbc      	ldr	r3, [pc, #752]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	e013      	b.n	8001d6e <HAL_RCC_OscConfig+0x38a>
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001d58:	2302      	movs	r3, #2
 8001d5a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001d5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001d6a:	4bb2      	ldr	r3, [pc, #712]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001d74:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001d78:	fa92 f2a2 	rbit	r2, r2
 8001d7c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001d80:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001d84:	fab2 f282 	clz	r2, r2
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	f042 0220 	orr.w	r2, r2, #32
 8001d8e:	b2d2      	uxtb	r2, r2
 8001d90:	f002 021f 	and.w	r2, r2, #31
 8001d94:	2101      	movs	r1, #1
 8001d96:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_RCC_OscConfig+0x3cc>
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d002      	beq.n	8001db0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	f000 bd1b 	b.w	80027e6 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db0:	4ba0      	ldr	r3, [pc, #640]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	21f8      	movs	r1, #248	; 0xf8
 8001dc0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001dc8:	fa91 f1a1 	rbit	r1, r1
 8001dcc:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001dd0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001dd4:	fab1 f181 	clz	r1, r1
 8001dd8:	b2c9      	uxtb	r1, r1
 8001dda:	408b      	lsls	r3, r1
 8001ddc:	4995      	ldr	r1, [pc, #596]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	e0f5      	b.n	8001fd0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 8085 	beq.w	8001efa <HAL_RCC_OscConfig+0x516>
 8001df0:	2301      	movs	r3, #1
 8001df2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001e02:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e06:	fab3 f383 	clz	r3, r3
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	461a      	mov	r2, r3
 8001e18:	2301      	movs	r3, #1
 8001e1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1c:	f7ff faf4 	bl	8001408 <HAL_GetTick>
 8001e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff faef 	bl	8001408 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d902      	bls.n	8001e3c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	f000 bcd5 	b.w	80027e6 <HAL_RCC_OscConfig+0xe02>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001e4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	095b      	lsrs	r3, r3, #5
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d102      	bne.n	8001e6c <HAL_RCC_OscConfig+0x488>
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	e013      	b.n	8001e94 <HAL_RCC_OscConfig+0x4b0>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001e7e:	2302      	movs	r3, #2
 8001e80:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001e84:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001e88:	fa93 f3a3 	rbit	r3, r3
 8001e8c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001e90:	4b68      	ldr	r3, [pc, #416]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	2202      	movs	r2, #2
 8001e96:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001e9a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e9e:	fa92 f2a2 	rbit	r2, r2
 8001ea2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001ea6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001eaa:	fab2 f282 	clz	r2, r2
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f042 0220 	orr.w	r2, r2, #32
 8001eb4:	b2d2      	uxtb	r2, r2
 8001eb6:	f002 021f 	and.w	r2, r2, #31
 8001eba:	2101      	movs	r1, #1
 8001ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0af      	beq.n	8001e26 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec6:	4b5b      	ldr	r3, [pc, #364]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	21f8      	movs	r1, #248	; 0xf8
 8001ed6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eda:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ede:	fa91 f1a1 	rbit	r1, r1
 8001ee2:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001ee6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001eea:	fab1 f181 	clz	r1, r1
 8001eee:	b2c9      	uxtb	r1, r1
 8001ef0:	408b      	lsls	r3, r1
 8001ef2:	4950      	ldr	r1, [pc, #320]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
 8001ef8:	e06a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x5ec>
 8001efa:	2301      	movs	r3, #1
 8001efc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001f0c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f10:	fab3 f383 	clz	r3, r3
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	461a      	mov	r2, r3
 8001f22:	2300      	movs	r3, #0
 8001f24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff fa6f 	bl	8001408 <HAL_GetTick>
 8001f2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f30:	f7ff fa6a 	bl	8001408 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d902      	bls.n	8001f46 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	f000 bc50 	b.w	80027e6 <HAL_RCC_OscConfig+0xe02>
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5c:	fab3 f383 	clz	r3, r3
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_OscConfig+0x592>
 8001f70:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	e013      	b.n	8001f9e <HAL_RCC_OscConfig+0x5ba>
 8001f76:	2302      	movs	r3, #2
 8001f78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f88:	2302      	movs	r3, #2
 8001f8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001f9a:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_RCC_OscConfig+0x650>)
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001fa4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001fa8:	fa92 f2a2 	rbit	r2, r2
 8001fac:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001fb0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fb4:	fab2 f282 	clz	r2, r2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	f042 0220 	orr.w	r2, r2, #32
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	f002 021f 	and.w	r2, r2, #31
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1af      	bne.n	8001f30 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80da 	beq.w	8002194 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d069      	beq.n	80020be <HAL_RCC_OscConfig+0x6da>
 8001fea:	2301      	movs	r3, #1
 8001fec:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ff4:	fa93 f3a3 	rbit	r3, r3
 8001ff8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001ffc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_RCC_OscConfig+0x654>)
 800200a:	4413      	add	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	461a      	mov	r2, r3
 8002010:	2301      	movs	r3, #1
 8002012:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002014:	f7ff f9f8 	bl	8001408 <HAL_GetTick>
 8002018:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201c:	e00e      	b.n	800203c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800201e:	f7ff f9f3 	bl	8001408 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d906      	bls.n	800203c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e3d9      	b.n	80027e6 <HAL_RCC_OscConfig+0xe02>
 8002032:	bf00      	nop
 8002034:	40021000 	.word	0x40021000
 8002038:	10908120 	.word	0x10908120
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800204e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002052:	2202      	movs	r2, #2
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002064:	601a      	str	r2, [r3, #0]
 8002066:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800206a:	2202      	movs	r2, #2
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	fa93 f2a3 	rbit	r2, r3
 8002078:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800207c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	4ba5      	ldr	r3, [pc, #660]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002082:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002086:	2102      	movs	r1, #2
 8002088:	6019      	str	r1, [r3, #0]
 800208a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	fa93 f1a3 	rbit	r1, r3
 8002094:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002098:	6019      	str	r1, [r3, #0]
  return result;
 800209a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	fab3 f383 	clz	r3, r3
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	2101      	movs	r1, #1
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0b0      	beq.n	800201e <HAL_RCC_OscConfig+0x63a>
 80020bc:	e06a      	b.n	8002194 <HAL_RCC_OscConfig+0x7b0>
 80020be:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020c2:	2201      	movs	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	fa93 f2a3 	rbit	r2, r3
 80020d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020d4:	601a      	str	r2, [r3, #0]
  return result;
 80020d6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020da:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020dc:	fab3 f383 	clz	r3, r3
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	4b8c      	ldr	r3, [pc, #560]	; (8002318 <HAL_RCC_OscConfig+0x934>)
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	461a      	mov	r2, r3
 80020ec:	2300      	movs	r3, #0
 80020ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f0:	f7ff f98a 	bl	8001408 <HAL_GetTick>
 80020f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f8:	e009      	b.n	800210e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020fa:	f7ff f985 	bl	8001408 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e36b      	b.n	80027e6 <HAL_RCC_OscConfig+0xe02>
 800210e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002112:	2202      	movs	r2, #2
 8002114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800212a:	2202      	movs	r2, #2
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	fa93 f2a3 	rbit	r2, r3
 8002138:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002142:	2202      	movs	r2, #2
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002154:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002156:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002158:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800215a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800215e:	2102      	movs	r1, #2
 8002160:	6019      	str	r1, [r3, #0]
 8002162:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f1a3 	rbit	r1, r3
 800216c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002170:	6019      	str	r1, [r3, #0]
  return result;
 8002172:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002182:	b2db      	uxtb	r3, r3
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2101      	movs	r1, #1
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	4013      	ands	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1b2      	bne.n	80020fa <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8158 	beq.w	8002454 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021aa:	4b5a      	ldr	r3, [pc, #360]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d112      	bne.n	80021dc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	4b57      	ldr	r3, [pc, #348]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4a56      	ldr	r2, [pc, #344]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c0:	61d3      	str	r3, [r2, #28]
 80021c2:	4b54      	ldr	r3, [pc, #336]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80021d6:	2301      	movs	r3, #1
 80021d8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	4b4f      	ldr	r3, [pc, #316]	; (800231c <HAL_RCC_OscConfig+0x938>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d11a      	bne.n	800221e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e8:	4b4c      	ldr	r3, [pc, #304]	; (800231c <HAL_RCC_OscConfig+0x938>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a4b      	ldr	r2, [pc, #300]	; (800231c <HAL_RCC_OscConfig+0x938>)
 80021ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f4:	f7ff f908 	bl	8001408 <HAL_GetTick>
 80021f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	e009      	b.n	8002212 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7ff f903 	bl	8001408 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e2e9      	b.n	80027e6 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002212:	4b42      	ldr	r3, [pc, #264]	; (800231c <HAL_RCC_OscConfig+0x938>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0ef      	beq.n	80021fe <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x852>
 8002228:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a39      	ldr	r2, [pc, #228]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	e02f      	b.n	8002296 <HAL_RCC_OscConfig+0x8b2>
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x876>
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	4a33      	ldr	r2, [pc, #204]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	6213      	str	r3, [r2, #32]
 800224c:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 800224e:	6a1b      	ldr	r3, [r3, #32]
 8002250:	4a30      	ldr	r2, [pc, #192]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002252:	f023 0304 	bic.w	r3, r3, #4
 8002256:	6213      	str	r3, [r2, #32]
 8002258:	e01d      	b.n	8002296 <HAL_RCC_OscConfig+0x8b2>
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	2b05      	cmp	r3, #5
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x89a>
 8002264:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4a2a      	ldr	r2, [pc, #168]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6213      	str	r3, [r2, #32]
 8002270:	4b28      	ldr	r3, [pc, #160]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a27      	ldr	r2, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e00b      	b.n	8002296 <HAL_RCC_OscConfig+0x8b2>
 800227e:	4b25      	ldr	r3, [pc, #148]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	4a24      	ldr	r2, [pc, #144]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6213      	str	r3, [r2, #32]
 800228a:	4b22      	ldr	r3, [pc, #136]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a21      	ldr	r2, [pc, #132]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 8002290:	f023 0304 	bic.w	r3, r3, #4
 8002294:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d06b      	beq.n	8002378 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a0:	f7ff f8b2 	bl	8001408 <HAL_GetTick>
 80022a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	e00b      	b.n	80022c2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022aa:	f7ff f8ad 	bl	8001408 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e291      	b.n	80027e6 <HAL_RCC_OscConfig+0xe02>
 80022c2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022c6:	2202      	movs	r2, #2
 80022c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa93 f2a3 	rbit	r2, r3
 80022d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022de:	2202      	movs	r2, #2
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022f0:	601a      	str	r2, [r3, #0]
  return result;
 80022f2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80022f6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d109      	bne.n	8002320 <HAL_RCC_OscConfig+0x93c>
 800230c:	4b01      	ldr	r3, [pc, #4]	; (8002314 <HAL_RCC_OscConfig+0x930>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	e014      	b.n	800233c <HAL_RCC_OscConfig+0x958>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	10908120 	.word	0x10908120
 800231c:	40007000 	.word	0x40007000
 8002320:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002324:	2202      	movs	r2, #2
 8002326:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	fa93 f2a3 	rbit	r2, r3
 8002332:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	4bbb      	ldr	r3, [pc, #748]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002340:	2102      	movs	r1, #2
 8002342:	6011      	str	r1, [r2, #0]
 8002344:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002348:	6812      	ldr	r2, [r2, #0]
 800234a:	fa92 f1a2 	rbit	r1, r2
 800234e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002352:	6011      	str	r1, [r2, #0]
  return result;
 8002354:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002358:	6812      	ldr	r2, [r2, #0]
 800235a:	fab2 f282 	clz	r2, r2
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002364:	b2d2      	uxtb	r2, r2
 8002366:	f002 021f 	and.w	r2, r2, #31
 800236a:	2101      	movs	r1, #1
 800236c:	fa01 f202 	lsl.w	r2, r1, r2
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d099      	beq.n	80022aa <HAL_RCC_OscConfig+0x8c6>
 8002376:	e063      	b.n	8002440 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002378:	f7ff f846 	bl	8001408 <HAL_GetTick>
 800237c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	e00b      	b.n	800239a <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002382:	f7ff f841 	bl	8001408 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e225      	b.n	80027e6 <HAL_RCC_OscConfig+0xe02>
 800239a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800239e:	2202      	movs	r2, #2
 80023a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	fa93 f2a3 	rbit	r2, r3
 80023ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023b6:	2202      	movs	r2, #2
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	fa93 f2a3 	rbit	r2, r3
 80023c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023c8:	601a      	str	r2, [r3, #0]
  return result;
 80023ca:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80023ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f043 0302 	orr.w	r3, r3, #2
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d102      	bne.n	80023ea <HAL_RCC_OscConfig+0xa06>
 80023e4:	4b90      	ldr	r3, [pc, #576]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	e00d      	b.n	8002406 <HAL_RCC_OscConfig+0xa22>
 80023ea:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023ee:	2202      	movs	r2, #2
 80023f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	fa93 f2a3 	rbit	r2, r3
 80023fc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	4b89      	ldr	r3, [pc, #548]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800240a:	2102      	movs	r1, #2
 800240c:	6011      	str	r1, [r2, #0]
 800240e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	fa92 f1a2 	rbit	r1, r2
 8002418:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800241c:	6011      	str	r1, [r2, #0]
  return result;
 800241e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	fab2 f282 	clz	r2, r2
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	f002 021f 	and.w	r2, r2, #31
 8002434:	2101      	movs	r1, #1
 8002436:	fa01 f202 	lsl.w	r2, r1, r2
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1a0      	bne.n	8002382 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002440:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002444:	2b01      	cmp	r3, #1
 8002446:	d105      	bne.n	8002454 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002448:	4b77      	ldr	r3, [pc, #476]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	4a76      	ldr	r2, [pc, #472]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 800244e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002452:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 81c2 	beq.w	80027e4 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002460:	4b71      	ldr	r3, [pc, #452]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b08      	cmp	r3, #8
 800246a:	f000 819c 	beq.w	80027a6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246e:	1d3b      	adds	r3, r7, #4
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b02      	cmp	r3, #2
 8002476:	f040 8114 	bne.w	80026a2 <HAL_RCC_OscConfig+0xcbe>
 800247a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800247e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002482:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	fa93 f2a3 	rbit	r2, r3
 800248e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002492:	601a      	str	r2, [r3, #0]
  return result;
 8002494:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002498:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800249a:	fab3 f383 	clz	r3, r3
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	461a      	mov	r2, r3
 80024ac:	2300      	movs	r3, #0
 80024ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7fe ffaa 	bl	8001408 <HAL_GetTick>
 80024b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b8:	e009      	b.n	80024ce <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ba:	f7fe ffa5 	bl	8001408 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e18b      	b.n	80027e6 <HAL_RCC_OscConfig+0xe02>
 80024ce:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	fa93 f2a3 	rbit	r2, r3
 80024e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024e6:	601a      	str	r2, [r3, #0]
  return result;
 80024e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80024ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d102      	bne.n	8002508 <HAL_RCC_OscConfig+0xb24>
 8002502:	4b49      	ldr	r3, [pc, #292]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	e01b      	b.n	8002540 <HAL_RCC_OscConfig+0xb5c>
 8002508:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800250c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	fa93 f2a3 	rbit	r2, r3
 800251c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002526:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	fa93 f2a3 	rbit	r2, r3
 8002536:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	4b3a      	ldr	r3, [pc, #232]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002544:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002548:	6011      	str	r1, [r2, #0]
 800254a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	fa92 f1a2 	rbit	r1, r2
 8002554:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002558:	6011      	str	r1, [r2, #0]
  return result;
 800255a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	fab2 f282 	clz	r2, r2
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	f042 0220 	orr.w	r2, r2, #32
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	f002 021f 	and.w	r2, r2, #31
 8002570:	2101      	movs	r1, #1
 8002572:	fa01 f202 	lsl.w	r2, r1, r2
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d19e      	bne.n	80024ba <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002584:	1d3b      	adds	r3, r7, #4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800258a:	1d3b      	adds	r3, r7, #4
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	430b      	orrs	r3, r1
 8002592:	4925      	ldr	r1, [pc, #148]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 8002594:	4313      	orrs	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
 8002598:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800259c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025b0:	601a      	str	r2, [r3, #0]
  return result;
 80025b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025b6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	461a      	mov	r2, r3
 80025ca:	2301      	movs	r3, #1
 80025cc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7fe ff1b 	bl	8001408 <HAL_GetTick>
 80025d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025d6:	e009      	b.n	80025ec <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe ff16 	bl	8001408 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0fc      	b.n	80027e6 <HAL_RCC_OscConfig+0xe02>
 80025ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	fa93 f2a3 	rbit	r2, r3
 8002600:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002604:	601a      	str	r2, [r3, #0]
  return result;
 8002606:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800260a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800260c:	fab3 f383 	clz	r3, r3
 8002610:	b2db      	uxtb	r3, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	b2db      	uxtb	r3, r3
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_RCC_OscConfig+0xc48>
 8002620:	4b01      	ldr	r3, [pc, #4]	; (8002628 <HAL_RCC_OscConfig+0xc44>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	e01e      	b.n	8002664 <HAL_RCC_OscConfig+0xc80>
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002630:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002634:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	fa93 f2a3 	rbit	r2, r3
 8002640:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800264a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	fa93 f2a3 	rbit	r2, r3
 800265a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	4b63      	ldr	r3, [pc, #396]	; (80027f0 <HAL_RCC_OscConfig+0xe0c>)
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002668:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800266c:	6011      	str	r1, [r2, #0]
 800266e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	fa92 f1a2 	rbit	r1, r2
 8002678:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800267c:	6011      	str	r1, [r2, #0]
  return result;
 800267e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	fab2 f282 	clz	r2, r2
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	f042 0220 	orr.w	r2, r2, #32
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	f002 021f 	and.w	r2, r2, #31
 8002694:	2101      	movs	r1, #1
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d09b      	beq.n	80025d8 <HAL_RCC_OscConfig+0xbf4>
 80026a0:	e0a0      	b.n	80027e4 <HAL_RCC_OscConfig+0xe00>
 80026a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	fa93 f2a3 	rbit	r2, r3
 80026b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ba:	601a      	str	r2, [r3, #0]
  return result;
 80026bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	461a      	mov	r2, r3
 80026d4:	2300      	movs	r3, #0
 80026d6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7fe fe96 	bl	8001408 <HAL_GetTick>
 80026dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e0:	e009      	b.n	80026f6 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e2:	f7fe fe91 	bl	8001408 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e077      	b.n	80027e6 <HAL_RCC_OscConfig+0xe02>
 80026f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270e:	601a      	str	r2, [r3, #0]
  return result;
 8002710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002714:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	b2db      	uxtb	r3, r3
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b01      	cmp	r3, #1
 8002728:	d102      	bne.n	8002730 <HAL_RCC_OscConfig+0xd4c>
 800272a:	4b31      	ldr	r3, [pc, #196]	; (80027f0 <HAL_RCC_OscConfig+0xe0c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	e01b      	b.n	8002768 <HAL_RCC_OscConfig+0xd84>
 8002730:	f107 0320 	add.w	r3, r7, #32
 8002734:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002738:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273a:	f107 0320 	add.w	r3, r7, #32
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	fa93 f2a3 	rbit	r2, r3
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	f107 0318 	add.w	r3, r7, #24
 800274e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	f107 0318 	add.w	r3, r7, #24
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	fa93 f2a3 	rbit	r2, r3
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <HAL_RCC_OscConfig+0xe0c>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f107 0210 	add.w	r2, r7, #16
 800276c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002770:	6011      	str	r1, [r2, #0]
 8002772:	f107 0210 	add.w	r2, r7, #16
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	fa92 f1a2 	rbit	r1, r2
 800277c:	f107 020c 	add.w	r2, r7, #12
 8002780:	6011      	str	r1, [r2, #0]
  return result;
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	fab2 f282 	clz	r2, r2
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	f042 0220 	orr.w	r2, r2, #32
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	f002 021f 	and.w	r2, r2, #31
 8002798:	2101      	movs	r1, #1
 800279a:	fa01 f202 	lsl.w	r2, r1, r2
 800279e:	4013      	ands	r3, r2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d19e      	bne.n	80026e2 <HAL_RCC_OscConfig+0xcfe>
 80027a4:	e01e      	b.n	80027e4 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e018      	b.n	80027e6 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027b4:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <HAL_RCC_OscConfig+0xe0c>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027bc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027c4:	1d3b      	adds	r3, r7, #4
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d108      	bne.n	80027e0 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027ce:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b09e      	sub	sp, #120	; 0x78
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027fe:	2300      	movs	r3, #0
 8002800:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e162      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b90      	ldr	r3, [pc, #576]	; (8002a50 <HAL_RCC_ClockConfig+0x25c>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d910      	bls.n	800283c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b8d      	ldr	r3, [pc, #564]	; (8002a50 <HAL_RCC_ClockConfig+0x25c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 0207 	bic.w	r2, r3, #7
 8002822:	498b      	ldr	r1, [pc, #556]	; (8002a50 <HAL_RCC_ClockConfig+0x25c>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b89      	ldr	r3, [pc, #548]	; (8002a50 <HAL_RCC_ClockConfig+0x25c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0307 	and.w	r3, r3, #7
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e14a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b82      	ldr	r3, [pc, #520]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	497f      	ldr	r1, [pc, #508]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80dc 	beq.w	8002a20 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d13c      	bne.n	80028ea <HAL_RCC_ClockConfig+0xf6>
 8002870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002874:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800287e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	095b      	lsrs	r3, r3, #5
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f043 0301 	orr.w	r3, r3, #1
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d102      	bne.n	800289a <HAL_RCC_ClockConfig+0xa6>
 8002894:	4b6f      	ldr	r3, [pc, #444]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	e00f      	b.n	80028ba <HAL_RCC_ClockConfig+0xc6>
 800289a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800289e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a2:	fa93 f3a3 	rbit	r3, r3
 80028a6:	667b      	str	r3, [r7, #100]	; 0x64
 80028a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ac:	663b      	str	r3, [r7, #96]	; 0x60
 80028ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028b6:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028be:	65ba      	str	r2, [r7, #88]	; 0x58
 80028c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028c2:	fa92 f2a2 	rbit	r2, r2
 80028c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f042 0220 	orr.w	r2, r2, #32
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f002 021f 	and.w	r2, r2, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d17b      	bne.n	80029de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e0f3      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d13c      	bne.n	800296c <HAL_RCC_ClockConfig+0x178>
 80028f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
 8002908:	095b      	lsrs	r3, r3, #5
 800290a:	b2db      	uxtb	r3, r3
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b01      	cmp	r3, #1
 8002914:	d102      	bne.n	800291c <HAL_RCC_ClockConfig+0x128>
 8002916:	4b4f      	ldr	r3, [pc, #316]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	e00f      	b.n	800293c <HAL_RCC_ClockConfig+0x148>
 800291c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002920:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	647b      	str	r3, [r7, #68]	; 0x44
 800292a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800292e:	643b      	str	r3, [r7, #64]	; 0x40
 8002930:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002938:	4b46      	ldr	r3, [pc, #280]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002940:	63ba      	str	r2, [r7, #56]	; 0x38
 8002942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002944:	fa92 f2a2 	rbit	r2, r2
 8002948:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800294a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800294c:	fab2 f282 	clz	r2, r2
 8002950:	b2d2      	uxtb	r2, r2
 8002952:	f042 0220 	orr.w	r2, r2, #32
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f002 021f 	and.w	r2, r2, #31
 800295c:	2101      	movs	r1, #1
 800295e:	fa01 f202 	lsl.w	r2, r1, r2
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d13a      	bne.n	80029de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0b2      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x2de>
 800296c:	2302      	movs	r3, #2
 800296e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800297a:	fab3 f383 	clz	r3, r3
 800297e:	b2db      	uxtb	r3, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d102      	bne.n	8002994 <HAL_RCC_ClockConfig+0x1a0>
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	e00d      	b.n	80029b0 <HAL_RCC_ClockConfig+0x1bc>
 8002994:	2302      	movs	r3, #2
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
 80029a0:	2302      	movs	r3, #2
 80029a2:	623b      	str	r3, [r7, #32]
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	fa93 f3a3 	rbit	r3, r3
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	2202      	movs	r2, #2
 80029b2:	61ba      	str	r2, [r7, #24]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	fa92 f2a2 	rbit	r2, r2
 80029ba:	617a      	str	r2, [r7, #20]
  return result;
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	fab2 f282 	clz	r2, r2
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f042 0220 	orr.w	r2, r2, #32
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	f002 021f 	and.w	r2, r2, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f202 	lsl.w	r2, r1, r2
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e079      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	491a      	ldr	r1, [pc, #104]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fd0a 	bl	8001408 <HAL_GetTick>
 80029f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fe fd06 	bl	8001408 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e061      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_RCC_ClockConfig+0x260>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x25c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d214      	bcs.n	8002a58 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b08      	ldr	r3, [pc, #32]	; (8002a50 <HAL_RCC_ClockConfig+0x25c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 0207 	bic.w	r2, r3, #7
 8002a36:	4906      	ldr	r1, [pc, #24]	; (8002a50 <HAL_RCC_ClockConfig+0x25c>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b04      	ldr	r3, [pc, #16]	; (8002a50 <HAL_RCC_ClockConfig+0x25c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d005      	beq.n	8002a58 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e040      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x2de>
 8002a50:	40022000 	.word	0x40022000
 8002a54:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d008      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_RCC_ClockConfig+0x2e8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	491a      	ldr	r1, [pc, #104]	; (8002adc <HAL_RCC_ClockConfig+0x2e8>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a82:	4b16      	ldr	r3, [pc, #88]	; (8002adc <HAL_RCC_ClockConfig+0x2e8>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4912      	ldr	r1, [pc, #72]	; (8002adc <HAL_RCC_ClockConfig+0x2e8>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a96:	f000 f829 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8002a9a:	4601      	mov	r1, r0
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <HAL_RCC_ClockConfig+0x2e8>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa4:	22f0      	movs	r2, #240	; 0xf0
 8002aa6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	fa92 f2a2 	rbit	r2, r2
 8002aae:	60fa      	str	r2, [r7, #12]
  return result;
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	40d3      	lsrs	r3, r2
 8002aba:	4a09      	ldr	r2, [pc, #36]	; (8002ae0 <HAL_RCC_ClockConfig+0x2ec>)
 8002abc:	5cd3      	ldrb	r3, [r2, r3]
 8002abe:	fa21 f303 	lsr.w	r3, r1, r3
 8002ac2:	4a08      	ldr	r2, [pc, #32]	; (8002ae4 <HAL_RCC_ClockConfig+0x2f0>)
 8002ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_RCC_ClockConfig+0x2f4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fc58 	bl	8001380 <HAL_InitTick>
  
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3778      	adds	r7, #120	; 0x78
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	08005570 	.word	0x08005570
 8002ae4:	20000000 	.word	0x20000000
 8002ae8:	20000004 	.word	0x20000004

08002aec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b08b      	sub	sp, #44	; 0x2c
 8002af0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b06:	4b29      	ldr	r3, [pc, #164]	; (8002bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d002      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x30>
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d003      	beq.n	8002b22 <HAL_RCC_GetSysClockFreq+0x36>
 8002b1a:	e03c      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b1e:	623b      	str	r3, [r7, #32]
      break;
 8002b20:	e03c      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b28:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b2c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	fa92 f2a2 	rbit	r2, r2
 8002b34:	607a      	str	r2, [r7, #4]
  return result;
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	fab2 f282 	clz	r2, r2
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	40d3      	lsrs	r3, r2
 8002b40:	4a1c      	ldr	r2, [pc, #112]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b42:	5cd3      	ldrb	r3, [r2, r3]
 8002b44:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b46:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	220f      	movs	r2, #15
 8002b50:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	fa92 f2a2 	rbit	r2, r2
 8002b58:	60fa      	str	r2, [r7, #12]
  return result;
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	fab2 f282 	clz	r2, r2
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	40d3      	lsrs	r3, r2
 8002b64:	4a14      	ldr	r2, [pc, #80]	; (8002bb8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b66:	5cd3      	ldrb	r3, [r2, r3]
 8002b68:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
 8002b84:	e004      	b.n	8002b90 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b8a:	fb02 f303 	mul.w	r3, r2, r3
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	623b      	str	r3, [r7, #32]
      break;
 8002b94:	e002      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b98:	623b      	str	r3, [r7, #32]
      break;
 8002b9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	372c      	adds	r7, #44	; 0x2c
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	08005588 	.word	0x08005588
 8002bb8:	08005598 	.word	0x08005598
 8002bbc:	003d0900 	.word	0x003d0900

08002bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc4:	4b03      	ldr	r3, [pc, #12]	; (8002bd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000000 	.word	0x20000000

08002bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bde:	f7ff ffef 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002be2:	4601      	mov	r1, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bf0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	fa92 f2a2 	rbit	r2, r2
 8002bf8:	603a      	str	r2, [r7, #0]
  return result;
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	fab2 f282 	clz	r2, r2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	40d3      	lsrs	r3, r2
 8002c04:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c06:	5cd3      	ldrb	r3, [r2, r3]
 8002c08:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	08005580 	.word	0x08005580

08002c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c22:	f7ff ffcd 	bl	8002bc0 <HAL_RCC_GetHCLKFreq>
 8002c26:	4601      	mov	r1, r0
 8002c28:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c30:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c34:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	fa92 f2a2 	rbit	r2, r2
 8002c3c:	603a      	str	r2, [r7, #0]
  return result;
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	fab2 f282 	clz	r2, r2
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	40d3      	lsrs	r3, r2
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c4a:	5cd3      	ldrb	r3, [r2, r3]
 8002c4c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08005580 	.word	0x08005580

08002c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b092      	sub	sp, #72	; 0x48
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f000 80d4 	beq.w	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c84:	4b4e      	ldr	r3, [pc, #312]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10e      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c90:	4b4b      	ldr	r3, [pc, #300]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	4a4a      	ldr	r2, [pc, #296]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	61d3      	str	r3, [r2, #28]
 8002c9c:	4b48      	ldr	r3, [pc, #288]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cae:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d118      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cba:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a41      	ldr	r2, [pc, #260]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cc6:	f7fe fb9f 	bl	8001408 <HAL_GetTick>
 8002cca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cce:	f7fe fb9b 	bl	8001408 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b64      	cmp	r3, #100	; 0x64
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e169      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	4b38      	ldr	r3, [pc, #224]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d0f0      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cec:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 8084 	beq.w	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d06:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d07c      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d0c:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	fa93 f3a3 	rbit	r3, r3
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d26:	fab3 f383 	clz	r3, r3
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b26      	ldr	r3, [pc, #152]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	461a      	mov	r2, r3
 8002d36:	2301      	movs	r3, #1
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d3e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d5e:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d62:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d04b      	beq.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fb4b 	bl	8001408 <HAL_GetTick>
 8002d72:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	e00a      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d76:	f7fe fb47 	bl	8001408 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e113      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	2302      	movs	r3, #2
 8002d9a:	623b      	str	r3, [r7, #32]
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	fa93 f3a3 	rbit	r3, r3
 8002da2:	61fb      	str	r3, [r7, #28]
  return result;
 8002da4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	095b      	lsrs	r3, r3, #5
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f043 0302 	orr.w	r3, r3, #2
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d108      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002dba:	4b01      	ldr	r3, [pc, #4]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	e00d      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002dc0:	40021000 	.word	0x40021000
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	10908100 	.word	0x10908100
 8002dcc:	2302      	movs	r3, #2
 8002dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	4b78      	ldr	r3, [pc, #480]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2202      	movs	r2, #2
 8002dde:	613a      	str	r2, [r7, #16]
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	fa92 f2a2 	rbit	r2, r2
 8002de6:	60fa      	str	r2, [r7, #12]
  return result;
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	fab2 f282 	clz	r2, r2
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002df4:	b2d2      	uxtb	r2, r2
 8002df6:	f002 021f 	and.w	r2, r2, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d0b7      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e06:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	496a      	ldr	r1, [pc, #424]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e20:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	4a65      	ldr	r2, [pc, #404]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e38:	4b60      	ldr	r3, [pc, #384]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3c:	f023 0203 	bic.w	r2, r3, #3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	495d      	ldr	r1, [pc, #372]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d008      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e56:	4b59      	ldr	r3, [pc, #356]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	4956      	ldr	r1, [pc, #344]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e74:	4b51      	ldr	r3, [pc, #324]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	494e      	ldr	r1, [pc, #312]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e92:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	f023 0210 	bic.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69db      	ldr	r3, [r3, #28]
 8002e9e:	4947      	ldr	r1, [pc, #284]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002eb0:	4b42      	ldr	r3, [pc, #264]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	493f      	ldr	r1, [pc, #252]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ece:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	f023 0220 	bic.w	r2, r3, #32
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	4938      	ldr	r1, [pc, #224]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eec:	4b33      	ldr	r3, [pc, #204]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	4930      	ldr	r1, [pc, #192]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f0a:	4b2c      	ldr	r3, [pc, #176]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	4929      	ldr	r1, [pc, #164]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f28:	4b24      	ldr	r3, [pc, #144]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	4921      	ldr	r1, [pc, #132]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f46:	4b1d      	ldr	r3, [pc, #116]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	491a      	ldr	r1, [pc, #104]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f64:	4b15      	ldr	r3, [pc, #84]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	4912      	ldr	r1, [pc, #72]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	490b      	ldr	r1, [pc, #44]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d008      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002fa0:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fac:	4903      	ldr	r1, [pc, #12]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3748      	adds	r7, #72	; 0x48
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e09d      	b.n	800310e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d108      	bne.n	8002fec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe2:	d009      	beq.n	8002ff8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61da      	str	r2, [r3, #28]
 8002fea:	e005      	b.n	8002ff8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d106      	bne.n	8003018 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7fe f868 	bl	80010e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800302e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003038:	d902      	bls.n	8003040 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	e002      	b.n	8003046 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003044:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800304e:	d007      	beq.n	8003060 <HAL_SPI_Init+0xa0>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003058:	d002      	beq.n	8003060 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003070:	431a      	orrs	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308e:	431a      	orrs	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	69db      	ldr	r3, [r3, #28]
 8003094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003098:	431a      	orrs	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	ea42 0103 	orr.w	r1, r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	0c1b      	lsrs	r3, r3, #16
 80030bc:	f003 0204 	and.w	r2, r3, #4
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030dc:	ea42 0103 	orr.w	r1, r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b088      	sub	sp, #32
 800311a:	af02      	add	r7, sp, #8
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	603b      	str	r3, [r7, #0]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003132:	d112      	bne.n	800315a <HAL_SPI_Receive+0x44>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10e      	bne.n	800315a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2204      	movs	r2, #4
 8003140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003144:	88fa      	ldrh	r2, [r7, #6]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	4613      	mov	r3, r2
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f910 	bl	8003376 <HAL_SPI_TransmitReceive>
 8003156:	4603      	mov	r3, r0
 8003158:	e109      	b.n	800336e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_SPI_Receive+0x52>
 8003164:	2302      	movs	r3, #2
 8003166:	e102      	b.n	800336e <HAL_SPI_Receive+0x258>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003170:	f7fe f94a 	bl	8001408 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d002      	beq.n	8003188 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003182:	2302      	movs	r3, #2
 8003184:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003186:	e0e9      	b.n	800335c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_SPI_Receive+0x7e>
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003198:	e0e0      	b.n	800335c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2204      	movs	r2, #4
 800319e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	88fa      	ldrh	r2, [r7, #6]
 80031b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031e4:	d908      	bls.n	80031f8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	e007      	b.n	8003208 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003206:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003210:	d10f      	bne.n	8003232 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003220:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003230:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d007      	beq.n	8003250 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003258:	d867      	bhi.n	800332a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800325a:	e030      	b.n	80032be <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b01      	cmp	r3, #1
 8003268:	d117      	bne.n	800329a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f103 020c 	add.w	r2, r3, #12
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	7812      	ldrb	r2, [r2, #0]
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	1c5a      	adds	r2, r3, #1
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003298:	e011      	b.n	80032be <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800329a:	f7fe f8b5 	bl	8001408 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d803      	bhi.n	80032b2 <HAL_SPI_Receive+0x19c>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b0:	d102      	bne.n	80032b8 <HAL_SPI_Receive+0x1a2>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	75fb      	strb	r3, [r7, #23]
          goto error;
 80032bc:	e04e      	b.n	800335c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1c8      	bne.n	800325c <HAL_SPI_Receive+0x146>
 80032ca:	e034      	b.n	8003336 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d115      	bne.n	8003306 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	b292      	uxth	r2, r2
 80032e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	1c9a      	adds	r2, r3, #2
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b01      	subs	r3, #1
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003304:	e011      	b.n	800332a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003306:	f7fe f87f 	bl	8001408 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d803      	bhi.n	800331e <HAL_SPI_Receive+0x208>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d102      	bne.n	8003324 <HAL_SPI_Receive+0x20e>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003328:	e018      	b.n	800335c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1ca      	bne.n	80032cc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	6839      	ldr	r1, [r7, #0]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fb4c 	bl	80039d8 <SPI_EndRxTransaction>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003350:	2b00      	cmp	r3, #0
 8003352:	d002      	beq.n	800335a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	75fb      	strb	r3, [r7, #23]
 8003358:	e000      	b.n	800335c <HAL_SPI_Receive+0x246>
  }

error :
 800335a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800336c:	7dfb      	ldrb	r3, [r7, #23]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b08a      	sub	sp, #40	; 0x28
 800337a:	af00      	add	r7, sp, #0
 800337c:	60f8      	str	r0, [r7, #12]
 800337e:	60b9      	str	r1, [r7, #8]
 8003380:	607a      	str	r2, [r7, #4]
 8003382:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003384:	2301      	movs	r3, #1
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003388:	2300      	movs	r3, #0
 800338a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d101      	bne.n	800339c <HAL_SPI_TransmitReceive+0x26>
 8003398:	2302      	movs	r3, #2
 800339a:	e1fb      	b.n	8003794 <HAL_SPI_TransmitReceive+0x41e>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033a4:	f7fe f830 	bl	8001408 <HAL_GetTick>
 80033a8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80033b0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80033bc:	887b      	ldrh	r3, [r7, #2]
 80033be:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80033c0:	7efb      	ldrb	r3, [r7, #27]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d00e      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x6e>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033cc:	d106      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d102      	bne.n	80033dc <HAL_SPI_TransmitReceive+0x66>
 80033d6:	7efb      	ldrb	r3, [r7, #27]
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d003      	beq.n	80033e4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80033dc:	2302      	movs	r3, #2
 80033de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033e2:	e1cd      	b.n	8003780 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d005      	beq.n	80033f6 <HAL_SPI_TransmitReceive+0x80>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <HAL_SPI_TransmitReceive+0x80>
 80033f0:	887b      	ldrh	r3, [r7, #2]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80033fc:	e1c0      	b.n	8003780 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b04      	cmp	r3, #4
 8003408:	d003      	beq.n	8003412 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2205      	movs	r2, #5
 800340e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	887a      	ldrh	r2, [r7, #2]
 8003422:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	887a      	ldrh	r2, [r7, #2]
 800342a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	887a      	ldrh	r2, [r7, #2]
 8003438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	887a      	ldrh	r2, [r7, #2]
 800343e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003454:	d802      	bhi.n	800345c <HAL_SPI_TransmitReceive+0xe6>
 8003456:	8a3b      	ldrh	r3, [r7, #16]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d908      	bls.n	800346e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	e007      	b.n	800347e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800347c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003488:	2b40      	cmp	r3, #64	; 0x40
 800348a:	d007      	beq.n	800349c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800349a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034a4:	d97c      	bls.n	80035a0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_SPI_TransmitReceive+0x13e>
 80034ae:	8a7b      	ldrh	r3, [r7, #18]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d169      	bne.n	8003588 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b8:	881a      	ldrh	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	1c9a      	adds	r2, r3, #2
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034d8:	e056      	b.n	8003588 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d11b      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x1aa>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d016      	beq.n	8003520 <HAL_SPI_TransmitReceive+0x1aa>
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d113      	bne.n	8003520 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	881a      	ldrh	r2, [r3, #0]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	1c9a      	adds	r2, r3, #2
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003512:	b29b      	uxth	r3, r3
 8003514:	3b01      	subs	r3, #1
 8003516:	b29a      	uxth	r2, r3
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b01      	cmp	r3, #1
 800352c:	d11c      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x1f2>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d016      	beq.n	8003568 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	b292      	uxth	r2, r2
 8003546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	1c9a      	adds	r2, r3, #2
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003558:	b29b      	uxth	r3, r3
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003564:	2301      	movs	r3, #1
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003568:	f7fd ff4e 	bl	8001408 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003574:	429a      	cmp	r2, r3
 8003576:	d807      	bhi.n	8003588 <HAL_SPI_TransmitReceive+0x212>
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d003      	beq.n	8003588 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003586:	e0fb      	b.n	8003780 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1a3      	bne.n	80034da <HAL_SPI_TransmitReceive+0x164>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003598:	b29b      	uxth	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d19d      	bne.n	80034da <HAL_SPI_TransmitReceive+0x164>
 800359e:	e0df      	b.n	8003760 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_SPI_TransmitReceive+0x23a>
 80035a8:	8a7b      	ldrh	r3, [r7, #18]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	f040 80cb 	bne.w	8003746 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d912      	bls.n	80035e0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	881a      	ldrh	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	1c9a      	adds	r2, r3, #2
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b02      	subs	r3, #2
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035de:	e0b2      	b.n	8003746 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	7812      	ldrb	r2, [r2, #0]
 80035ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003606:	e09e      	b.n	8003746 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b02      	cmp	r3, #2
 8003614:	d134      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x30a>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	d02f      	beq.n	8003680 <HAL_SPI_TransmitReceive+0x30a>
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	2b01      	cmp	r3, #1
 8003624:	d12c      	bne.n	8003680 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800362a:	b29b      	uxth	r3, r3
 800362c:	2b01      	cmp	r3, #1
 800362e:	d912      	bls.n	8003656 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003634:	881a      	ldrh	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	1c9a      	adds	r2, r3, #2
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b02      	subs	r3, #2
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003654:	e012      	b.n	800367c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	330c      	adds	r3, #12
 8003660:	7812      	ldrb	r2, [r2, #0]
 8003662:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d148      	bne.n	8003720 <HAL_SPI_TransmitReceive+0x3aa>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d042      	beq.n	8003720 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d923      	bls.n	80036ee <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	b292      	uxth	r2, r2
 80036b2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b02      	subs	r3, #2
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d81f      	bhi.n	800371c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	e016      	b.n	800371c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f103 020c 	add.w	r2, r3, #12
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	7812      	ldrb	r2, [r2, #0]
 80036fc:	b2d2      	uxtb	r2, r2
 80036fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	1c5a      	adds	r2, r3, #1
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003710:	b29b      	uxth	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b29a      	uxth	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800371c:	2301      	movs	r3, #1
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003720:	f7fd fe72 	bl	8001408 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372c:	429a      	cmp	r2, r3
 800372e:	d803      	bhi.n	8003738 <HAL_SPI_TransmitReceive+0x3c2>
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003736:	d102      	bne.n	800373e <HAL_SPI_TransmitReceive+0x3c8>
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	2b00      	cmp	r3, #0
 800373c:	d103      	bne.n	8003746 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003744:	e01c      	b.n	8003780 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	f47f af5b 	bne.w	8003608 <HAL_SPI_TransmitReceive+0x292>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	f47f af54 	bne.w	8003608 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f98f 	bl	8003a88 <SPI_EndRxTxTransaction>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d006      	beq.n	800377e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2220      	movs	r2, #32
 800377a:	661a      	str	r2, [r3, #96]	; 0x60
 800377c:	e000      	b.n	8003780 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800377e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003790:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003794:	4618      	mov	r0, r3
 8003796:	3728      	adds	r7, #40	; 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037ac:	f7fd fe2c 	bl	8001408 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	1a9b      	subs	r3, r3, r2
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	4413      	add	r3, r2
 80037ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037bc:	f7fd fe24 	bl	8001408 <HAL_GetTick>
 80037c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037c2:	4b39      	ldr	r3, [pc, #228]	; (80038a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	015b      	lsls	r3, r3, #5
 80037c8:	0d1b      	lsrs	r3, r3, #20
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037d2:	e054      	b.n	800387e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d050      	beq.n	800387e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037dc:	f7fd fe14 	bl	8001408 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	69fa      	ldr	r2, [r7, #28]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d902      	bls.n	80037f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d13d      	bne.n	800386e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800380a:	d111      	bne.n	8003830 <SPI_WaitFlagStateUntilTimeout+0x94>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003814:	d004      	beq.n	8003820 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381e:	d107      	bne.n	8003830 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800382e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003838:	d10f      	bne.n	800385a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e017      	b.n	800389e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	3b01      	subs	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4013      	ands	r3, r2
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	429a      	cmp	r2, r3
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	429a      	cmp	r2, r3
 800389a:	d19b      	bne.n	80037d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000000 	.word	0x20000000

080038ac <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08a      	sub	sp, #40	; 0x28
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80038be:	f7fd fda3 	bl	8001408 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	4413      	add	r3, r2
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80038ce:	f7fd fd9b 	bl	8001408 <HAL_GetTick>
 80038d2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	330c      	adds	r3, #12
 80038da:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80038dc:	4b3d      	ldr	r3, [pc, #244]	; (80039d4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	00da      	lsls	r2, r3, #3
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	0d1b      	lsrs	r3, r3, #20
 80038ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ee:	fb02 f303 	mul.w	r3, r2, r3
 80038f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80038f4:	e060      	b.n	80039b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80038fc:	d107      	bne.n	800390e <SPI_WaitFifoStateUntilTimeout+0x62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	b2db      	uxtb	r3, r3
 800390a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800390c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d050      	beq.n	80039b8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003916:	f7fd fd77 	bl	8001408 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003922:	429a      	cmp	r2, r3
 8003924:	d902      	bls.n	800392c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	2b00      	cmp	r3, #0
 800392a:	d13d      	bne.n	80039a8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800393a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003944:	d111      	bne.n	800396a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394e:	d004      	beq.n	800395a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003958:	d107      	bne.n	800396a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003968:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003972:	d10f      	bne.n	8003994 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003992:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e010      	b.n	80039ca <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	4013      	ands	r3, r2
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d196      	bne.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3728      	adds	r7, #40	; 0x28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	20000000 	.word	0x20000000

080039d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af02      	add	r7, sp, #8
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ec:	d111      	bne.n	8003a12 <SPI_EndRxTransaction+0x3a>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f6:	d004      	beq.n	8003a02 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a00:	d107      	bne.n	8003a12 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a10:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2180      	movs	r1, #128	; 0x80
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f7ff febd 	bl	800379c <SPI_WaitFlagStateUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e023      	b.n	8003a80 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a40:	d11d      	bne.n	8003a7e <SPI_EndRxTransaction+0xa6>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a4a:	d004      	beq.n	8003a56 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a54:	d113      	bne.n	8003a7e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f7ff ff22 	bl	80038ac <SPI_WaitFifoStateUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e000      	b.n	8003a80 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7ff ff03 	bl	80038ac <SPI_WaitFifoStateUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ab0:	f043 0220 	orr.w	r2, r3, #32
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e027      	b.n	8003b0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2180      	movs	r1, #128	; 0x80
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7ff fe68 	bl	800379c <SPI_WaitFlagStateUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e014      	b.n	8003b0c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f7ff fedc 	bl	80038ac <SPI_WaitFifoStateUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afe:	f043 0220 	orr.w	r2, r3, #32
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e000      	b.n	8003b0c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e048      	b.n	8003bb8 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fb18 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0201 	bic.w	r2, r2, #1
 8003b50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f8c8 	bl	8003ce8 <UART_SetConfig>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e02a      	b.n	8003bb8 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fa90 	bl	8004090 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003b8e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0208 	orr.w	r2, r2, #8
 8003b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0201 	orr.w	r2, r2, #1
 8003bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fb0f 	bl	80041d4 <UART_CheckIdleState>
 8003bb6:	4603      	mov	r3, r0
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3708      	adds	r7, #8
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b08a      	sub	sp, #40	; 0x28
 8003bc4:	af02      	add	r7, sp, #8
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	f040 8082 	bne.w	8003cde <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <HAL_UART_Transmit+0x26>
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e07a      	b.n	8003ce0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_UART_Transmit+0x38>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e073      	b.n	8003ce0 <HAL_UART_Transmit+0x120>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2221      	movs	r2, #33	; 0x21
 8003c0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c0e:	f7fd fbfb 	bl	8001408 <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	88fa      	ldrh	r2, [r7, #6]
 8003c18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c2c:	d108      	bne.n	8003c40 <HAL_UART_Transmit+0x80>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d104      	bne.n	8003c40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	e003      	b.n	8003c48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c50:	e02d      	b.n	8003cae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f000 fb02 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e039      	b.n	8003ce0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	881a      	ldrh	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7e:	b292      	uxth	r2, r2
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	3302      	adds	r3, #2
 8003c86:	61bb      	str	r3, [r7, #24]
 8003c88:	e008      	b.n	8003c9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	781a      	ldrb	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	b292      	uxth	r2, r2
 8003c94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1cb      	bne.n	8003c52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2140      	movs	r1, #64	; 0x40
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 face 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e005      	b.n	8003ce0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e000      	b.n	8003ce0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
  }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3720      	adds	r7, #32
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d16:	f023 030c 	bic.w	r3, r3, #12
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	6979      	ldr	r1, [r7, #20]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4aae      	ldr	r2, [pc, #696]	; (800401c <UART_SetConfig+0x334>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d120      	bne.n	8003daa <UART_SetConfig+0xc2>
 8003d68:	4bad      	ldr	r3, [pc, #692]	; (8004020 <UART_SetConfig+0x338>)
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d817      	bhi.n	8003da4 <UART_SetConfig+0xbc>
 8003d74:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <UART_SetConfig+0x94>)
 8003d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7a:	bf00      	nop
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d99 	.word	0x08003d99
 8003d84:	08003d9f 	.word	0x08003d9f
 8003d88:	08003d93 	.word	0x08003d93
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e0b5      	b.n	8003efe <UART_SetConfig+0x216>
 8003d92:	2302      	movs	r3, #2
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e0b2      	b.n	8003efe <UART_SetConfig+0x216>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e0af      	b.n	8003efe <UART_SetConfig+0x216>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e0ac      	b.n	8003efe <UART_SetConfig+0x216>
 8003da4:	2310      	movs	r3, #16
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e0a9      	b.n	8003efe <UART_SetConfig+0x216>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a9d      	ldr	r2, [pc, #628]	; (8004024 <UART_SetConfig+0x33c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d124      	bne.n	8003dfe <UART_SetConfig+0x116>
 8003db4:	4b9a      	ldr	r3, [pc, #616]	; (8004020 <UART_SetConfig+0x338>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dbc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dc0:	d011      	beq.n	8003de6 <UART_SetConfig+0xfe>
 8003dc2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dc6:	d817      	bhi.n	8003df8 <UART_SetConfig+0x110>
 8003dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dcc:	d011      	beq.n	8003df2 <UART_SetConfig+0x10a>
 8003dce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dd2:	d811      	bhi.n	8003df8 <UART_SetConfig+0x110>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d003      	beq.n	8003de0 <UART_SetConfig+0xf8>
 8003dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ddc:	d006      	beq.n	8003dec <UART_SetConfig+0x104>
 8003dde:	e00b      	b.n	8003df8 <UART_SetConfig+0x110>
 8003de0:	2300      	movs	r3, #0
 8003de2:	77fb      	strb	r3, [r7, #31]
 8003de4:	e08b      	b.n	8003efe <UART_SetConfig+0x216>
 8003de6:	2302      	movs	r3, #2
 8003de8:	77fb      	strb	r3, [r7, #31]
 8003dea:	e088      	b.n	8003efe <UART_SetConfig+0x216>
 8003dec:	2304      	movs	r3, #4
 8003dee:	77fb      	strb	r3, [r7, #31]
 8003df0:	e085      	b.n	8003efe <UART_SetConfig+0x216>
 8003df2:	2308      	movs	r3, #8
 8003df4:	77fb      	strb	r3, [r7, #31]
 8003df6:	e082      	b.n	8003efe <UART_SetConfig+0x216>
 8003df8:	2310      	movs	r3, #16
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e07f      	b.n	8003efe <UART_SetConfig+0x216>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a89      	ldr	r2, [pc, #548]	; (8004028 <UART_SetConfig+0x340>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d124      	bne.n	8003e52 <UART_SetConfig+0x16a>
 8003e08:	4b85      	ldr	r3, [pc, #532]	; (8004020 <UART_SetConfig+0x338>)
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e10:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e14:	d011      	beq.n	8003e3a <UART_SetConfig+0x152>
 8003e16:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e1a:	d817      	bhi.n	8003e4c <UART_SetConfig+0x164>
 8003e1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e20:	d011      	beq.n	8003e46 <UART_SetConfig+0x15e>
 8003e22:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e26:	d811      	bhi.n	8003e4c <UART_SetConfig+0x164>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <UART_SetConfig+0x14c>
 8003e2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e30:	d006      	beq.n	8003e40 <UART_SetConfig+0x158>
 8003e32:	e00b      	b.n	8003e4c <UART_SetConfig+0x164>
 8003e34:	2300      	movs	r3, #0
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e061      	b.n	8003efe <UART_SetConfig+0x216>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e05e      	b.n	8003efe <UART_SetConfig+0x216>
 8003e40:	2304      	movs	r3, #4
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e05b      	b.n	8003efe <UART_SetConfig+0x216>
 8003e46:	2308      	movs	r3, #8
 8003e48:	77fb      	strb	r3, [r7, #31]
 8003e4a:	e058      	b.n	8003efe <UART_SetConfig+0x216>
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	77fb      	strb	r3, [r7, #31]
 8003e50:	e055      	b.n	8003efe <UART_SetConfig+0x216>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a75      	ldr	r2, [pc, #468]	; (800402c <UART_SetConfig+0x344>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d124      	bne.n	8003ea6 <UART_SetConfig+0x1be>
 8003e5c:	4b70      	ldr	r3, [pc, #448]	; (8004020 <UART_SetConfig+0x338>)
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e68:	d011      	beq.n	8003e8e <UART_SetConfig+0x1a6>
 8003e6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e6e:	d817      	bhi.n	8003ea0 <UART_SetConfig+0x1b8>
 8003e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e74:	d011      	beq.n	8003e9a <UART_SetConfig+0x1b2>
 8003e76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e7a:	d811      	bhi.n	8003ea0 <UART_SetConfig+0x1b8>
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <UART_SetConfig+0x1a0>
 8003e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e84:	d006      	beq.n	8003e94 <UART_SetConfig+0x1ac>
 8003e86:	e00b      	b.n	8003ea0 <UART_SetConfig+0x1b8>
 8003e88:	2300      	movs	r3, #0
 8003e8a:	77fb      	strb	r3, [r7, #31]
 8003e8c:	e037      	b.n	8003efe <UART_SetConfig+0x216>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	77fb      	strb	r3, [r7, #31]
 8003e92:	e034      	b.n	8003efe <UART_SetConfig+0x216>
 8003e94:	2304      	movs	r3, #4
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e031      	b.n	8003efe <UART_SetConfig+0x216>
 8003e9a:	2308      	movs	r3, #8
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e02e      	b.n	8003efe <UART_SetConfig+0x216>
 8003ea0:	2310      	movs	r3, #16
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e02b      	b.n	8003efe <UART_SetConfig+0x216>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a61      	ldr	r2, [pc, #388]	; (8004030 <UART_SetConfig+0x348>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d124      	bne.n	8003efa <UART_SetConfig+0x212>
 8003eb0:	4b5b      	ldr	r3, [pc, #364]	; (8004020 <UART_SetConfig+0x338>)
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003eb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ebc:	d011      	beq.n	8003ee2 <UART_SetConfig+0x1fa>
 8003ebe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ec2:	d817      	bhi.n	8003ef4 <UART_SetConfig+0x20c>
 8003ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ec8:	d011      	beq.n	8003eee <UART_SetConfig+0x206>
 8003eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ece:	d811      	bhi.n	8003ef4 <UART_SetConfig+0x20c>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <UART_SetConfig+0x1f4>
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed8:	d006      	beq.n	8003ee8 <UART_SetConfig+0x200>
 8003eda:	e00b      	b.n	8003ef4 <UART_SetConfig+0x20c>
 8003edc:	2300      	movs	r3, #0
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e00d      	b.n	8003efe <UART_SetConfig+0x216>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	77fb      	strb	r3, [r7, #31]
 8003ee6:	e00a      	b.n	8003efe <UART_SetConfig+0x216>
 8003ee8:	2304      	movs	r3, #4
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e007      	b.n	8003efe <UART_SetConfig+0x216>
 8003eee:	2308      	movs	r3, #8
 8003ef0:	77fb      	strb	r3, [r7, #31]
 8003ef2:	e004      	b.n	8003efe <UART_SetConfig+0x216>
 8003ef4:	2310      	movs	r3, #16
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e001      	b.n	8003efe <UART_SetConfig+0x216>
 8003efa:	2310      	movs	r3, #16
 8003efc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f06:	d15c      	bne.n	8003fc2 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d827      	bhi.n	8003f5e <UART_SetConfig+0x276>
 8003f0e:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <UART_SetConfig+0x22c>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f39 	.word	0x08003f39
 8003f18:	08003f41 	.word	0x08003f41
 8003f1c:	08003f49 	.word	0x08003f49
 8003f20:	08003f5f 	.word	0x08003f5f
 8003f24:	08003f4f 	.word	0x08003f4f
 8003f28:	08003f5f 	.word	0x08003f5f
 8003f2c:	08003f5f 	.word	0x08003f5f
 8003f30:	08003f5f 	.word	0x08003f5f
 8003f34:	08003f57 	.word	0x08003f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7fe fe4e 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 8003f3c:	61b8      	str	r0, [r7, #24]
        break;
 8003f3e:	e013      	b.n	8003f68 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f40:	f7fe fe6c 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8003f44:	61b8      	str	r0, [r7, #24]
        break;
 8003f46:	e00f      	b.n	8003f68 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f48:	4b3a      	ldr	r3, [pc, #232]	; (8004034 <UART_SetConfig+0x34c>)
 8003f4a:	61bb      	str	r3, [r7, #24]
        break;
 8003f4c:	e00c      	b.n	8003f68 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f4e:	f7fe fdcd 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 8003f52:	61b8      	str	r0, [r7, #24]
        break;
 8003f54:	e008      	b.n	8003f68 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f5a:	61bb      	str	r3, [r7, #24]
        break;
 8003f5c:	e004      	b.n	8003f68 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	77bb      	strb	r3, [r7, #30]
        break;
 8003f66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	f000 8085 	beq.w	800407a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	005a      	lsls	r2, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	085b      	lsrs	r3, r3, #1
 8003f7a:	441a      	add	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	2b0f      	cmp	r3, #15
 8003f8c:	d916      	bls.n	8003fbc <UART_SetConfig+0x2d4>
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d212      	bcs.n	8003fbc <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	f023 030f 	bic.w	r3, r3, #15
 8003f9e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	085b      	lsrs	r3, r3, #1
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	f003 0307 	and.w	r3, r3, #7
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	89fb      	ldrh	r3, [r7, #14]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	89fa      	ldrh	r2, [r7, #14]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	e05e      	b.n	800407a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	77bb      	strb	r3, [r7, #30]
 8003fc0:	e05b      	b.n	800407a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fc2:	7ffb      	ldrb	r3, [r7, #31]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d837      	bhi.n	8004038 <UART_SetConfig+0x350>
 8003fc8:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <UART_SetConfig+0x2e8>)
 8003fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fce:	bf00      	nop
 8003fd0:	08003ff5 	.word	0x08003ff5
 8003fd4:	08003ffd 	.word	0x08003ffd
 8003fd8:	08004005 	.word	0x08004005
 8003fdc:	08004039 	.word	0x08004039
 8003fe0:	0800400b 	.word	0x0800400b
 8003fe4:	08004039 	.word	0x08004039
 8003fe8:	08004039 	.word	0x08004039
 8003fec:	08004039 	.word	0x08004039
 8003ff0:	08004013 	.word	0x08004013
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ff4:	f7fe fdf0 	bl	8002bd8 <HAL_RCC_GetPCLK1Freq>
 8003ff8:	61b8      	str	r0, [r7, #24]
        break;
 8003ffa:	e022      	b.n	8004042 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ffc:	f7fe fe0e 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8004000:	61b8      	str	r0, [r7, #24]
        break;
 8004002:	e01e      	b.n	8004042 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <UART_SetConfig+0x34c>)
 8004006:	61bb      	str	r3, [r7, #24]
        break;
 8004008:	e01b      	b.n	8004042 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800400a:	f7fe fd6f 	bl	8002aec <HAL_RCC_GetSysClockFreq>
 800400e:	61b8      	str	r0, [r7, #24]
        break;
 8004010:	e017      	b.n	8004042 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004016:	61bb      	str	r3, [r7, #24]
        break;
 8004018:	e013      	b.n	8004042 <UART_SetConfig+0x35a>
 800401a:	bf00      	nop
 800401c:	40013800 	.word	0x40013800
 8004020:	40021000 	.word	0x40021000
 8004024:	40004400 	.word	0x40004400
 8004028:	40004800 	.word	0x40004800
 800402c:	40004c00 	.word	0x40004c00
 8004030:	40005000 	.word	0x40005000
 8004034:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	77bb      	strb	r3, [r7, #30]
        break;
 8004040:	bf00      	nop
    }

    if (pclk != 0U)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d018      	beq.n	800407a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	085a      	lsrs	r2, r3, #1
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	441a      	add	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	fbb2 f3f3 	udiv	r3, r2, r3
 800405a:	b29b      	uxth	r3, r3
 800405c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	2b0f      	cmp	r3, #15
 8004062:	d908      	bls.n	8004076 <UART_SetConfig+0x38e>
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406a:	d204      	bcs.n	8004076 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	60da      	str	r2, [r3, #12]
 8004074:	e001      	b.n	800407a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004086:	7fbb      	ldrb	r3, [r7, #30]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418e:	d10a      	bne.n	80041a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af02      	add	r7, sp, #8
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041e4:	f7fd f910 	bl	8001408 <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d10e      	bne.n	8004216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f82d 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e023      	b.n	800425e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d10e      	bne.n	8004242 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f817 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e00d      	b.n	800425e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b09c      	sub	sp, #112	; 0x70
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	4613      	mov	r3, r2
 8004274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004276:	e0a5      	b.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	f000 80a1 	beq.w	80043c4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7fd f8c1 	bl	8001408 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <UART_WaitOnFlagUntilTimeout+0x32>
 8004292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004294:	2b00      	cmp	r3, #0
 8004296:	d13e      	bne.n	8004316 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042ac:	667b      	str	r3, [r7, #100]	; 0x64
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042b8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042be:	e841 2300 	strex	r3, r2, [r1]
 80042c2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e6      	bne.n	8004298 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3308      	adds	r3, #8
 80042d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d4:	e853 3f00 	ldrex	r3, [r3]
 80042d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	f023 0301 	bic.w	r3, r3, #1
 80042e0:	663b      	str	r3, [r7, #96]	; 0x60
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80042ea:	64ba      	str	r2, [r7, #72]	; 0x48
 80042ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e5      	bne.n	80042ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2220      	movs	r2, #32
 8004302:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e067      	b.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d04f      	beq.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800432e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004332:	d147      	bne.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800433c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004352:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800435c:	637b      	str	r3, [r7, #52]	; 0x34
 800435e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800436a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e6      	bne.n	800433e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	3308      	adds	r3, #8
 8004376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	e853 3f00 	ldrex	r3, [r3]
 800437e:	613b      	str	r3, [r7, #16]
   return(result);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f023 0301 	bic.w	r3, r3, #1
 8004386:	66bb      	str	r3, [r7, #104]	; 0x68
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3308      	adds	r3, #8
 800438e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004390:	623a      	str	r2, [r7, #32]
 8004392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	69f9      	ldr	r1, [r7, #28]
 8004396:	6a3a      	ldr	r2, [r7, #32]
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	61bb      	str	r3, [r7, #24]
   return(result);
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e5      	bne.n	8004370 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2220      	movs	r2, #32
 80043a8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e010      	b.n	80043e6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4013      	ands	r3, r2
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	429a      	cmp	r2, r3
 80043e0:	f43f af4a 	beq.w	8004278 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3770      	adds	r7, #112	; 0x70
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <cos>:
 80043f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043f2:	ec53 2b10 	vmov	r2, r3, d0
 80043f6:	4824      	ldr	r0, [pc, #144]	; (8004488 <cos+0x98>)
 80043f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80043fc:	4281      	cmp	r1, r0
 80043fe:	dc06      	bgt.n	800440e <cos+0x1e>
 8004400:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8004480 <cos+0x90>
 8004404:	f000 faa4 	bl	8004950 <__kernel_cos>
 8004408:	ec51 0b10 	vmov	r0, r1, d0
 800440c:	e007      	b.n	800441e <cos+0x2e>
 800440e:	481f      	ldr	r0, [pc, #124]	; (800448c <cos+0x9c>)
 8004410:	4281      	cmp	r1, r0
 8004412:	dd09      	ble.n	8004428 <cos+0x38>
 8004414:	ee10 0a10 	vmov	r0, s0
 8004418:	4619      	mov	r1, r3
 800441a:	f7fb fed9 	bl	80001d0 <__aeabi_dsub>
 800441e:	ec41 0b10 	vmov	d0, r0, r1
 8004422:	b005      	add	sp, #20
 8004424:	f85d fb04 	ldr.w	pc, [sp], #4
 8004428:	4668      	mov	r0, sp
 800442a:	f000 f885 	bl	8004538 <__ieee754_rem_pio2>
 800442e:	f000 0003 	and.w	r0, r0, #3
 8004432:	2801      	cmp	r0, #1
 8004434:	d007      	beq.n	8004446 <cos+0x56>
 8004436:	2802      	cmp	r0, #2
 8004438:	d012      	beq.n	8004460 <cos+0x70>
 800443a:	b9c0      	cbnz	r0, 800446e <cos+0x7e>
 800443c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004440:	ed9d 0b00 	vldr	d0, [sp]
 8004444:	e7de      	b.n	8004404 <cos+0x14>
 8004446:	ed9d 1b02 	vldr	d1, [sp, #8]
 800444a:	ed9d 0b00 	vldr	d0, [sp]
 800444e:	f000 fe87 	bl	8005160 <__kernel_sin>
 8004452:	ec53 2b10 	vmov	r2, r3, d0
 8004456:	ee10 0a10 	vmov	r0, s0
 800445a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800445e:	e7de      	b.n	800441e <cos+0x2e>
 8004460:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004464:	ed9d 0b00 	vldr	d0, [sp]
 8004468:	f000 fa72 	bl	8004950 <__kernel_cos>
 800446c:	e7f1      	b.n	8004452 <cos+0x62>
 800446e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004472:	ed9d 0b00 	vldr	d0, [sp]
 8004476:	2001      	movs	r0, #1
 8004478:	f000 fe72 	bl	8005160 <__kernel_sin>
 800447c:	e7c4      	b.n	8004408 <cos+0x18>
 800447e:	bf00      	nop
	...
 8004488:	3fe921fb 	.word	0x3fe921fb
 800448c:	7fefffff 	.word	0x7fefffff

08004490 <sin>:
 8004490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004492:	ec53 2b10 	vmov	r2, r3, d0
 8004496:	4826      	ldr	r0, [pc, #152]	; (8004530 <sin+0xa0>)
 8004498:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800449c:	4281      	cmp	r1, r0
 800449e:	dc07      	bgt.n	80044b0 <sin+0x20>
 80044a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8004528 <sin+0x98>
 80044a4:	2000      	movs	r0, #0
 80044a6:	f000 fe5b 	bl	8005160 <__kernel_sin>
 80044aa:	ec51 0b10 	vmov	r0, r1, d0
 80044ae:	e007      	b.n	80044c0 <sin+0x30>
 80044b0:	4820      	ldr	r0, [pc, #128]	; (8004534 <sin+0xa4>)
 80044b2:	4281      	cmp	r1, r0
 80044b4:	dd09      	ble.n	80044ca <sin+0x3a>
 80044b6:	ee10 0a10 	vmov	r0, s0
 80044ba:	4619      	mov	r1, r3
 80044bc:	f7fb fe88 	bl	80001d0 <__aeabi_dsub>
 80044c0:	ec41 0b10 	vmov	d0, r0, r1
 80044c4:	b005      	add	sp, #20
 80044c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80044ca:	4668      	mov	r0, sp
 80044cc:	f000 f834 	bl	8004538 <__ieee754_rem_pio2>
 80044d0:	f000 0003 	and.w	r0, r0, #3
 80044d4:	2801      	cmp	r0, #1
 80044d6:	d008      	beq.n	80044ea <sin+0x5a>
 80044d8:	2802      	cmp	r0, #2
 80044da:	d00d      	beq.n	80044f8 <sin+0x68>
 80044dc:	b9d0      	cbnz	r0, 8004514 <sin+0x84>
 80044de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80044e2:	ed9d 0b00 	vldr	d0, [sp]
 80044e6:	2001      	movs	r0, #1
 80044e8:	e7dd      	b.n	80044a6 <sin+0x16>
 80044ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80044ee:	ed9d 0b00 	vldr	d0, [sp]
 80044f2:	f000 fa2d 	bl	8004950 <__kernel_cos>
 80044f6:	e7d8      	b.n	80044aa <sin+0x1a>
 80044f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80044fc:	ed9d 0b00 	vldr	d0, [sp]
 8004500:	2001      	movs	r0, #1
 8004502:	f000 fe2d 	bl	8005160 <__kernel_sin>
 8004506:	ec53 2b10 	vmov	r2, r3, d0
 800450a:	ee10 0a10 	vmov	r0, s0
 800450e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004512:	e7d5      	b.n	80044c0 <sin+0x30>
 8004514:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004518:	ed9d 0b00 	vldr	d0, [sp]
 800451c:	f000 fa18 	bl	8004950 <__kernel_cos>
 8004520:	e7f1      	b.n	8004506 <sin+0x76>
 8004522:	bf00      	nop
 8004524:	f3af 8000 	nop.w
	...
 8004530:	3fe921fb 	.word	0x3fe921fb
 8004534:	7fefffff 	.word	0x7fefffff

08004538 <__ieee754_rem_pio2>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	ed2d 8b02 	vpush	{d8}
 8004540:	ec55 4b10 	vmov	r4, r5, d0
 8004544:	4bca      	ldr	r3, [pc, #808]	; (8004870 <__ieee754_rem_pio2+0x338>)
 8004546:	b08b      	sub	sp, #44	; 0x2c
 8004548:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800454c:	4598      	cmp	r8, r3
 800454e:	4682      	mov	sl, r0
 8004550:	9502      	str	r5, [sp, #8]
 8004552:	dc08      	bgt.n	8004566 <__ieee754_rem_pio2+0x2e>
 8004554:	2200      	movs	r2, #0
 8004556:	2300      	movs	r3, #0
 8004558:	ed80 0b00 	vstr	d0, [r0]
 800455c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004560:	f04f 0b00 	mov.w	fp, #0
 8004564:	e028      	b.n	80045b8 <__ieee754_rem_pio2+0x80>
 8004566:	4bc3      	ldr	r3, [pc, #780]	; (8004874 <__ieee754_rem_pio2+0x33c>)
 8004568:	4598      	cmp	r8, r3
 800456a:	dc78      	bgt.n	800465e <__ieee754_rem_pio2+0x126>
 800456c:	9b02      	ldr	r3, [sp, #8]
 800456e:	4ec2      	ldr	r6, [pc, #776]	; (8004878 <__ieee754_rem_pio2+0x340>)
 8004570:	2b00      	cmp	r3, #0
 8004572:	ee10 0a10 	vmov	r0, s0
 8004576:	a3b0      	add	r3, pc, #704	; (adr r3, 8004838 <__ieee754_rem_pio2+0x300>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	4629      	mov	r1, r5
 800457e:	dd39      	ble.n	80045f4 <__ieee754_rem_pio2+0xbc>
 8004580:	f7fb fe26 	bl	80001d0 <__aeabi_dsub>
 8004584:	45b0      	cmp	r8, r6
 8004586:	4604      	mov	r4, r0
 8004588:	460d      	mov	r5, r1
 800458a:	d01b      	beq.n	80045c4 <__ieee754_rem_pio2+0x8c>
 800458c:	a3ac      	add	r3, pc, #688	; (adr r3, 8004840 <__ieee754_rem_pio2+0x308>)
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f7fb fe1d 	bl	80001d0 <__aeabi_dsub>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	e9ca 2300 	strd	r2, r3, [sl]
 800459e:	4620      	mov	r0, r4
 80045a0:	4629      	mov	r1, r5
 80045a2:	f7fb fe15 	bl	80001d0 <__aeabi_dsub>
 80045a6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004840 <__ieee754_rem_pio2+0x308>)
 80045a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ac:	f7fb fe10 	bl	80001d0 <__aeabi_dsub>
 80045b0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80045b4:	f04f 0b01 	mov.w	fp, #1
 80045b8:	4658      	mov	r0, fp
 80045ba:	b00b      	add	sp, #44	; 0x2c
 80045bc:	ecbd 8b02 	vpop	{d8}
 80045c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045c4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004848 <__ieee754_rem_pio2+0x310>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fb fe01 	bl	80001d0 <__aeabi_dsub>
 80045ce:	a3a0      	add	r3, pc, #640	; (adr r3, 8004850 <__ieee754_rem_pio2+0x318>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	4604      	mov	r4, r0
 80045d6:	460d      	mov	r5, r1
 80045d8:	f7fb fdfa 	bl	80001d0 <__aeabi_dsub>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	e9ca 2300 	strd	r2, r3, [sl]
 80045e4:	4620      	mov	r0, r4
 80045e6:	4629      	mov	r1, r5
 80045e8:	f7fb fdf2 	bl	80001d0 <__aeabi_dsub>
 80045ec:	a398      	add	r3, pc, #608	; (adr r3, 8004850 <__ieee754_rem_pio2+0x318>)
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	e7db      	b.n	80045ac <__ieee754_rem_pio2+0x74>
 80045f4:	f7fb fdee 	bl	80001d4 <__adddf3>
 80045f8:	45b0      	cmp	r8, r6
 80045fa:	4604      	mov	r4, r0
 80045fc:	460d      	mov	r5, r1
 80045fe:	d016      	beq.n	800462e <__ieee754_rem_pio2+0xf6>
 8004600:	a38f      	add	r3, pc, #572	; (adr r3, 8004840 <__ieee754_rem_pio2+0x308>)
 8004602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004606:	f7fb fde5 	bl	80001d4 <__adddf3>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	e9ca 2300 	strd	r2, r3, [sl]
 8004612:	4620      	mov	r0, r4
 8004614:	4629      	mov	r1, r5
 8004616:	f7fb fddb 	bl	80001d0 <__aeabi_dsub>
 800461a:	a389      	add	r3, pc, #548	; (adr r3, 8004840 <__ieee754_rem_pio2+0x308>)
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f7fb fdd8 	bl	80001d4 <__adddf3>
 8004624:	f04f 3bff 	mov.w	fp, #4294967295
 8004628:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800462c:	e7c4      	b.n	80045b8 <__ieee754_rem_pio2+0x80>
 800462e:	a386      	add	r3, pc, #536	; (adr r3, 8004848 <__ieee754_rem_pio2+0x310>)
 8004630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004634:	f7fb fdce 	bl	80001d4 <__adddf3>
 8004638:	a385      	add	r3, pc, #532	; (adr r3, 8004850 <__ieee754_rem_pio2+0x318>)
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	4604      	mov	r4, r0
 8004640:	460d      	mov	r5, r1
 8004642:	f7fb fdc7 	bl	80001d4 <__adddf3>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	e9ca 2300 	strd	r2, r3, [sl]
 800464e:	4620      	mov	r0, r4
 8004650:	4629      	mov	r1, r5
 8004652:	f7fb fdbd 	bl	80001d0 <__aeabi_dsub>
 8004656:	a37e      	add	r3, pc, #504	; (adr r3, 8004850 <__ieee754_rem_pio2+0x318>)
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	e7e0      	b.n	8004620 <__ieee754_rem_pio2+0xe8>
 800465e:	4b87      	ldr	r3, [pc, #540]	; (800487c <__ieee754_rem_pio2+0x344>)
 8004660:	4598      	cmp	r8, r3
 8004662:	f300 80d9 	bgt.w	8004818 <__ieee754_rem_pio2+0x2e0>
 8004666:	f000 fe39 	bl	80052dc <fabs>
 800466a:	ec55 4b10 	vmov	r4, r5, d0
 800466e:	ee10 0a10 	vmov	r0, s0
 8004672:	a379      	add	r3, pc, #484	; (adr r3, 8004858 <__ieee754_rem_pio2+0x320>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	4629      	mov	r1, r5
 800467a:	f7fb ff61 	bl	8000540 <__aeabi_dmul>
 800467e:	4b80      	ldr	r3, [pc, #512]	; (8004880 <__ieee754_rem_pio2+0x348>)
 8004680:	2200      	movs	r2, #0
 8004682:	f7fb fda7 	bl	80001d4 <__adddf3>
 8004686:	f7fc f9f5 	bl	8000a74 <__aeabi_d2iz>
 800468a:	4683      	mov	fp, r0
 800468c:	f7fb feee 	bl	800046c <__aeabi_i2d>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	ec43 2b18 	vmov	d8, r2, r3
 8004698:	a367      	add	r3, pc, #412	; (adr r3, 8004838 <__ieee754_rem_pio2+0x300>)
 800469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469e:	f7fb ff4f 	bl	8000540 <__aeabi_dmul>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4620      	mov	r0, r4
 80046a8:	4629      	mov	r1, r5
 80046aa:	f7fb fd91 	bl	80001d0 <__aeabi_dsub>
 80046ae:	a364      	add	r3, pc, #400	; (adr r3, 8004840 <__ieee754_rem_pio2+0x308>)
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	4606      	mov	r6, r0
 80046b6:	460f      	mov	r7, r1
 80046b8:	ec51 0b18 	vmov	r0, r1, d8
 80046bc:	f7fb ff40 	bl	8000540 <__aeabi_dmul>
 80046c0:	f1bb 0f1f 	cmp.w	fp, #31
 80046c4:	4604      	mov	r4, r0
 80046c6:	460d      	mov	r5, r1
 80046c8:	dc0d      	bgt.n	80046e6 <__ieee754_rem_pio2+0x1ae>
 80046ca:	4b6e      	ldr	r3, [pc, #440]	; (8004884 <__ieee754_rem_pio2+0x34c>)
 80046cc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80046d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d4:	4543      	cmp	r3, r8
 80046d6:	d006      	beq.n	80046e6 <__ieee754_rem_pio2+0x1ae>
 80046d8:	4622      	mov	r2, r4
 80046da:	462b      	mov	r3, r5
 80046dc:	4630      	mov	r0, r6
 80046de:	4639      	mov	r1, r7
 80046e0:	f7fb fd76 	bl	80001d0 <__aeabi_dsub>
 80046e4:	e00f      	b.n	8004706 <__ieee754_rem_pio2+0x1ce>
 80046e6:	462b      	mov	r3, r5
 80046e8:	4622      	mov	r2, r4
 80046ea:	4630      	mov	r0, r6
 80046ec:	4639      	mov	r1, r7
 80046ee:	f7fb fd6f 	bl	80001d0 <__aeabi_dsub>
 80046f2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80046f6:	9303      	str	r3, [sp, #12]
 80046f8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80046fc:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004700:	f1b8 0f10 	cmp.w	r8, #16
 8004704:	dc02      	bgt.n	800470c <__ieee754_rem_pio2+0x1d4>
 8004706:	e9ca 0100 	strd	r0, r1, [sl]
 800470a:	e039      	b.n	8004780 <__ieee754_rem_pio2+0x248>
 800470c:	a34e      	add	r3, pc, #312	; (adr r3, 8004848 <__ieee754_rem_pio2+0x310>)
 800470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004712:	ec51 0b18 	vmov	r0, r1, d8
 8004716:	f7fb ff13 	bl	8000540 <__aeabi_dmul>
 800471a:	4604      	mov	r4, r0
 800471c:	460d      	mov	r5, r1
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	4630      	mov	r0, r6
 8004724:	4639      	mov	r1, r7
 8004726:	f7fb fd53 	bl	80001d0 <__aeabi_dsub>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4680      	mov	r8, r0
 8004730:	4689      	mov	r9, r1
 8004732:	4630      	mov	r0, r6
 8004734:	4639      	mov	r1, r7
 8004736:	f7fb fd4b 	bl	80001d0 <__aeabi_dsub>
 800473a:	4622      	mov	r2, r4
 800473c:	462b      	mov	r3, r5
 800473e:	f7fb fd47 	bl	80001d0 <__aeabi_dsub>
 8004742:	a343      	add	r3, pc, #268	; (adr r3, 8004850 <__ieee754_rem_pio2+0x318>)
 8004744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004748:	4604      	mov	r4, r0
 800474a:	460d      	mov	r5, r1
 800474c:	ec51 0b18 	vmov	r0, r1, d8
 8004750:	f7fb fef6 	bl	8000540 <__aeabi_dmul>
 8004754:	4622      	mov	r2, r4
 8004756:	462b      	mov	r3, r5
 8004758:	f7fb fd3a 	bl	80001d0 <__aeabi_dsub>
 800475c:	4602      	mov	r2, r0
 800475e:	460b      	mov	r3, r1
 8004760:	4604      	mov	r4, r0
 8004762:	460d      	mov	r5, r1
 8004764:	4640      	mov	r0, r8
 8004766:	4649      	mov	r1, r9
 8004768:	f7fb fd32 	bl	80001d0 <__aeabi_dsub>
 800476c:	9a03      	ldr	r2, [sp, #12]
 800476e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b31      	cmp	r3, #49	; 0x31
 8004776:	dc24      	bgt.n	80047c2 <__ieee754_rem_pio2+0x28a>
 8004778:	e9ca 0100 	strd	r0, r1, [sl]
 800477c:	4646      	mov	r6, r8
 800477e:	464f      	mov	r7, r9
 8004780:	e9da 8900 	ldrd	r8, r9, [sl]
 8004784:	4630      	mov	r0, r6
 8004786:	4642      	mov	r2, r8
 8004788:	464b      	mov	r3, r9
 800478a:	4639      	mov	r1, r7
 800478c:	f7fb fd20 	bl	80001d0 <__aeabi_dsub>
 8004790:	462b      	mov	r3, r5
 8004792:	4622      	mov	r2, r4
 8004794:	f7fb fd1c 	bl	80001d0 <__aeabi_dsub>
 8004798:	9b02      	ldr	r3, [sp, #8]
 800479a:	2b00      	cmp	r3, #0
 800479c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80047a0:	f6bf af0a 	bge.w	80045b8 <__ieee754_rem_pio2+0x80>
 80047a4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80047a8:	f8ca 3004 	str.w	r3, [sl, #4]
 80047ac:	f8ca 8000 	str.w	r8, [sl]
 80047b0:	f8ca 0008 	str.w	r0, [sl, #8]
 80047b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80047b8:	f8ca 300c 	str.w	r3, [sl, #12]
 80047bc:	f1cb 0b00 	rsb	fp, fp, #0
 80047c0:	e6fa      	b.n	80045b8 <__ieee754_rem_pio2+0x80>
 80047c2:	a327      	add	r3, pc, #156	; (adr r3, 8004860 <__ieee754_rem_pio2+0x328>)
 80047c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c8:	ec51 0b18 	vmov	r0, r1, d8
 80047cc:	f7fb feb8 	bl	8000540 <__aeabi_dmul>
 80047d0:	4604      	mov	r4, r0
 80047d2:	460d      	mov	r5, r1
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4640      	mov	r0, r8
 80047da:	4649      	mov	r1, r9
 80047dc:	f7fb fcf8 	bl	80001d0 <__aeabi_dsub>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4606      	mov	r6, r0
 80047e6:	460f      	mov	r7, r1
 80047e8:	4640      	mov	r0, r8
 80047ea:	4649      	mov	r1, r9
 80047ec:	f7fb fcf0 	bl	80001d0 <__aeabi_dsub>
 80047f0:	4622      	mov	r2, r4
 80047f2:	462b      	mov	r3, r5
 80047f4:	f7fb fcec 	bl	80001d0 <__aeabi_dsub>
 80047f8:	a31b      	add	r3, pc, #108	; (adr r3, 8004868 <__ieee754_rem_pio2+0x330>)
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	4604      	mov	r4, r0
 8004800:	460d      	mov	r5, r1
 8004802:	ec51 0b18 	vmov	r0, r1, d8
 8004806:	f7fb fe9b 	bl	8000540 <__aeabi_dmul>
 800480a:	4622      	mov	r2, r4
 800480c:	462b      	mov	r3, r5
 800480e:	f7fb fcdf 	bl	80001d0 <__aeabi_dsub>
 8004812:	4604      	mov	r4, r0
 8004814:	460d      	mov	r5, r1
 8004816:	e75f      	b.n	80046d8 <__ieee754_rem_pio2+0x1a0>
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <__ieee754_rem_pio2+0x350>)
 800481a:	4598      	cmp	r8, r3
 800481c:	dd36      	ble.n	800488c <__ieee754_rem_pio2+0x354>
 800481e:	ee10 2a10 	vmov	r2, s0
 8004822:	462b      	mov	r3, r5
 8004824:	4620      	mov	r0, r4
 8004826:	4629      	mov	r1, r5
 8004828:	f7fb fcd2 	bl	80001d0 <__aeabi_dsub>
 800482c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004830:	e9ca 0100 	strd	r0, r1, [sl]
 8004834:	e694      	b.n	8004560 <__ieee754_rem_pio2+0x28>
 8004836:	bf00      	nop
 8004838:	54400000 	.word	0x54400000
 800483c:	3ff921fb 	.word	0x3ff921fb
 8004840:	1a626331 	.word	0x1a626331
 8004844:	3dd0b461 	.word	0x3dd0b461
 8004848:	1a600000 	.word	0x1a600000
 800484c:	3dd0b461 	.word	0x3dd0b461
 8004850:	2e037073 	.word	0x2e037073
 8004854:	3ba3198a 	.word	0x3ba3198a
 8004858:	6dc9c883 	.word	0x6dc9c883
 800485c:	3fe45f30 	.word	0x3fe45f30
 8004860:	2e000000 	.word	0x2e000000
 8004864:	3ba3198a 	.word	0x3ba3198a
 8004868:	252049c1 	.word	0x252049c1
 800486c:	397b839a 	.word	0x397b839a
 8004870:	3fe921fb 	.word	0x3fe921fb
 8004874:	4002d97b 	.word	0x4002d97b
 8004878:	3ff921fb 	.word	0x3ff921fb
 800487c:	413921fb 	.word	0x413921fb
 8004880:	3fe00000 	.word	0x3fe00000
 8004884:	080055a8 	.word	0x080055a8
 8004888:	7fefffff 	.word	0x7fefffff
 800488c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8004890:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8004894:	ee10 0a10 	vmov	r0, s0
 8004898:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800489c:	ee10 6a10 	vmov	r6, s0
 80048a0:	460f      	mov	r7, r1
 80048a2:	f7fc f8e7 	bl	8000a74 <__aeabi_d2iz>
 80048a6:	f7fb fde1 	bl	800046c <__aeabi_i2d>
 80048aa:	4602      	mov	r2, r0
 80048ac:	460b      	mov	r3, r1
 80048ae:	4630      	mov	r0, r6
 80048b0:	4639      	mov	r1, r7
 80048b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048b6:	f7fb fc8b 	bl	80001d0 <__aeabi_dsub>
 80048ba:	4b22      	ldr	r3, [pc, #136]	; (8004944 <__ieee754_rem_pio2+0x40c>)
 80048bc:	2200      	movs	r2, #0
 80048be:	f7fb fe3f 	bl	8000540 <__aeabi_dmul>
 80048c2:	460f      	mov	r7, r1
 80048c4:	4606      	mov	r6, r0
 80048c6:	f7fc f8d5 	bl	8000a74 <__aeabi_d2iz>
 80048ca:	f7fb fdcf 	bl	800046c <__aeabi_i2d>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	4630      	mov	r0, r6
 80048d4:	4639      	mov	r1, r7
 80048d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80048da:	f7fb fc79 	bl	80001d0 <__aeabi_dsub>
 80048de:	4b19      	ldr	r3, [pc, #100]	; (8004944 <__ieee754_rem_pio2+0x40c>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	f7fb fe2d 	bl	8000540 <__aeabi_dmul>
 80048e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80048ea:	ad04      	add	r5, sp, #16
 80048ec:	f04f 0803 	mov.w	r8, #3
 80048f0:	46a9      	mov	r9, r5
 80048f2:	2600      	movs	r6, #0
 80048f4:	2700      	movs	r7, #0
 80048f6:	4632      	mov	r2, r6
 80048f8:	463b      	mov	r3, r7
 80048fa:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80048fe:	46c3      	mov	fp, r8
 8004900:	3d08      	subs	r5, #8
 8004902:	f108 38ff 	add.w	r8, r8, #4294967295
 8004906:	f7fc f883 	bl	8000a10 <__aeabi_dcmpeq>
 800490a:	2800      	cmp	r0, #0
 800490c:	d1f3      	bne.n	80048f6 <__ieee754_rem_pio2+0x3be>
 800490e:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <__ieee754_rem_pio2+0x410>)
 8004910:	9301      	str	r3, [sp, #4]
 8004912:	2302      	movs	r3, #2
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	4622      	mov	r2, r4
 8004918:	465b      	mov	r3, fp
 800491a:	4651      	mov	r1, sl
 800491c:	4648      	mov	r0, r9
 800491e:	f000 f8df 	bl	8004ae0 <__kernel_rem_pio2>
 8004922:	9b02      	ldr	r3, [sp, #8]
 8004924:	2b00      	cmp	r3, #0
 8004926:	4683      	mov	fp, r0
 8004928:	f6bf ae46 	bge.w	80045b8 <__ieee754_rem_pio2+0x80>
 800492c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004930:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004934:	f8ca 3004 	str.w	r3, [sl, #4]
 8004938:	f8da 300c 	ldr.w	r3, [sl, #12]
 800493c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004940:	e73a      	b.n	80047b8 <__ieee754_rem_pio2+0x280>
 8004942:	bf00      	nop
 8004944:	41700000 	.word	0x41700000
 8004948:	08005628 	.word	0x08005628
 800494c:	00000000 	.word	0x00000000

08004950 <__kernel_cos>:
 8004950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004954:	ec57 6b10 	vmov	r6, r7, d0
 8004958:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800495c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8004960:	ed8d 1b00 	vstr	d1, [sp]
 8004964:	da07      	bge.n	8004976 <__kernel_cos+0x26>
 8004966:	ee10 0a10 	vmov	r0, s0
 800496a:	4639      	mov	r1, r7
 800496c:	f7fc f882 	bl	8000a74 <__aeabi_d2iz>
 8004970:	2800      	cmp	r0, #0
 8004972:	f000 8088 	beq.w	8004a86 <__kernel_cos+0x136>
 8004976:	4632      	mov	r2, r6
 8004978:	463b      	mov	r3, r7
 800497a:	4630      	mov	r0, r6
 800497c:	4639      	mov	r1, r7
 800497e:	f7fb fddf 	bl	8000540 <__aeabi_dmul>
 8004982:	4b51      	ldr	r3, [pc, #324]	; (8004ac8 <__kernel_cos+0x178>)
 8004984:	2200      	movs	r2, #0
 8004986:	4604      	mov	r4, r0
 8004988:	460d      	mov	r5, r1
 800498a:	f7fb fdd9 	bl	8000540 <__aeabi_dmul>
 800498e:	a340      	add	r3, pc, #256	; (adr r3, 8004a90 <__kernel_cos+0x140>)
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	4682      	mov	sl, r0
 8004996:	468b      	mov	fp, r1
 8004998:	4620      	mov	r0, r4
 800499a:	4629      	mov	r1, r5
 800499c:	f7fb fdd0 	bl	8000540 <__aeabi_dmul>
 80049a0:	a33d      	add	r3, pc, #244	; (adr r3, 8004a98 <__kernel_cos+0x148>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f7fb fc15 	bl	80001d4 <__adddf3>
 80049aa:	4622      	mov	r2, r4
 80049ac:	462b      	mov	r3, r5
 80049ae:	f7fb fdc7 	bl	8000540 <__aeabi_dmul>
 80049b2:	a33b      	add	r3, pc, #236	; (adr r3, 8004aa0 <__kernel_cos+0x150>)
 80049b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b8:	f7fb fc0a 	bl	80001d0 <__aeabi_dsub>
 80049bc:	4622      	mov	r2, r4
 80049be:	462b      	mov	r3, r5
 80049c0:	f7fb fdbe 	bl	8000540 <__aeabi_dmul>
 80049c4:	a338      	add	r3, pc, #224	; (adr r3, 8004aa8 <__kernel_cos+0x158>)
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	f7fb fc03 	bl	80001d4 <__adddf3>
 80049ce:	4622      	mov	r2, r4
 80049d0:	462b      	mov	r3, r5
 80049d2:	f7fb fdb5 	bl	8000540 <__aeabi_dmul>
 80049d6:	a336      	add	r3, pc, #216	; (adr r3, 8004ab0 <__kernel_cos+0x160>)
 80049d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049dc:	f7fb fbf8 	bl	80001d0 <__aeabi_dsub>
 80049e0:	4622      	mov	r2, r4
 80049e2:	462b      	mov	r3, r5
 80049e4:	f7fb fdac 	bl	8000540 <__aeabi_dmul>
 80049e8:	a333      	add	r3, pc, #204	; (adr r3, 8004ab8 <__kernel_cos+0x168>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fb fbf1 	bl	80001d4 <__adddf3>
 80049f2:	4622      	mov	r2, r4
 80049f4:	462b      	mov	r3, r5
 80049f6:	f7fb fda3 	bl	8000540 <__aeabi_dmul>
 80049fa:	4622      	mov	r2, r4
 80049fc:	462b      	mov	r3, r5
 80049fe:	f7fb fd9f 	bl	8000540 <__aeabi_dmul>
 8004a02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a06:	4604      	mov	r4, r0
 8004a08:	460d      	mov	r5, r1
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	4639      	mov	r1, r7
 8004a0e:	f7fb fd97 	bl	8000540 <__aeabi_dmul>
 8004a12:	460b      	mov	r3, r1
 8004a14:	4602      	mov	r2, r0
 8004a16:	4629      	mov	r1, r5
 8004a18:	4620      	mov	r0, r4
 8004a1a:	f7fb fbd9 	bl	80001d0 <__aeabi_dsub>
 8004a1e:	4b2b      	ldr	r3, [pc, #172]	; (8004acc <__kernel_cos+0x17c>)
 8004a20:	4598      	cmp	r8, r3
 8004a22:	4606      	mov	r6, r0
 8004a24:	460f      	mov	r7, r1
 8004a26:	dc10      	bgt.n	8004a4a <__kernel_cos+0xfa>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	4650      	mov	r0, sl
 8004a2e:	4659      	mov	r1, fp
 8004a30:	f7fb fbce 	bl	80001d0 <__aeabi_dsub>
 8004a34:	460b      	mov	r3, r1
 8004a36:	4926      	ldr	r1, [pc, #152]	; (8004ad0 <__kernel_cos+0x180>)
 8004a38:	4602      	mov	r2, r0
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	f7fb fbc8 	bl	80001d0 <__aeabi_dsub>
 8004a40:	ec41 0b10 	vmov	d0, r0, r1
 8004a44:	b003      	add	sp, #12
 8004a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a4a:	4b22      	ldr	r3, [pc, #136]	; (8004ad4 <__kernel_cos+0x184>)
 8004a4c:	4920      	ldr	r1, [pc, #128]	; (8004ad0 <__kernel_cos+0x180>)
 8004a4e:	4598      	cmp	r8, r3
 8004a50:	bfcc      	ite	gt
 8004a52:	4d21      	ldrgt	r5, [pc, #132]	; (8004ad8 <__kernel_cos+0x188>)
 8004a54:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8004a58:	2400      	movs	r4, #0
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	462b      	mov	r3, r5
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f7fb fbb6 	bl	80001d0 <__aeabi_dsub>
 8004a64:	4622      	mov	r2, r4
 8004a66:	4680      	mov	r8, r0
 8004a68:	4689      	mov	r9, r1
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	4650      	mov	r0, sl
 8004a6e:	4659      	mov	r1, fp
 8004a70:	f7fb fbae 	bl	80001d0 <__aeabi_dsub>
 8004a74:	4632      	mov	r2, r6
 8004a76:	463b      	mov	r3, r7
 8004a78:	f7fb fbaa 	bl	80001d0 <__aeabi_dsub>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	460b      	mov	r3, r1
 8004a80:	4640      	mov	r0, r8
 8004a82:	4649      	mov	r1, r9
 8004a84:	e7da      	b.n	8004a3c <__kernel_cos+0xec>
 8004a86:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004ac0 <__kernel_cos+0x170>
 8004a8a:	e7db      	b.n	8004a44 <__kernel_cos+0xf4>
 8004a8c:	f3af 8000 	nop.w
 8004a90:	be8838d4 	.word	0xbe8838d4
 8004a94:	bda8fae9 	.word	0xbda8fae9
 8004a98:	bdb4b1c4 	.word	0xbdb4b1c4
 8004a9c:	3e21ee9e 	.word	0x3e21ee9e
 8004aa0:	809c52ad 	.word	0x809c52ad
 8004aa4:	3e927e4f 	.word	0x3e927e4f
 8004aa8:	19cb1590 	.word	0x19cb1590
 8004aac:	3efa01a0 	.word	0x3efa01a0
 8004ab0:	16c15177 	.word	0x16c15177
 8004ab4:	3f56c16c 	.word	0x3f56c16c
 8004ab8:	5555554c 	.word	0x5555554c
 8004abc:	3fa55555 	.word	0x3fa55555
 8004ac0:	00000000 	.word	0x00000000
 8004ac4:	3ff00000 	.word	0x3ff00000
 8004ac8:	3fe00000 	.word	0x3fe00000
 8004acc:	3fd33332 	.word	0x3fd33332
 8004ad0:	3ff00000 	.word	0x3ff00000
 8004ad4:	3fe90000 	.word	0x3fe90000
 8004ad8:	3fd20000 	.word	0x3fd20000
 8004adc:	00000000 	.word	0x00000000

08004ae0 <__kernel_rem_pio2>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	ed2d 8b02 	vpush	{d8}
 8004ae8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8004aec:	f112 0f14 	cmn.w	r2, #20
 8004af0:	9308      	str	r3, [sp, #32]
 8004af2:	9101      	str	r1, [sp, #4]
 8004af4:	4bc6      	ldr	r3, [pc, #792]	; (8004e10 <__kernel_rem_pio2+0x330>)
 8004af6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8004af8:	9009      	str	r0, [sp, #36]	; 0x24
 8004afa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004afe:	9304      	str	r3, [sp, #16]
 8004b00:	9b08      	ldr	r3, [sp, #32]
 8004b02:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b06:	bfa8      	it	ge
 8004b08:	1ed4      	subge	r4, r2, #3
 8004b0a:	9306      	str	r3, [sp, #24]
 8004b0c:	bfb2      	itee	lt
 8004b0e:	2400      	movlt	r4, #0
 8004b10:	2318      	movge	r3, #24
 8004b12:	fb94 f4f3 	sdivge	r4, r4, r3
 8004b16:	f06f 0317 	mvn.w	r3, #23
 8004b1a:	fb04 3303 	mla	r3, r4, r3, r3
 8004b1e:	eb03 0a02 	add.w	sl, r3, r2
 8004b22:	9b04      	ldr	r3, [sp, #16]
 8004b24:	9a06      	ldr	r2, [sp, #24]
 8004b26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004e00 <__kernel_rem_pio2+0x320>
 8004b2a:	eb03 0802 	add.w	r8, r3, r2
 8004b2e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004b30:	1aa7      	subs	r7, r4, r2
 8004b32:	ae20      	add	r6, sp, #128	; 0x80
 8004b34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004b38:	2500      	movs	r5, #0
 8004b3a:	4545      	cmp	r5, r8
 8004b3c:	dd18      	ble.n	8004b70 <__kernel_rem_pio2+0x90>
 8004b3e:	9b08      	ldr	r3, [sp, #32]
 8004b40:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8004b44:	aa20      	add	r2, sp, #128	; 0x80
 8004b46:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8004e00 <__kernel_rem_pio2+0x320>
 8004b4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004b4e:	f1c3 0301 	rsb	r3, r3, #1
 8004b52:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004b56:	9307      	str	r3, [sp, #28]
 8004b58:	9b07      	ldr	r3, [sp, #28]
 8004b5a:	9a04      	ldr	r2, [sp, #16]
 8004b5c:	4443      	add	r3, r8
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	db2f      	blt.n	8004bc2 <__kernel_rem_pio2+0xe2>
 8004b62:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004b66:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004b6a:	462f      	mov	r7, r5
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	e01b      	b.n	8004ba8 <__kernel_rem_pio2+0xc8>
 8004b70:	42ef      	cmn	r7, r5
 8004b72:	d407      	bmi.n	8004b84 <__kernel_rem_pio2+0xa4>
 8004b74:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004b78:	f7fb fc78 	bl	800046c <__aeabi_i2d>
 8004b7c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004b80:	3501      	adds	r5, #1
 8004b82:	e7da      	b.n	8004b3a <__kernel_rem_pio2+0x5a>
 8004b84:	ec51 0b18 	vmov	r0, r1, d8
 8004b88:	e7f8      	b.n	8004b7c <__kernel_rem_pio2+0x9c>
 8004b8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b8e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004b92:	f7fb fcd5 	bl	8000540 <__aeabi_dmul>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b9e:	f7fb fb19 	bl	80001d4 <__adddf3>
 8004ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ba6:	3601      	adds	r6, #1
 8004ba8:	9b06      	ldr	r3, [sp, #24]
 8004baa:	429e      	cmp	r6, r3
 8004bac:	f1a7 0708 	sub.w	r7, r7, #8
 8004bb0:	ddeb      	ble.n	8004b8a <__kernel_rem_pio2+0xaa>
 8004bb2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004bb6:	3508      	adds	r5, #8
 8004bb8:	ecab 7b02 	vstmia	fp!, {d7}
 8004bbc:	f108 0801 	add.w	r8, r8, #1
 8004bc0:	e7ca      	b.n	8004b58 <__kernel_rem_pio2+0x78>
 8004bc2:	9b04      	ldr	r3, [sp, #16]
 8004bc4:	aa0c      	add	r2, sp, #48	; 0x30
 8004bc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bcc:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004bce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004bd2:	9c04      	ldr	r4, [sp, #16]
 8004bd4:	930a      	str	r3, [sp, #40]	; 0x28
 8004bd6:	ab98      	add	r3, sp, #608	; 0x260
 8004bd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004bdc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004be0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8004be4:	f8cd b008 	str.w	fp, [sp, #8]
 8004be8:	4625      	mov	r5, r4
 8004bea:	2d00      	cmp	r5, #0
 8004bec:	dc78      	bgt.n	8004ce0 <__kernel_rem_pio2+0x200>
 8004bee:	ec47 6b10 	vmov	d0, r6, r7
 8004bf2:	4650      	mov	r0, sl
 8004bf4:	f000 fbfc 	bl	80053f0 <scalbn>
 8004bf8:	ec57 6b10 	vmov	r6, r7, d0
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004c02:	ee10 0a10 	vmov	r0, s0
 8004c06:	4639      	mov	r1, r7
 8004c08:	f7fb fc9a 	bl	8000540 <__aeabi_dmul>
 8004c0c:	ec41 0b10 	vmov	d0, r0, r1
 8004c10:	f000 fb6e 	bl	80052f0 <floor>
 8004c14:	4b7f      	ldr	r3, [pc, #508]	; (8004e14 <__kernel_rem_pio2+0x334>)
 8004c16:	ec51 0b10 	vmov	r0, r1, d0
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f7fb fc90 	bl	8000540 <__aeabi_dmul>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4630      	mov	r0, r6
 8004c26:	4639      	mov	r1, r7
 8004c28:	f7fb fad2 	bl	80001d0 <__aeabi_dsub>
 8004c2c:	460f      	mov	r7, r1
 8004c2e:	4606      	mov	r6, r0
 8004c30:	f7fb ff20 	bl	8000a74 <__aeabi_d2iz>
 8004c34:	9007      	str	r0, [sp, #28]
 8004c36:	f7fb fc19 	bl	800046c <__aeabi_i2d>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	4630      	mov	r0, r6
 8004c40:	4639      	mov	r1, r7
 8004c42:	f7fb fac5 	bl	80001d0 <__aeabi_dsub>
 8004c46:	f1ba 0f00 	cmp.w	sl, #0
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	460f      	mov	r7, r1
 8004c4e:	dd70      	ble.n	8004d32 <__kernel_rem_pio2+0x252>
 8004c50:	1e62      	subs	r2, r4, #1
 8004c52:	ab0c      	add	r3, sp, #48	; 0x30
 8004c54:	9d07      	ldr	r5, [sp, #28]
 8004c56:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004c5a:	f1ca 0118 	rsb	r1, sl, #24
 8004c5e:	fa40 f301 	asr.w	r3, r0, r1
 8004c62:	441d      	add	r5, r3
 8004c64:	408b      	lsls	r3, r1
 8004c66:	1ac0      	subs	r0, r0, r3
 8004c68:	ab0c      	add	r3, sp, #48	; 0x30
 8004c6a:	9507      	str	r5, [sp, #28]
 8004c6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004c70:	f1ca 0317 	rsb	r3, sl, #23
 8004c74:	fa40 f303 	asr.w	r3, r0, r3
 8004c78:	9302      	str	r3, [sp, #8]
 8004c7a:	9b02      	ldr	r3, [sp, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	dd66      	ble.n	8004d4e <__kernel_rem_pio2+0x26e>
 8004c80:	9b07      	ldr	r3, [sp, #28]
 8004c82:	2200      	movs	r2, #0
 8004c84:	3301      	adds	r3, #1
 8004c86:	9307      	str	r3, [sp, #28]
 8004c88:	4615      	mov	r5, r2
 8004c8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004c8e:	4294      	cmp	r4, r2
 8004c90:	f300 8099 	bgt.w	8004dc6 <__kernel_rem_pio2+0x2e6>
 8004c94:	f1ba 0f00 	cmp.w	sl, #0
 8004c98:	dd07      	ble.n	8004caa <__kernel_rem_pio2+0x1ca>
 8004c9a:	f1ba 0f01 	cmp.w	sl, #1
 8004c9e:	f000 80a5 	beq.w	8004dec <__kernel_rem_pio2+0x30c>
 8004ca2:	f1ba 0f02 	cmp.w	sl, #2
 8004ca6:	f000 80c1 	beq.w	8004e2c <__kernel_rem_pio2+0x34c>
 8004caa:	9b02      	ldr	r3, [sp, #8]
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d14e      	bne.n	8004d4e <__kernel_rem_pio2+0x26e>
 8004cb0:	4632      	mov	r2, r6
 8004cb2:	463b      	mov	r3, r7
 8004cb4:	4958      	ldr	r1, [pc, #352]	; (8004e18 <__kernel_rem_pio2+0x338>)
 8004cb6:	2000      	movs	r0, #0
 8004cb8:	f7fb fa8a 	bl	80001d0 <__aeabi_dsub>
 8004cbc:	4606      	mov	r6, r0
 8004cbe:	460f      	mov	r7, r1
 8004cc0:	2d00      	cmp	r5, #0
 8004cc2:	d044      	beq.n	8004d4e <__kernel_rem_pio2+0x26e>
 8004cc4:	4650      	mov	r0, sl
 8004cc6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8004e08 <__kernel_rem_pio2+0x328>
 8004cca:	f000 fb91 	bl	80053f0 <scalbn>
 8004cce:	4630      	mov	r0, r6
 8004cd0:	4639      	mov	r1, r7
 8004cd2:	ec53 2b10 	vmov	r2, r3, d0
 8004cd6:	f7fb fa7b 	bl	80001d0 <__aeabi_dsub>
 8004cda:	4606      	mov	r6, r0
 8004cdc:	460f      	mov	r7, r1
 8004cde:	e036      	b.n	8004d4e <__kernel_rem_pio2+0x26e>
 8004ce0:	4b4e      	ldr	r3, [pc, #312]	; (8004e1c <__kernel_rem_pio2+0x33c>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	f7fb fc2a 	bl	8000540 <__aeabi_dmul>
 8004cec:	f7fb fec2 	bl	8000a74 <__aeabi_d2iz>
 8004cf0:	f7fb fbbc 	bl	800046c <__aeabi_i2d>
 8004cf4:	4b4a      	ldr	r3, [pc, #296]	; (8004e20 <__kernel_rem_pio2+0x340>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	4680      	mov	r8, r0
 8004cfa:	4689      	mov	r9, r1
 8004cfc:	f7fb fc20 	bl	8000540 <__aeabi_dmul>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4630      	mov	r0, r6
 8004d06:	4639      	mov	r1, r7
 8004d08:	f7fb fa62 	bl	80001d0 <__aeabi_dsub>
 8004d0c:	f7fb feb2 	bl	8000a74 <__aeabi_d2iz>
 8004d10:	9b02      	ldr	r3, [sp, #8]
 8004d12:	f843 0b04 	str.w	r0, [r3], #4
 8004d16:	3d01      	subs	r5, #1
 8004d18:	9302      	str	r3, [sp, #8]
 8004d1a:	ab70      	add	r3, sp, #448	; 0x1c0
 8004d1c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d24:	4640      	mov	r0, r8
 8004d26:	4649      	mov	r1, r9
 8004d28:	f7fb fa54 	bl	80001d4 <__adddf3>
 8004d2c:	4606      	mov	r6, r0
 8004d2e:	460f      	mov	r7, r1
 8004d30:	e75b      	b.n	8004bea <__kernel_rem_pio2+0x10a>
 8004d32:	d105      	bne.n	8004d40 <__kernel_rem_pio2+0x260>
 8004d34:	1e63      	subs	r3, r4, #1
 8004d36:	aa0c      	add	r2, sp, #48	; 0x30
 8004d38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004d3c:	15c3      	asrs	r3, r0, #23
 8004d3e:	e79b      	b.n	8004c78 <__kernel_rem_pio2+0x198>
 8004d40:	4b38      	ldr	r3, [pc, #224]	; (8004e24 <__kernel_rem_pio2+0x344>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	f7fb fe82 	bl	8000a4c <__aeabi_dcmpge>
 8004d48:	2800      	cmp	r0, #0
 8004d4a:	d139      	bne.n	8004dc0 <__kernel_rem_pio2+0x2e0>
 8004d4c:	9002      	str	r0, [sp, #8]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2300      	movs	r3, #0
 8004d52:	4630      	mov	r0, r6
 8004d54:	4639      	mov	r1, r7
 8004d56:	f7fb fe5b 	bl	8000a10 <__aeabi_dcmpeq>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	f000 80b4 	beq.w	8004ec8 <__kernel_rem_pio2+0x3e8>
 8004d60:	f104 3bff 	add.w	fp, r4, #4294967295
 8004d64:	465b      	mov	r3, fp
 8004d66:	2200      	movs	r2, #0
 8004d68:	9904      	ldr	r1, [sp, #16]
 8004d6a:	428b      	cmp	r3, r1
 8004d6c:	da65      	bge.n	8004e3a <__kernel_rem_pio2+0x35a>
 8004d6e:	2a00      	cmp	r2, #0
 8004d70:	d07b      	beq.n	8004e6a <__kernel_rem_pio2+0x38a>
 8004d72:	ab0c      	add	r3, sp, #48	; 0x30
 8004d74:	f1aa 0a18 	sub.w	sl, sl, #24
 8004d78:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 80a0 	beq.w	8004ec2 <__kernel_rem_pio2+0x3e2>
 8004d82:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8004e08 <__kernel_rem_pio2+0x328>
 8004d86:	4650      	mov	r0, sl
 8004d88:	f000 fb32 	bl	80053f0 <scalbn>
 8004d8c:	4f23      	ldr	r7, [pc, #140]	; (8004e1c <__kernel_rem_pio2+0x33c>)
 8004d8e:	ec55 4b10 	vmov	r4, r5, d0
 8004d92:	46d8      	mov	r8, fp
 8004d94:	2600      	movs	r6, #0
 8004d96:	f1b8 0f00 	cmp.w	r8, #0
 8004d9a:	f280 80cf 	bge.w	8004f3c <__kernel_rem_pio2+0x45c>
 8004d9e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8004e00 <__kernel_rem_pio2+0x320>
 8004da2:	465f      	mov	r7, fp
 8004da4:	f04f 0800 	mov.w	r8, #0
 8004da8:	2f00      	cmp	r7, #0
 8004daa:	f2c0 80fd 	blt.w	8004fa8 <__kernel_rem_pio2+0x4c8>
 8004dae:	ab70      	add	r3, sp, #448	; 0x1c0
 8004db0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8004e28 <__kernel_rem_pio2+0x348>
 8004db4:	ec55 4b18 	vmov	r4, r5, d8
 8004db8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8004dbc:	2600      	movs	r6, #0
 8004dbe:	e0e5      	b.n	8004f8c <__kernel_rem_pio2+0x4ac>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	9302      	str	r3, [sp, #8]
 8004dc4:	e75c      	b.n	8004c80 <__kernel_rem_pio2+0x1a0>
 8004dc6:	f8db 3000 	ldr.w	r3, [fp]
 8004dca:	b955      	cbnz	r5, 8004de2 <__kernel_rem_pio2+0x302>
 8004dcc:	b123      	cbz	r3, 8004dd8 <__kernel_rem_pio2+0x2f8>
 8004dce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004dd2:	f8cb 3000 	str.w	r3, [fp]
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	3201      	adds	r2, #1
 8004dda:	f10b 0b04 	add.w	fp, fp, #4
 8004dde:	461d      	mov	r5, r3
 8004de0:	e755      	b.n	8004c8e <__kernel_rem_pio2+0x1ae>
 8004de2:	1acb      	subs	r3, r1, r3
 8004de4:	f8cb 3000 	str.w	r3, [fp]
 8004de8:	462b      	mov	r3, r5
 8004dea:	e7f5      	b.n	8004dd8 <__kernel_rem_pio2+0x2f8>
 8004dec:	1e62      	subs	r2, r4, #1
 8004dee:	ab0c      	add	r3, sp, #48	; 0x30
 8004df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004df4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004df8:	a90c      	add	r1, sp, #48	; 0x30
 8004dfa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004dfe:	e754      	b.n	8004caa <__kernel_rem_pio2+0x1ca>
	...
 8004e0c:	3ff00000 	.word	0x3ff00000
 8004e10:	08005770 	.word	0x08005770
 8004e14:	40200000 	.word	0x40200000
 8004e18:	3ff00000 	.word	0x3ff00000
 8004e1c:	3e700000 	.word	0x3e700000
 8004e20:	41700000 	.word	0x41700000
 8004e24:	3fe00000 	.word	0x3fe00000
 8004e28:	08005730 	.word	0x08005730
 8004e2c:	1e62      	subs	r2, r4, #1
 8004e2e:	ab0c      	add	r3, sp, #48	; 0x30
 8004e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e34:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004e38:	e7de      	b.n	8004df8 <__kernel_rem_pio2+0x318>
 8004e3a:	a90c      	add	r1, sp, #48	; 0x30
 8004e3c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	430a      	orrs	r2, r1
 8004e44:	e790      	b.n	8004d68 <__kernel_rem_pio2+0x288>
 8004e46:	3301      	adds	r3, #1
 8004e48:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004e4c:	2900      	cmp	r1, #0
 8004e4e:	d0fa      	beq.n	8004e46 <__kernel_rem_pio2+0x366>
 8004e50:	9a08      	ldr	r2, [sp, #32]
 8004e52:	18e3      	adds	r3, r4, r3
 8004e54:	18a6      	adds	r6, r4, r2
 8004e56:	aa20      	add	r2, sp, #128	; 0x80
 8004e58:	1c65      	adds	r5, r4, #1
 8004e5a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	9b02      	ldr	r3, [sp, #8]
 8004e62:	42ab      	cmp	r3, r5
 8004e64:	da04      	bge.n	8004e70 <__kernel_rem_pio2+0x390>
 8004e66:	461c      	mov	r4, r3
 8004e68:	e6b5      	b.n	8004bd6 <__kernel_rem_pio2+0xf6>
 8004e6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e7eb      	b.n	8004e48 <__kernel_rem_pio2+0x368>
 8004e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004e76:	f7fb faf9 	bl	800046c <__aeabi_i2d>
 8004e7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e80:	46b3      	mov	fp, r6
 8004e82:	461c      	mov	r4, r3
 8004e84:	2700      	movs	r7, #0
 8004e86:	f04f 0800 	mov.w	r8, #0
 8004e8a:	f04f 0900 	mov.w	r9, #0
 8004e8e:	9b06      	ldr	r3, [sp, #24]
 8004e90:	429f      	cmp	r7, r3
 8004e92:	dd06      	ble.n	8004ea2 <__kernel_rem_pio2+0x3c2>
 8004e94:	ab70      	add	r3, sp, #448	; 0x1c0
 8004e96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004e9a:	e9c3 8900 	strd	r8, r9, [r3]
 8004e9e:	3501      	adds	r5, #1
 8004ea0:	e7de      	b.n	8004e60 <__kernel_rem_pio2+0x380>
 8004ea2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004ea6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004eaa:	f7fb fb49 	bl	8000540 <__aeabi_dmul>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	4649      	mov	r1, r9
 8004eb6:	f7fb f98d 	bl	80001d4 <__adddf3>
 8004eba:	3701      	adds	r7, #1
 8004ebc:	4680      	mov	r8, r0
 8004ebe:	4689      	mov	r9, r1
 8004ec0:	e7e5      	b.n	8004e8e <__kernel_rem_pio2+0x3ae>
 8004ec2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ec6:	e754      	b.n	8004d72 <__kernel_rem_pio2+0x292>
 8004ec8:	ec47 6b10 	vmov	d0, r6, r7
 8004ecc:	f1ca 0000 	rsb	r0, sl, #0
 8004ed0:	f000 fa8e 	bl	80053f0 <scalbn>
 8004ed4:	ec57 6b10 	vmov	r6, r7, d0
 8004ed8:	4b9f      	ldr	r3, [pc, #636]	; (8005158 <__kernel_rem_pio2+0x678>)
 8004eda:	ee10 0a10 	vmov	r0, s0
 8004ede:	2200      	movs	r2, #0
 8004ee0:	4639      	mov	r1, r7
 8004ee2:	f7fb fdb3 	bl	8000a4c <__aeabi_dcmpge>
 8004ee6:	b300      	cbz	r0, 8004f2a <__kernel_rem_pio2+0x44a>
 8004ee8:	4b9c      	ldr	r3, [pc, #624]	; (800515c <__kernel_rem_pio2+0x67c>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	4630      	mov	r0, r6
 8004eee:	4639      	mov	r1, r7
 8004ef0:	f7fb fb26 	bl	8000540 <__aeabi_dmul>
 8004ef4:	f7fb fdbe 	bl	8000a74 <__aeabi_d2iz>
 8004ef8:	4605      	mov	r5, r0
 8004efa:	f7fb fab7 	bl	800046c <__aeabi_i2d>
 8004efe:	4b96      	ldr	r3, [pc, #600]	; (8005158 <__kernel_rem_pio2+0x678>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	f7fb fb1d 	bl	8000540 <__aeabi_dmul>
 8004f06:	460b      	mov	r3, r1
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4639      	mov	r1, r7
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f7fb f95f 	bl	80001d0 <__aeabi_dsub>
 8004f12:	f7fb fdaf 	bl	8000a74 <__aeabi_d2iz>
 8004f16:	f104 0b01 	add.w	fp, r4, #1
 8004f1a:	ab0c      	add	r3, sp, #48	; 0x30
 8004f1c:	f10a 0a18 	add.w	sl, sl, #24
 8004f20:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004f24:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8004f28:	e72b      	b.n	8004d82 <__kernel_rem_pio2+0x2a2>
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	f7fb fda1 	bl	8000a74 <__aeabi_d2iz>
 8004f32:	ab0c      	add	r3, sp, #48	; 0x30
 8004f34:	46a3      	mov	fp, r4
 8004f36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004f3a:	e722      	b.n	8004d82 <__kernel_rem_pio2+0x2a2>
 8004f3c:	ab70      	add	r3, sp, #448	; 0x1c0
 8004f3e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8004f42:	ab0c      	add	r3, sp, #48	; 0x30
 8004f44:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004f48:	f7fb fa90 	bl	800046c <__aeabi_i2d>
 8004f4c:	4622      	mov	r2, r4
 8004f4e:	462b      	mov	r3, r5
 8004f50:	f7fb faf6 	bl	8000540 <__aeabi_dmul>
 8004f54:	4632      	mov	r2, r6
 8004f56:	e9c9 0100 	strd	r0, r1, [r9]
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	4629      	mov	r1, r5
 8004f60:	f7fb faee 	bl	8000540 <__aeabi_dmul>
 8004f64:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f68:	4604      	mov	r4, r0
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	e713      	b.n	8004d96 <__kernel_rem_pio2+0x2b6>
 8004f6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004f72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004f76:	f7fb fae3 	bl	8000540 <__aeabi_dmul>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4620      	mov	r0, r4
 8004f80:	4629      	mov	r1, r5
 8004f82:	f7fb f927 	bl	80001d4 <__adddf3>
 8004f86:	3601      	adds	r6, #1
 8004f88:	4604      	mov	r4, r0
 8004f8a:	460d      	mov	r5, r1
 8004f8c:	9b04      	ldr	r3, [sp, #16]
 8004f8e:	429e      	cmp	r6, r3
 8004f90:	dc01      	bgt.n	8004f96 <__kernel_rem_pio2+0x4b6>
 8004f92:	45b0      	cmp	r8, r6
 8004f94:	daeb      	bge.n	8004f6e <__kernel_rem_pio2+0x48e>
 8004f96:	ab48      	add	r3, sp, #288	; 0x120
 8004f98:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004f9c:	e9c3 4500 	strd	r4, r5, [r3]
 8004fa0:	3f01      	subs	r7, #1
 8004fa2:	f108 0801 	add.w	r8, r8, #1
 8004fa6:	e6ff      	b.n	8004da8 <__kernel_rem_pio2+0x2c8>
 8004fa8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	dc0b      	bgt.n	8004fc6 <__kernel_rem_pio2+0x4e6>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	dc6e      	bgt.n	8005090 <__kernel_rem_pio2+0x5b0>
 8004fb2:	d045      	beq.n	8005040 <__kernel_rem_pio2+0x560>
 8004fb4:	9b07      	ldr	r3, [sp, #28]
 8004fb6:	f003 0007 	and.w	r0, r3, #7
 8004fba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004fbe:	ecbd 8b02 	vpop	{d8}
 8004fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d1f3      	bne.n	8004fb4 <__kernel_rem_pio2+0x4d4>
 8004fcc:	ab48      	add	r3, sp, #288	; 0x120
 8004fce:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8004fd2:	46d0      	mov	r8, sl
 8004fd4:	46d9      	mov	r9, fp
 8004fd6:	f1b9 0f00 	cmp.w	r9, #0
 8004fda:	f1a8 0808 	sub.w	r8, r8, #8
 8004fde:	dc64      	bgt.n	80050aa <__kernel_rem_pio2+0x5ca>
 8004fe0:	465c      	mov	r4, fp
 8004fe2:	2c01      	cmp	r4, #1
 8004fe4:	f1aa 0a08 	sub.w	sl, sl, #8
 8004fe8:	dc7e      	bgt.n	80050e8 <__kernel_rem_pio2+0x608>
 8004fea:	2000      	movs	r0, #0
 8004fec:	2100      	movs	r1, #0
 8004fee:	f1bb 0f01 	cmp.w	fp, #1
 8004ff2:	f300 8097 	bgt.w	8005124 <__kernel_rem_pio2+0x644>
 8004ff6:	9b02      	ldr	r3, [sp, #8]
 8004ff8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8004ffc:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005000:	2b00      	cmp	r3, #0
 8005002:	f040 8099 	bne.w	8005138 <__kernel_rem_pio2+0x658>
 8005006:	9b01      	ldr	r3, [sp, #4]
 8005008:	e9c3 5600 	strd	r5, r6, [r3]
 800500c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005010:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005014:	e7ce      	b.n	8004fb4 <__kernel_rem_pio2+0x4d4>
 8005016:	ab48      	add	r3, sp, #288	; 0x120
 8005018:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f7fb f8d8 	bl	80001d4 <__adddf3>
 8005024:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005028:	f1bb 0f00 	cmp.w	fp, #0
 800502c:	daf3      	bge.n	8005016 <__kernel_rem_pio2+0x536>
 800502e:	9b02      	ldr	r3, [sp, #8]
 8005030:	b113      	cbz	r3, 8005038 <__kernel_rem_pio2+0x558>
 8005032:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005036:	4619      	mov	r1, r3
 8005038:	9b01      	ldr	r3, [sp, #4]
 800503a:	e9c3 0100 	strd	r0, r1, [r3]
 800503e:	e7b9      	b.n	8004fb4 <__kernel_rem_pio2+0x4d4>
 8005040:	2000      	movs	r0, #0
 8005042:	2100      	movs	r1, #0
 8005044:	e7f0      	b.n	8005028 <__kernel_rem_pio2+0x548>
 8005046:	ab48      	add	r3, sp, #288	; 0x120
 8005048:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb f8c0 	bl	80001d4 <__adddf3>
 8005054:	3c01      	subs	r4, #1
 8005056:	2c00      	cmp	r4, #0
 8005058:	daf5      	bge.n	8005046 <__kernel_rem_pio2+0x566>
 800505a:	9b02      	ldr	r3, [sp, #8]
 800505c:	b1e3      	cbz	r3, 8005098 <__kernel_rem_pio2+0x5b8>
 800505e:	4602      	mov	r2, r0
 8005060:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005064:	9c01      	ldr	r4, [sp, #4]
 8005066:	e9c4 2300 	strd	r2, r3, [r4]
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005072:	f7fb f8ad 	bl	80001d0 <__aeabi_dsub>
 8005076:	ad4a      	add	r5, sp, #296	; 0x128
 8005078:	2401      	movs	r4, #1
 800507a:	45a3      	cmp	fp, r4
 800507c:	da0f      	bge.n	800509e <__kernel_rem_pio2+0x5be>
 800507e:	9b02      	ldr	r3, [sp, #8]
 8005080:	b113      	cbz	r3, 8005088 <__kernel_rem_pio2+0x5a8>
 8005082:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005086:	4619      	mov	r1, r3
 8005088:	9b01      	ldr	r3, [sp, #4]
 800508a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800508e:	e791      	b.n	8004fb4 <__kernel_rem_pio2+0x4d4>
 8005090:	465c      	mov	r4, fp
 8005092:	2000      	movs	r0, #0
 8005094:	2100      	movs	r1, #0
 8005096:	e7de      	b.n	8005056 <__kernel_rem_pio2+0x576>
 8005098:	4602      	mov	r2, r0
 800509a:	460b      	mov	r3, r1
 800509c:	e7e2      	b.n	8005064 <__kernel_rem_pio2+0x584>
 800509e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80050a2:	f7fb f897 	bl	80001d4 <__adddf3>
 80050a6:	3401      	adds	r4, #1
 80050a8:	e7e7      	b.n	800507a <__kernel_rem_pio2+0x59a>
 80050aa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80050ae:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80050b2:	4620      	mov	r0, r4
 80050b4:	4632      	mov	r2, r6
 80050b6:	463b      	mov	r3, r7
 80050b8:	4629      	mov	r1, r5
 80050ba:	f7fb f88b 	bl	80001d4 <__adddf3>
 80050be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4620      	mov	r0, r4
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7fb f881 	bl	80001d0 <__aeabi_dsub>
 80050ce:	4632      	mov	r2, r6
 80050d0:	463b      	mov	r3, r7
 80050d2:	f7fb f87f 	bl	80001d4 <__adddf3>
 80050d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80050da:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80050de:	ed88 7b00 	vstr	d7, [r8]
 80050e2:	f109 39ff 	add.w	r9, r9, #4294967295
 80050e6:	e776      	b.n	8004fd6 <__kernel_rem_pio2+0x4f6>
 80050e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80050ec:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80050f0:	4640      	mov	r0, r8
 80050f2:	4632      	mov	r2, r6
 80050f4:	463b      	mov	r3, r7
 80050f6:	4649      	mov	r1, r9
 80050f8:	f7fb f86c 	bl	80001d4 <__adddf3>
 80050fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4640      	mov	r0, r8
 8005106:	4649      	mov	r1, r9
 8005108:	f7fb f862 	bl	80001d0 <__aeabi_dsub>
 800510c:	4632      	mov	r2, r6
 800510e:	463b      	mov	r3, r7
 8005110:	f7fb f860 	bl	80001d4 <__adddf3>
 8005114:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005118:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800511c:	ed8a 7b00 	vstr	d7, [sl]
 8005120:	3c01      	subs	r4, #1
 8005122:	e75e      	b.n	8004fe2 <__kernel_rem_pio2+0x502>
 8005124:	ab48      	add	r3, sp, #288	; 0x120
 8005126:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb f851 	bl	80001d4 <__adddf3>
 8005132:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005136:	e75a      	b.n	8004fee <__kernel_rem_pio2+0x50e>
 8005138:	9b01      	ldr	r3, [sp, #4]
 800513a:	9a01      	ldr	r2, [sp, #4]
 800513c:	601d      	str	r5, [r3, #0]
 800513e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005142:	605c      	str	r4, [r3, #4]
 8005144:	609f      	str	r7, [r3, #8]
 8005146:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800514a:	60d3      	str	r3, [r2, #12]
 800514c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005150:	6110      	str	r0, [r2, #16]
 8005152:	6153      	str	r3, [r2, #20]
 8005154:	e72e      	b.n	8004fb4 <__kernel_rem_pio2+0x4d4>
 8005156:	bf00      	nop
 8005158:	41700000 	.word	0x41700000
 800515c:	3e700000 	.word	0x3e700000

08005160 <__kernel_sin>:
 8005160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005164:	ed2d 8b04 	vpush	{d8-d9}
 8005168:	eeb0 8a41 	vmov.f32	s16, s2
 800516c:	eef0 8a61 	vmov.f32	s17, s3
 8005170:	ec55 4b10 	vmov	r4, r5, d0
 8005174:	b083      	sub	sp, #12
 8005176:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800517a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800517e:	9001      	str	r0, [sp, #4]
 8005180:	da06      	bge.n	8005190 <__kernel_sin+0x30>
 8005182:	ee10 0a10 	vmov	r0, s0
 8005186:	4629      	mov	r1, r5
 8005188:	f7fb fc74 	bl	8000a74 <__aeabi_d2iz>
 800518c:	2800      	cmp	r0, #0
 800518e:	d051      	beq.n	8005234 <__kernel_sin+0xd4>
 8005190:	4622      	mov	r2, r4
 8005192:	462b      	mov	r3, r5
 8005194:	4620      	mov	r0, r4
 8005196:	4629      	mov	r1, r5
 8005198:	f7fb f9d2 	bl	8000540 <__aeabi_dmul>
 800519c:	4682      	mov	sl, r0
 800519e:	468b      	mov	fp, r1
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4620      	mov	r0, r4
 80051a6:	4629      	mov	r1, r5
 80051a8:	f7fb f9ca 	bl	8000540 <__aeabi_dmul>
 80051ac:	a341      	add	r3, pc, #260	; (adr r3, 80052b4 <__kernel_sin+0x154>)
 80051ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b2:	4680      	mov	r8, r0
 80051b4:	4689      	mov	r9, r1
 80051b6:	4650      	mov	r0, sl
 80051b8:	4659      	mov	r1, fp
 80051ba:	f7fb f9c1 	bl	8000540 <__aeabi_dmul>
 80051be:	a33f      	add	r3, pc, #252	; (adr r3, 80052bc <__kernel_sin+0x15c>)
 80051c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c4:	f7fb f804 	bl	80001d0 <__aeabi_dsub>
 80051c8:	4652      	mov	r2, sl
 80051ca:	465b      	mov	r3, fp
 80051cc:	f7fb f9b8 	bl	8000540 <__aeabi_dmul>
 80051d0:	a33c      	add	r3, pc, #240	; (adr r3, 80052c4 <__kernel_sin+0x164>)
 80051d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d6:	f7fa fffd 	bl	80001d4 <__adddf3>
 80051da:	4652      	mov	r2, sl
 80051dc:	465b      	mov	r3, fp
 80051de:	f7fb f9af 	bl	8000540 <__aeabi_dmul>
 80051e2:	a33a      	add	r3, pc, #232	; (adr r3, 80052cc <__kernel_sin+0x16c>)
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f7fa fff2 	bl	80001d0 <__aeabi_dsub>
 80051ec:	4652      	mov	r2, sl
 80051ee:	465b      	mov	r3, fp
 80051f0:	f7fb f9a6 	bl	8000540 <__aeabi_dmul>
 80051f4:	a337      	add	r3, pc, #220	; (adr r3, 80052d4 <__kernel_sin+0x174>)
 80051f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051fa:	f7fa ffeb 	bl	80001d4 <__adddf3>
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	4606      	mov	r6, r0
 8005202:	460f      	mov	r7, r1
 8005204:	b9eb      	cbnz	r3, 8005242 <__kernel_sin+0xe2>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4650      	mov	r0, sl
 800520c:	4659      	mov	r1, fp
 800520e:	f7fb f997 	bl	8000540 <__aeabi_dmul>
 8005212:	a325      	add	r3, pc, #148	; (adr r3, 80052a8 <__kernel_sin+0x148>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fa ffda 	bl	80001d0 <__aeabi_dsub>
 800521c:	4642      	mov	r2, r8
 800521e:	464b      	mov	r3, r9
 8005220:	f7fb f98e 	bl	8000540 <__aeabi_dmul>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4620      	mov	r0, r4
 800522a:	4629      	mov	r1, r5
 800522c:	f7fa ffd2 	bl	80001d4 <__adddf3>
 8005230:	4604      	mov	r4, r0
 8005232:	460d      	mov	r5, r1
 8005234:	ec45 4b10 	vmov	d0, r4, r5
 8005238:	b003      	add	sp, #12
 800523a:	ecbd 8b04 	vpop	{d8-d9}
 800523e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005242:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <__kernel_sin+0x150>)
 8005244:	ec51 0b18 	vmov	r0, r1, d8
 8005248:	2200      	movs	r2, #0
 800524a:	f7fb f979 	bl	8000540 <__aeabi_dmul>
 800524e:	4632      	mov	r2, r6
 8005250:	ec41 0b19 	vmov	d9, r0, r1
 8005254:	463b      	mov	r3, r7
 8005256:	4640      	mov	r0, r8
 8005258:	4649      	mov	r1, r9
 800525a:	f7fb f971 	bl	8000540 <__aeabi_dmul>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	ec51 0b19 	vmov	r0, r1, d9
 8005266:	f7fa ffb3 	bl	80001d0 <__aeabi_dsub>
 800526a:	4652      	mov	r2, sl
 800526c:	465b      	mov	r3, fp
 800526e:	f7fb f967 	bl	8000540 <__aeabi_dmul>
 8005272:	ec53 2b18 	vmov	r2, r3, d8
 8005276:	f7fa ffab 	bl	80001d0 <__aeabi_dsub>
 800527a:	a30b      	add	r3, pc, #44	; (adr r3, 80052a8 <__kernel_sin+0x148>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	4606      	mov	r6, r0
 8005282:	460f      	mov	r7, r1
 8005284:	4640      	mov	r0, r8
 8005286:	4649      	mov	r1, r9
 8005288:	f7fb f95a 	bl	8000540 <__aeabi_dmul>
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	4630      	mov	r0, r6
 8005292:	4639      	mov	r1, r7
 8005294:	f7fa ff9e 	bl	80001d4 <__adddf3>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4620      	mov	r0, r4
 800529e:	4629      	mov	r1, r5
 80052a0:	f7fa ff96 	bl	80001d0 <__aeabi_dsub>
 80052a4:	e7c4      	b.n	8005230 <__kernel_sin+0xd0>
 80052a6:	bf00      	nop
 80052a8:	55555549 	.word	0x55555549
 80052ac:	3fc55555 	.word	0x3fc55555
 80052b0:	3fe00000 	.word	0x3fe00000
 80052b4:	5acfd57c 	.word	0x5acfd57c
 80052b8:	3de5d93a 	.word	0x3de5d93a
 80052bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80052c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80052c4:	57b1fe7d 	.word	0x57b1fe7d
 80052c8:	3ec71de3 	.word	0x3ec71de3
 80052cc:	19c161d5 	.word	0x19c161d5
 80052d0:	3f2a01a0 	.word	0x3f2a01a0
 80052d4:	1110f8a6 	.word	0x1110f8a6
 80052d8:	3f811111 	.word	0x3f811111

080052dc <fabs>:
 80052dc:	ec51 0b10 	vmov	r0, r1, d0
 80052e0:	ee10 2a10 	vmov	r2, s0
 80052e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80052e8:	ec43 2b10 	vmov	d0, r2, r3
 80052ec:	4770      	bx	lr
	...

080052f0 <floor>:
 80052f0:	ec51 0b10 	vmov	r0, r1, d0
 80052f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80052fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005300:	2e13      	cmp	r6, #19
 8005302:	ee10 5a10 	vmov	r5, s0
 8005306:	ee10 8a10 	vmov	r8, s0
 800530a:	460c      	mov	r4, r1
 800530c:	dc32      	bgt.n	8005374 <floor+0x84>
 800530e:	2e00      	cmp	r6, #0
 8005310:	da14      	bge.n	800533c <floor+0x4c>
 8005312:	a333      	add	r3, pc, #204	; (adr r3, 80053e0 <floor+0xf0>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f7fa ff5c 	bl	80001d4 <__adddf3>
 800531c:	2200      	movs	r2, #0
 800531e:	2300      	movs	r3, #0
 8005320:	f7fb fb9e 	bl	8000a60 <__aeabi_dcmpgt>
 8005324:	b138      	cbz	r0, 8005336 <floor+0x46>
 8005326:	2c00      	cmp	r4, #0
 8005328:	da57      	bge.n	80053da <floor+0xea>
 800532a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800532e:	431d      	orrs	r5, r3
 8005330:	d001      	beq.n	8005336 <floor+0x46>
 8005332:	4c2d      	ldr	r4, [pc, #180]	; (80053e8 <floor+0xf8>)
 8005334:	2500      	movs	r5, #0
 8005336:	4621      	mov	r1, r4
 8005338:	4628      	mov	r0, r5
 800533a:	e025      	b.n	8005388 <floor+0x98>
 800533c:	4f2b      	ldr	r7, [pc, #172]	; (80053ec <floor+0xfc>)
 800533e:	4137      	asrs	r7, r6
 8005340:	ea01 0307 	and.w	r3, r1, r7
 8005344:	4303      	orrs	r3, r0
 8005346:	d01f      	beq.n	8005388 <floor+0x98>
 8005348:	a325      	add	r3, pc, #148	; (adr r3, 80053e0 <floor+0xf0>)
 800534a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534e:	f7fa ff41 	bl	80001d4 <__adddf3>
 8005352:	2200      	movs	r2, #0
 8005354:	2300      	movs	r3, #0
 8005356:	f7fb fb83 	bl	8000a60 <__aeabi_dcmpgt>
 800535a:	2800      	cmp	r0, #0
 800535c:	d0eb      	beq.n	8005336 <floor+0x46>
 800535e:	2c00      	cmp	r4, #0
 8005360:	bfbe      	ittt	lt
 8005362:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005366:	fa43 f606 	asrlt.w	r6, r3, r6
 800536a:	19a4      	addlt	r4, r4, r6
 800536c:	ea24 0407 	bic.w	r4, r4, r7
 8005370:	2500      	movs	r5, #0
 8005372:	e7e0      	b.n	8005336 <floor+0x46>
 8005374:	2e33      	cmp	r6, #51	; 0x33
 8005376:	dd0b      	ble.n	8005390 <floor+0xa0>
 8005378:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800537c:	d104      	bne.n	8005388 <floor+0x98>
 800537e:	ee10 2a10 	vmov	r2, s0
 8005382:	460b      	mov	r3, r1
 8005384:	f7fa ff26 	bl	80001d4 <__adddf3>
 8005388:	ec41 0b10 	vmov	d0, r0, r1
 800538c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005390:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005394:	f04f 33ff 	mov.w	r3, #4294967295
 8005398:	fa23 f707 	lsr.w	r7, r3, r7
 800539c:	4207      	tst	r7, r0
 800539e:	d0f3      	beq.n	8005388 <floor+0x98>
 80053a0:	a30f      	add	r3, pc, #60	; (adr r3, 80053e0 <floor+0xf0>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fa ff15 	bl	80001d4 <__adddf3>
 80053aa:	2200      	movs	r2, #0
 80053ac:	2300      	movs	r3, #0
 80053ae:	f7fb fb57 	bl	8000a60 <__aeabi_dcmpgt>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d0bf      	beq.n	8005336 <floor+0x46>
 80053b6:	2c00      	cmp	r4, #0
 80053b8:	da02      	bge.n	80053c0 <floor+0xd0>
 80053ba:	2e14      	cmp	r6, #20
 80053bc:	d103      	bne.n	80053c6 <floor+0xd6>
 80053be:	3401      	adds	r4, #1
 80053c0:	ea25 0507 	bic.w	r5, r5, r7
 80053c4:	e7b7      	b.n	8005336 <floor+0x46>
 80053c6:	2301      	movs	r3, #1
 80053c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80053cc:	fa03 f606 	lsl.w	r6, r3, r6
 80053d0:	4435      	add	r5, r6
 80053d2:	4545      	cmp	r5, r8
 80053d4:	bf38      	it	cc
 80053d6:	18e4      	addcc	r4, r4, r3
 80053d8:	e7f2      	b.n	80053c0 <floor+0xd0>
 80053da:	2500      	movs	r5, #0
 80053dc:	462c      	mov	r4, r5
 80053de:	e7aa      	b.n	8005336 <floor+0x46>
 80053e0:	8800759c 	.word	0x8800759c
 80053e4:	7e37e43c 	.word	0x7e37e43c
 80053e8:	bff00000 	.word	0xbff00000
 80053ec:	000fffff 	.word	0x000fffff

080053f0 <scalbn>:
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	ec55 4b10 	vmov	r4, r5, d0
 80053f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80053fa:	4606      	mov	r6, r0
 80053fc:	462b      	mov	r3, r5
 80053fe:	b99a      	cbnz	r2, 8005428 <scalbn+0x38>
 8005400:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005404:	4323      	orrs	r3, r4
 8005406:	d036      	beq.n	8005476 <scalbn+0x86>
 8005408:	4b39      	ldr	r3, [pc, #228]	; (80054f0 <scalbn+0x100>)
 800540a:	4629      	mov	r1, r5
 800540c:	ee10 0a10 	vmov	r0, s0
 8005410:	2200      	movs	r2, #0
 8005412:	f7fb f895 	bl	8000540 <__aeabi_dmul>
 8005416:	4b37      	ldr	r3, [pc, #220]	; (80054f4 <scalbn+0x104>)
 8005418:	429e      	cmp	r6, r3
 800541a:	4604      	mov	r4, r0
 800541c:	460d      	mov	r5, r1
 800541e:	da10      	bge.n	8005442 <scalbn+0x52>
 8005420:	a32b      	add	r3, pc, #172	; (adr r3, 80054d0 <scalbn+0xe0>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	e03a      	b.n	800549e <scalbn+0xae>
 8005428:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800542c:	428a      	cmp	r2, r1
 800542e:	d10c      	bne.n	800544a <scalbn+0x5a>
 8005430:	ee10 2a10 	vmov	r2, s0
 8005434:	4620      	mov	r0, r4
 8005436:	4629      	mov	r1, r5
 8005438:	f7fa fecc 	bl	80001d4 <__adddf3>
 800543c:	4604      	mov	r4, r0
 800543e:	460d      	mov	r5, r1
 8005440:	e019      	b.n	8005476 <scalbn+0x86>
 8005442:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005446:	460b      	mov	r3, r1
 8005448:	3a36      	subs	r2, #54	; 0x36
 800544a:	4432      	add	r2, r6
 800544c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005450:	428a      	cmp	r2, r1
 8005452:	dd08      	ble.n	8005466 <scalbn+0x76>
 8005454:	2d00      	cmp	r5, #0
 8005456:	a120      	add	r1, pc, #128	; (adr r1, 80054d8 <scalbn+0xe8>)
 8005458:	e9d1 0100 	ldrd	r0, r1, [r1]
 800545c:	da1c      	bge.n	8005498 <scalbn+0xa8>
 800545e:	a120      	add	r1, pc, #128	; (adr r1, 80054e0 <scalbn+0xf0>)
 8005460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005464:	e018      	b.n	8005498 <scalbn+0xa8>
 8005466:	2a00      	cmp	r2, #0
 8005468:	dd08      	ble.n	800547c <scalbn+0x8c>
 800546a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800546e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005472:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005476:	ec45 4b10 	vmov	d0, r4, r5
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005480:	da19      	bge.n	80054b6 <scalbn+0xc6>
 8005482:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005486:	429e      	cmp	r6, r3
 8005488:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800548c:	dd0a      	ble.n	80054a4 <scalbn+0xb4>
 800548e:	a112      	add	r1, pc, #72	; (adr r1, 80054d8 <scalbn+0xe8>)
 8005490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1e2      	bne.n	800545e <scalbn+0x6e>
 8005498:	a30f      	add	r3, pc, #60	; (adr r3, 80054d8 <scalbn+0xe8>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	f7fb f84f 	bl	8000540 <__aeabi_dmul>
 80054a2:	e7cb      	b.n	800543c <scalbn+0x4c>
 80054a4:	a10a      	add	r1, pc, #40	; (adr r1, 80054d0 <scalbn+0xe0>)
 80054a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0b8      	beq.n	8005420 <scalbn+0x30>
 80054ae:	a10e      	add	r1, pc, #56	; (adr r1, 80054e8 <scalbn+0xf8>)
 80054b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054b4:	e7b4      	b.n	8005420 <scalbn+0x30>
 80054b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80054ba:	3236      	adds	r2, #54	; 0x36
 80054bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80054c4:	4620      	mov	r0, r4
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <scalbn+0x108>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	e7e8      	b.n	800549e <scalbn+0xae>
 80054cc:	f3af 8000 	nop.w
 80054d0:	c2f8f359 	.word	0xc2f8f359
 80054d4:	01a56e1f 	.word	0x01a56e1f
 80054d8:	8800759c 	.word	0x8800759c
 80054dc:	7e37e43c 	.word	0x7e37e43c
 80054e0:	8800759c 	.word	0x8800759c
 80054e4:	fe37e43c 	.word	0xfe37e43c
 80054e8:	c2f8f359 	.word	0xc2f8f359
 80054ec:	81a56e1f 	.word	0x81a56e1f
 80054f0:	43500000 	.word	0x43500000
 80054f4:	ffff3cb0 	.word	0xffff3cb0
 80054f8:	3c900000 	.word	0x3c900000

080054fc <__libc_init_array>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4d0d      	ldr	r5, [pc, #52]	; (8005534 <__libc_init_array+0x38>)
 8005500:	4c0d      	ldr	r4, [pc, #52]	; (8005538 <__libc_init_array+0x3c>)
 8005502:	1b64      	subs	r4, r4, r5
 8005504:	10a4      	asrs	r4, r4, #2
 8005506:	2600      	movs	r6, #0
 8005508:	42a6      	cmp	r6, r4
 800550a:	d109      	bne.n	8005520 <__libc_init_array+0x24>
 800550c:	4d0b      	ldr	r5, [pc, #44]	; (800553c <__libc_init_array+0x40>)
 800550e:	4c0c      	ldr	r4, [pc, #48]	; (8005540 <__libc_init_array+0x44>)
 8005510:	f000 f820 	bl	8005554 <_init>
 8005514:	1b64      	subs	r4, r4, r5
 8005516:	10a4      	asrs	r4, r4, #2
 8005518:	2600      	movs	r6, #0
 800551a:	42a6      	cmp	r6, r4
 800551c:	d105      	bne.n	800552a <__libc_init_array+0x2e>
 800551e:	bd70      	pop	{r4, r5, r6, pc}
 8005520:	f855 3b04 	ldr.w	r3, [r5], #4
 8005524:	4798      	blx	r3
 8005526:	3601      	adds	r6, #1
 8005528:	e7ee      	b.n	8005508 <__libc_init_array+0xc>
 800552a:	f855 3b04 	ldr.w	r3, [r5], #4
 800552e:	4798      	blx	r3
 8005530:	3601      	adds	r6, #1
 8005532:	e7f2      	b.n	800551a <__libc_init_array+0x1e>
 8005534:	08005780 	.word	0x08005780
 8005538:	08005780 	.word	0x08005780
 800553c:	08005780 	.word	0x08005780
 8005540:	08005784 	.word	0x08005784

08005544 <memset>:
 8005544:	4402      	add	r2, r0
 8005546:	4603      	mov	r3, r0
 8005548:	4293      	cmp	r3, r2
 800554a:	d100      	bne.n	800554e <memset+0xa>
 800554c:	4770      	bx	lr
 800554e:	f803 1b01 	strb.w	r1, [r3], #1
 8005552:	e7f9      	b.n	8005548 <memset+0x4>

08005554 <_init>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	bf00      	nop
 8005558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555a:	bc08      	pop	{r3}
 800555c:	469e      	mov	lr, r3
 800555e:	4770      	bx	lr

08005560 <_fini>:
 8005560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005562:	bf00      	nop
 8005564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005566:	bc08      	pop	{r3}
 8005568:	469e      	mov	lr, r3
 800556a:	4770      	bx	lr
